{"version":3,"sources":["../rquery/rquery.js"],"names":[],"mappings":"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","file":"rquery.js","sourcesContent":["\nimport expressLib from 'express';\nimport brucedown from 'brucedown';\nimport marked from 'marked';\nimport crypto from 'crypto';\nimport CSON from 'season';\nimport base32 from 'thirty-two';\nimport speakeasy from 'speakeasy';\nimport otp from 'otplib/lib/totp';\nimport concatStream from 'concat-stream';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport * as Files from './Files';\nimport * as Express from './Express';\n\nimport {default as renderPage} from './html/Page';\nimport {default as renderHelp} from './html/Help';\nimport * as KeyspaceHelp from './html/KeyspaceHelp';\n\nimport KeyspaceHelpPage from './jsx/KeyspaceHelpPage';\n\nimport styles from './html/styles';\n\nconst unsupportedAuth = ['twitter.com', 'github.com', 'gitlab.com', 'bitbucket.org'];\nconst supportedAuth = ['telegram.org'];\n\nexport default class {\n\n   async testExit() {\n      return false;\n   }\n\n   async init() {\n      this.commandMap = new Map();\n      this.logger.info('init');\n      if (await this.testExit()) process.exit(1);\n   }\n\n   async start() {\n      this.redis = redisLib.createClient(this.config.redisUrl);\n      this.expressApp = expressLib();\n      this.expressApp.use((req, res, next) => {\n         req.pipe(concatStream(content => {\n            req.body = content;\n            next();\n         }));\n      });\n      this.addRoutes();\n      if (this.config.disableTelegramHook) {\n         this.logger.warn('telegram webhook disabled');\n      } else {\n         this.addTelegramWebhook();\n      }\n      this.expressApp.use((req, res) => this.sendErrorRoute(req, res));\n      this.expressServer = await Express.listen(this.expressApp, this.config.port);\n      this.logger.info('listen', this.config.port, Express.getRoutes(this.expressApp), this.expressServer);\n   }\n\n   sendErrorRoute(req, res) {\n      try {\n         if (/^\\/favicon.ico$/.test(req.path)) {\n            res.status(404).send(`Invalid path: ${req.path}\\n`);\n            return;\n         }\n         const [matching, account, keyspace] = req.path.match(/^\\/ak\\/([^\\/]+)\\/([^\\/]+)\\//) || [];\n         this.logger.debug('sendErrorRoute', req.path,  account, keyspace, this.isBrowser(req));\n         if (this.isBrowser(req)) {\n            let redirectPath = '/routes';\n            if (account && keyspace) {\n               redirectPath = ['/ak', account, keyspace, 'help'].join('/');\n            }\n            res.redirect(302, redirectPath);\n         } else {\n            res.status(404).send(`Invalid: ${req.path}. Try /routes or /help.\\n`);\n         }\n      } catch (err) {\n         this.logger.warn(err);\n         throw err;\n      }\n   }\n\n   addSecureDomain() {\n   }\n\n   addTelegramWebhook() {\n      if (!this.config.botSecret) {\n         this.logger.error('addTelegramWebhook botSecret');\n      } else {\n         this.expressApp.post('/webhook-telegram/*', async (req, res) => {\n            try {\n               this.logger.debug('webhook auth', req.params[0], this.config.botSecret);\n               if (req.params[0] !== this.config.botSecret) {\n                  throw {message: 'Invalid telegram webhook'};\n               }\n               const body = req.body.toString('utf8');\n               this.logger.debug('body', body);\n               if (!/^[\"{\\[]/.test(body)) {\n                  throw {message: 'body not JSON', body};\n               } else {\n                  await this.handleTelegram(req, res, JSON.parse(body));\n                  res.send('');\n               }\n            } catch (err) {\n               this.logger.error(err);\n               res.status(500).send(`Internal error: ${err.message}\\n`);\n            }\n         });\n      }\n   }\n\n   async handleTelegram(req, res, telegram) {\n      this.logger.debug('telegram', telegram);\n      const message = {};\n      let content;\n      if (telegram.message) {\n         message.type = 'message';\n         content = telegram.message;\n         if (!content.text) {\n         } else {\n            message.text = content.text;\n         }\n      } else if (telegram.inline_query) {\n         message.type = 'query';\n         content = telegram.inline_query;\n         if (!content.query) {\n         } else {\n            message.text = content.query;\n         }\n      } else {\n         this.logger.warn('telegram', telegram);\n         return;\n      }\n      if (!content.chat) {\n      } else if (!content.chat.id) {\n      } else {\n         message.chatId = content.chat.id;\n      }\n      this.logger.debug('tcm', {telegram, content, message});\n      if (!content.from) {\n      } else if (!content.from.username) {\n      } else if (!content.from.id) {\n      } else {\n         message.fromId = content.from.id;\n         message.greetName = content.from.username;\n         if (true && content.from.first_name) {\n            message.greetName = content.from.first_name;\n         } else if (content.from.first_name && content.from.last_name) {\n            message.greetName = [content.from.first_name, content.from.last_name].join(' ');\n         }\n         message.username = content.from.username;\n         if (/verify/.test(content.text)) {\n            message.action = 'verify';\n            await this.handleTelegramVerify(message);\n         } else if (/grant/.test(content.text)) {\n            message.action = 'grant';\n            await this.handleTelegramGrant(message);\n         } else {\n            await this.sendTelegramReply(message, {\n               content: `Commands:\n               /verify - verify your Telegram identity to redishub.com\n               `\n            });\n         }\n      }\n      this.logger.info('telegram message', message, telegram);\n   }\n\n   async handleTelegramVerify(request) {\n      const now = new Date().getTime();\n      this.logger.info('handleTelegramVerify', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [sadd, verified, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sadd(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      if (!secret) {\n         secret = this.generateTokenKey();\n      }\n      if (sadd || !verified) {\n         const [hmset] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(userKey, 'verified', now);\n            multi.hsetnx(userKey, 'id', request.fromId);\n            multi.hsetnx(userKey, 'secret', secret);\n         });\n         await this.sendTelegramReply(request, {\n            format: 'html',\n            content: [`Thanks, ${request.greetName}.`,\n               `Your identity as is now verified to <b>${this.config.serviceLabel}</b>`,\n               `as <code>telegram.me/${request.username}.</code>`\n            ].join(' ')\n         });\n      } else {\n         const duration = now - parseInt(verified);\n         await this.sendTelegramReply(request, {\n            format: 'html',\n            content: [`Hi ${request.greetName}.`,\n               `Your identity as was already verified to <b>${this.config.serviceLabel}</b>`,\n               `${Millis.formatVerboseDuration(duration)} ago as <code>@${request.username}</code>`\n            ].join(' ')\n         });\n      }\n   }\n\n   async handleTelegramGrant(request) {\n      const now = new Date().getTime();\n      this.logger.info('handleTelegramGrant', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [ismember, verified, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sismember(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      throw {message: 'Not implemented'};\n   }\n\n   async sendTelegramReply(request, response) {\n      this.logger.info('sendTelegramReply', response);\n      try {\n         assert(request.fromId, 'fromId');\n         const content = lodash.trim(response.content.replace(/\\s\\s+/g, ' '));\n         let uri = `sendMessage?chat_id=${request.fromId}`;\n         uri += '&disable_notification=true';\n         if (response.format === 'markdown') {\n            uri += `&parse_mode=Markdown`;\n         } else if (response.format === 'html') {\n            uri += `&parse_mode=HTML`;\n         }\n         uri += `&text=${encodeURIComponent(content)}`;\n         const url = [this.config.botUrl, uri].join('/');\n         this.logger.info('sendTelegramReply url', url);\n         await Requests.head({url});\n      } catch (err) {\n         this.logger.error(err);\n      }\n   }\n\n   addRoutes() {\n      this.addPublicCommand({\n         key: 'routes',\n         access: 'debug',\n         aliases: ['/'],\n         resultObjectType: 'KeyedArrays',\n         sendResult: async (req, res, reqx, result) => {\n            if (this.isCliDomain(req)) {\n               return result;\n            } else {\n               res.set('Content-Type', 'text/html');\n               res.send(renderPage(renderHelp({\n                  config: this.config, req, result\n               })));\n            }\n         }\n      }, async (req, res, reqx) => {\n         let hostUrl = this.config.hostUrl;\n         if (this.config.hostname != 'localhost') {\n            hostUrl = 'https://' + req.hostname;\n         }\n         const routes = Express.getRoutes(this.expressApp)\n         .filter(route => !['/', '/routes', '/webhook-telegram/*', '/help', '/about'].includes(route));\n         const accountOnlyRoutes = routes\n         .filter(route => route.includes(':account') && !route.includes(':keyspace'));\n         return {\n            common: routes\n            .filter(route => route && !route.includes(':') && !['/epoch', '/register-cert'].includes(route))\n            .map(route => `${hostUrl}${route}`)\n            ,\n            misc: routes\n            .filter(route => route.includes(':') && !route.includes('telegram') && !/\\:(account|access)/.test(route))\n            .map(route => `${route}`)\n            ,\n            ephemeral: routes\n            .filter(route => route.includes('-ephemeral') && route !== '/register-ephemeral')\n            .map(route => `${route}`)\n            ,\n            telegram: routes\n            .filter(route => route.includes('telegram'))\n            .map(route => `${route}`)\n            ,\n            account: accountOnlyRoutes.map(route => `${route}`)\n            ,\n            accountKeyspace: routes\n            .filter(route => route.includes(':account') && route.includes(':keyspace/'))\n            .map(route => `${route}`)\n         };\n      });\n      this.addPublicCommand({\n         key: 'about',\n         access: 'redirect',\n      }, async (req, res) => {\n         if (this.config.aboutUrl) {\n            res.redirect(302, this.config.aboutUrl);\n         }\n      });\n      this.expressApp.get('', async (req, res) => {\n         res.redirect(302, '/routes');\n      });\n      this.addPublicRoute('help', async (req, res) => {\n         if (this.isBrowser(req)) {\n            if (this.config.helpUrl) {\n               res.redirect(302, this.config.helpUrl);\n            } else if (false) {\n               let content = await Files.readFile('README.md');\n               if (false) {\n                  brucedown('README.md', (err, htmlResult) => {\n                     this.logger.debug('brucedown', htmlResult);\n                  });\n               } else {\n                  content = renderPage({\n                     config: this.config,\n                     req,\n                     title: this.config.serviceLabel,\n                     content: marked(content.toString())\n                  });\n                  res.set('Content-Type', 'text/html');\n                  res.send(content);\n               }\n            }\n         } else if (this.isCliDomain(req)) {\n            return this.listCommands();\n         } else {\n            return this.listCommands();\n         }\n      });\n      if (this.config.allowInfo) {\n         this.addPublicRoute('info', async (req, res) => {\n            res.set('Content-Type', 'text/plain');\n            res.send(await this.redis.infoAsync());\n         });\n      }\n      if (this.config.allowKeyspaces) {\n         this.addPublicRoute('keyspaces', () => this.redis.smembersAsync(this.adminKey('keyspaces')));\n      }\n      this.addPublicRoute('epoch', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/seconds', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/milliseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 + time[1]/1000);\n      });\n      this.addPublicRoute('time/nanoseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 * 1000 + parseInt(time[1]));\n      });\n      this.addPublicRoute('time', () => this.redis.timeAsync());\n      this.addPublicCommand({\n         key: 'genkey-otp',\n         params: ['user', 'host'],\n         format: 'json'\n      }, async (req, res) => {\n         const {user, host} = req.params;\n         this.logger.debug('genkey-otp', user, host);\n         return this.buildQrReply({user, host});\n      });\n      this.addPublicCommand({\n         key: 'genkey-ga',\n         params: ['address', 'issuer'],\n         format: 'json'\n      }, async (req, res) => {\n         const {address, issuer} = req.params;\n         this.logger.debug('genkey-ga', address, issuer);\n         return this.buildQrReply({account: address, issuer});\n      });\n      if (!this.config.secureDomain) {\n         this.logger.warn('insecure mode');\n      } else {\n         this.addPublicCommand({\n            key: 'gentoken',\n            params: ['account']\n         }, async (req, res, reqx) => {\n            const {account} = req.params;\n            const accountKey = this.adminKey('account', account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               multi.smembers(this.adminKey('account', account, 'certs'));\n            });\n            const duration = time - admined;\n            if (duration < this.config.adminLimit) {\n               return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n            }\n            this.logger.debug('gentoken', accountKey);\n            this.validateCert(req, certs, account);\n            const token = this.generateTokenKey(6);\n            await this.redis.setexAsync([accountKey, token].join(':'), this.config.keyExpire, token);\n            return token;\n         });\n         this.addSecureDomain();\n      }\n      this.addPublicCommand({\n         key: 'verify-user-telegram',\n         params: ['user']\n      }, async (req, res) => {\n         const {user} = req.params;\n         const userKey = this.adminKey('telegram', 'user', user);\n         let [[now], sismember, verified, secret] = await this.redis.multiExecAsync(multi => {\n            multi.time();\n            multi.sismember(this.adminKey('telegram:verified:users'), user);\n            multi.hget(userKey, 'verified');\n            multi.hget(userKey, 'secret');\n         });\n         if (sismember) {\n            if (verified) {\n               const duration = parseInt(now) - parseInt(verified);\n               return `OK: ${user}@telegram.me, verified ${Millis.formatVerboseDuration(duration)} ago`;\n            } else {\n               return `OK: ${user}@telegram.me`;\n            }\n         } else {\n            return `Telegram user not yet verified: ${user}. Please Telegram '@redishub_bot /verify' e.g. via https://web.telegram.org`;\n         }\n      });\n      this.addRegisterRoutes();\n      this.addAccountRoutes();\n      this.addKeyspaceCommand({\n         key: 'help',\n         access: 'debug',\n         resultObjectType: 'KeyedArrays',\n         sendResult: async (req, res, reqx, result) => {\n            if (true) {\n               res.set('Content-Type', 'text/html');\n               res.send(renderPage(KeyspaceHelp.render({\n                  config: this.config, req, reqx, result\n               })));\n            } else if (!this.isMobile(req)) {\n               res.set('Content-Type', 'text/html');\n               res.send(ReactDOMServer.renderToString(<KeyspaceHelpPage reqx={reqx} result={result}/>));\n            } else {\n               return result;\n            }\n         }\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = req.params;\n         let hostUrl = this.config.hostUrl;\n         if (this.config.hostname !== 'localhost') {\n            hostUrl = `https://${req.hostname}`;\n         }\n         this.logger.ndebug('help', req.params, this.commands.map(command => command.key).join('/'));\n         const message = `Try sample endpoints below on this keyspace.`;\n         const commandReferenceMessage = `Read the Redis.io docs for the following commands`;\n         const customCommandHeading = `Custom commands`;\n         const description = [`You can set, add and view keys, sets, lists, zsets, hashes etc.`,\n            `Also edit the URL in the location bar to try other combinations.`\n         ];\n         const exampleParams = [\n            ['set', 'mykey1/myvalue'],\n            ['get', 'mykey1'],\n            ['set-json-query', 'myobject1?name=myname&id=12346'],\n            ['get-json', 'myobject1'],\n            ['sadd', 'myset1/myvalue'],\n            ['smembers', 'myset1'],\n            ['lpush', 'mylist1/myvalue'],\n            ['lrange', 'mylist1/0/10'],\n            ['rrange', 'mylist1/0/10'],\n            ['hset', 'myhashes1/field1/value1'],\n            ['hsetnx', 'myhashes1/field2/value2'],\n            ['hgetall', 'myhashes1'],\n            ['zadd', 'myzset1/10/member10'],\n            ['zadd', 'myzset1/20/member20'],\n            ['zrange', 'myzset1/0/-1'],\n            ['zrevrange', 'myzset1/0/-1'],\n            ['ttls'],\n            ['types'],\n         ];\n         const exampleUrls = exampleParams.map(params => {\n            const key = params.shift();\n            let url = `${hostUrl}/ak/${account}/${keyspace}/${key}`;\n            if (params) {\n               url += '/' + params;\n            }\n            return url;\n         })\n         return {message, commandReferenceMessage, customCommandHeading, description, exampleUrls,\n            commands: this.commands,\n            keyspaceCommands: this.listCommands('keyspace')\n         };\n      });\n      this.addKeyspaceCommand({\n         key: 'register-keyspace',\n         access: 'admin'\n      }, async (req, res, reqx) => {\n         const {time, account, keyspace, accountKey} = reqx;\n         this.logger.debug('command', reqx);\n         this.logger.debug('hsetnx', accountKey, time);\n         const replies = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', time);\n         });\n         return replies;\n      });\n      this.addKeyspaceCommand({\n         key: 'deregister-keyspace',\n         access: 'admin'\n      }, async (req, res, {account, keyspace, accountKey, keyspaceKey}) => {\n         const [keys] = await this.redis.multiExecAsync(multi => {\n            multi.keys(this.keyspaceKey(account, keyspace, '*'));\n         });\n         const [keyspaces] = await this.redis.multiExecAsync(multi => {\n            multi.smembers(this.accountKey(account, 'keyspaces'));\n         });\n         this.logger.info('deregister', keyspace, keys.length, keyspaces);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multiReply = await this.redis.multiExecAsync(multi => {\n            keys.forEach(key => multi.del(key));\n            multi.del(this.accountKey(account, 'keyspaces'), keyspace);\n            multi.del(this.accountKey(account, 'certs'));\n            multi.del(accountKey);\n         });\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'flush',\n         access: 'admin'\n      }, async (req, res) => {\n         const {account, keyspace} = req.params;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.del(key));\n         const multiReply = await multi.execAsync();\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'show-keyspace-config',\n         access: 'debug'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n         ];\n         return await this.redis.hgetallAsync(reqx.accountKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'keys',\n         access: 'debug'\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = reqx;\n         reqx.hints = [\n            {\n               uri: ['ttls'],\n            },\n            {\n               uri: ['types'],\n            },\n         ];\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'types',\n         access: 'debug',\n         description: 'view all key types in this keyspace'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['ttls'],\n            },\n         ];\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.type(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'ttls',\n         access: 'debug',\n         description: 'view all TTLs in this keyspace'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['types'],\n            },\n         ];\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.ttl(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'ttl',\n         params: ['key'],\n         access: 'debug',\n         description: 'check the key TTL'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['type', reqx.key],\n            },\n         ];\n         return await this.redis.ttlAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'type',\n         params: ['key'],\n         access: 'debug',\n         description: 'check the key type'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['ttl', reqx.key],\n            },\n         ];\n         return await this.redis.typeAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-encrypt',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         const {key, value} = req.params;\n         let cert = req.get('ssl_client_cert');\n         if (!cert) {\n            throw {message: 'No client cert'};\n         }\n         cert = cert.replace(/\\t/g, '\\n');\n         const encrypted = crypto.publicEncrypt(cert, new Buffer(value)).toString('base64');\n         const reply = await this.redis.setAsync(keyspaceKey, encrypted);\n         return {key, encrypted, reply};\n      });\n      this.addKeyspaceCommand({\n         key: 'set',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hint =  {\n            uri: ['get', reqx.key],\n            description: 'get the value you have set'\n         };\n         return await this.redis.setAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-json-object',\n         description: 'Set JSON via URL encoded object',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         let string = req.params.value;\n         if (/^\\w/.test(req.params.value)) {\n            string = ['{', req.params.value, '}'].join('');\n            string = string.replace(/(\\W)(\\w+):/g, '$1\"$2\":');\n         }\n         reqx.hints = [\n            {\n               uri: ['get-json', reqx.key],\n            },\n         ];\n         return await this.redis.setAsync(reqx.keyspaceKey, string);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-json-query',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['get-json', reqx.key],\n            }\n         ];\n         return await this.redis.setAsync(reqx.keyspaceKey, JSON.stringify(req.query));\n      });\n      this.addKeyspaceCommand({\n         key: 'setex',\n         params: ['key', 'seconds', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['get', reqx.key],\n            },\n            {\n               uri: ['ttl', reqx.key],\n            }\n         ];\n         const {seconds, value} = req.params;\n         return await this.redis.setexAsync(reqx.keyspaceKey, seconds, value);\n      });\n      this.addKeyspaceCommand({\n         key: 'setnx',\n         params: ['key', 'value'],\n         access: 'add'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.setnxAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'get',\n         params: ['key'],\n         description: 'get the value you have set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['ttl', reqx.key],\n            }\n         ];\n         return await this.redis.getAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'get-json',\n         params: ['key'],\n         description: 'get the JSON value you have set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['ttl', reqx.key],\n            }\n         ];\n         const {key, keyspaceKey} = reqx;\n         const value = await this.redis.getAsync(keyspaceKey);\n         this.logger.info('get-json', typeof value, value);\n         if (value) {\n            if (true) {\n               return JSON.parse(value);\n            } else {\n               res.json(JSON.parse(value));\n            }\n         } else {\n            this.sendStatusMessage(req, res, 404, 'Not found: ' + key);\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'incr',\n         params: ['key'],\n         access: 'add'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.incrAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'exists',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.existsAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'del',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.delAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sadd',\n         params: ['key', 'member'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['sismember', reqx.key, req.params.member],\n            },\n            {\n               uri: ['smembers', reqx.key],\n            }\n         ];\n         return await this.redis.saddAsync(reqx.keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'srem',\n         params: ['key', 'member'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.sremAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'smove',\n         params: ['key', 'dest', 'member'],\n         access: 'set'\n      }, async (req, res, {account, keyspace, keyspaceKey}, multi) => {\n         const {dest, member} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         let result = await this.redis.smoveAsync(keyspaceKey, destKey, member);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'spop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.spopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'smembers',\n         params: ['key'],\n         description: 'get the members of your set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['scard', reqx.key],\n            }\n         ];\n         return await this.redis.smembersAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sismember',\n         params: ['key', 'member'],\n         description: 'check that the value /exists in your set'\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.sismemberAsync(reqx.keyspaceKey, req.params.member);\n         reqx.hints = [\n            {\n               uri: ['smembers', reqx.key],\n            }\n         ];\n         if (reply) {\n            reqx.hints.push({\n               uri: ['ttl', reqx.key],\n               description: 'check the TTL of your key'\n            });\n         }\n         return reply;\n      });\n      this.addKeyspaceCommand({\n         key: 'scard',\n         params: ['key'],\n         description: 'to get the cardinality of the zset'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['smembers', reqx.key],\n            }\n         ];\n         return await this.redis.scardAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpush',\n         params: ['key', 'value'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['lrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['llen', reqx.key],\n            }\n         ];\n         return await this.redis.lpushAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpush-trim',\n         params: ['key', 'length', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}, multi) => {\n         const {value, length} = req.params;\n         multi.lpush(keyspaceKey, value);\n         multi.trim(keyspaceKey, length);\n      });\n      this.addKeyspaceCommand({\n         key: 'rpush',\n         params: ['key', 'value'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         return await this.redis.rpushAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.lpopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'blpop',\n         params: ['key', 'timeout'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.blpopAsync(reqx.keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'brpop',\n         params: ['key', 'timeout'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.brpopAsync(reqx.keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'rpop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.rpopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'brpoplpush',\n         params: ['key', 'dest', 'timeout'],\n         access: 'set'\n      }, async (req, res, {account, keyspace, keyspaceKey}, multi) => {\n         const {dest, timeout} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         const result = await this.redis.brpoplpushAsync(keyspaceKey, destKey, timeout);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'llen',\n         params: ['key'],\n         description: 'check the length of your list'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['lrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['lrange', reqx.key, -10, -1],\n               description: 'get items from the right of your list'\n            },\n            {\n               uri: ['help'],\n               description: 'see sample commands'\n            }\n         ];\n         return await this.redis.llenAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lindex',\n         params: ['key', 'index']\n      }, async (req, res, reqx) => {\n         return await this.redis.lindexAsync(reqx.keyspaceKey, req.params.index);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrem',\n         params: ['key', 'count', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.lremAsync(reqx.keyspaceKey, req.params.count, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lset',\n         params: ['key', 'index', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.lsetAsync(reqx.keyspaceKey, req.params.index, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'ltrim',\n         params: ['key', 'start', 'stop'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         return await this.redis.ltrimAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrange',\n         params: ['key', 'start', 'stop'],\n         description: 'get items from the left of your list'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['llen', reqx.key],\n               description: 'check the length of your list'\n            }\n         ];\n         return await this.redis.lrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrevrange',\n         params: ['key', 'start', 'stop'],\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['llen', reqx.key],\n               description: 'check the length of your list'\n            }\n         ];\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n         return array.reverse();\n      });\n      this.addKeyspaceCommand({\n         key: 'rrange',\n         params: ['key', 'start', 'stop'],\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['llen', reqx.key],\n            }\n         ];\n         if (req.params.start < 0) {\n            throw {message: `${reqx.command.key} start must be zero or greater`};\n         }\n         if (req.params.stop < 0) {\n            throw {message: `${reqx.command.key} stop must be zero or greater`};\n         }\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, 0 - req.params.stop, 0 - req.params.start - 1);\n         return array.reverse();\n      });\n      this.addKeyspaceCommand({\n         key: 'rrevrange',\n         params: ['key', 'start', 'stop'],\n      }, async (req, res, reqx) => {\n         if (req.params.start < 0) {\n            throw {message: `${reqx.command.key} start must be zero or greater`};\n         }\n         if (req.params.stop < 0) {\n            throw {message: `${reqx.command.key} stop must be zero or greater`};\n         }\n         reqx.hints = [\n            {\n               uri: ['llen', reqx.key],\n            }\n         ];\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, 0 - req.params.stop, 0 - req.params.start - 1);\n         return array;\n      });\n      this.addKeyspaceCommand({\n         key: 'hset',\n         params: ['key', 'field', 'value'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hget', reqx.key, req.params.field],\n               description: 'check the contents of the field you have set'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            }\n         ];\n         return await this.redis.hsetAsync(reqx.keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hsetnx',\n         params: ['key', 'field', 'value'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hget', reqx.key, req.params.field],\n               description: 'check the contents of the field you have set'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            }\n         ];\n         return await this.redis.hsetnxAsync(reqx.keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hget',\n         params: ['key', 'field']\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            }\n         ];\n         return await this.redis.hgetAsync(reqx.keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hdel',\n         params: ['key', 'field'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hexists', reqx.key, req.params.field],\n               description: 'check if the field exists'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            }\n         ];\n         return await this.redis.hdelAsync(reqx.keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hincrby',\n         params: ['key', 'field', 'increment'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hget', reqx.key, req.params.field],\n               description: 'get this field in the hashes'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of this hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields'\n            }\n         ];\n         return await this.redis.hincrbyAsync(reqx.keyspaceKey, req.params.field, req.params.increment);\n      });\n      this.addKeyspaceCommand({\n         key: 'hexists',\n         params: ['key', 'field']\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n         ];\n         const reply = await this.redis.hexistsAsync(reqx.keyspaceKey, req.params.field);\n         if (reply) {\n            reqx.hints.push({\n               uri: ['hget', reqx.key, req.params.field],\n               description: 'get the field in the hashes'\n            });\n         }\n         return reply;\n      });\n      this.addKeyspaceCommand({\n         key: 'hlen',\n         params: ['key']\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            },\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n         ];\n         return await this.redis.hlenAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hkeys',\n         params: ['key']\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hgetall', reqx.key],\n               description: 'get all the fields of your hashes key'\n            },\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n         ];\n         return await this.redis.hkeysAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hgetall',\n         params: ['key']\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['hlen', reqx.key],\n               description: 'get the number of fields in your hashes key'\n            },\n            {\n               uri: ['hkeys', reqx.key],\n               description: 'get the keys of the fields in your hashes'\n            }\n         ];\n         return await this.redis.hgetallAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'zcard',\n         params: ['key'],\n         description: 'get the cardinality of the zset'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrange', reqx.key, 0, 10]\n            }\n         ];\n         return await this.redis.zcardAsync(reqx.keyspaceKey);\n      });\n      if (this.config.redisVersion && this.config.redisVersion[0] >= 3) {\n         this.addKeyspaceCommand({\n            key: 'zaddnx',\n            params: ['key', 'score', 'member'],\n            access: 'add'\n         }, async (req, res, reqx) => {\n            reqx.hints = [\n               {\n                  uri: ['zrange', reqx.key, 0, 10]\n               },\n               {\n                  uri: ['zcard', reqx.key],\n               }\n            ];\n            return await this.redis.zaddAsync(reqx.keyspaceKey, 'NX', req.params.score, req.params.member);\n         });\n      }\n      this.addKeyspaceCommand({\n         key: 'zincrby',\n         params: ['key', 'increment', 'member'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['zcard', reqx.key],\n            }\n         ];\n         return await this.redis.zincrbyAsync(reqx.keyspaceKey, req.params.increment, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zadd',\n         params: ['key', 'score', 'member'],\n         access: 'add'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['zcard', reqx.key],\n            }\n         ];\n         return await this.redis.zaddAsync(reqx.keyspaceKey, req.params.score, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrem',\n         params: ['key', 'member'],\n         access: 'set'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['zcard', reqx.key],\n            }\n         ];\n         return await this.redis.zremAsync(reqx.keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrange',\n         params: ['key', 'start', 'stop'],\n         description: 'range items in the zset',\n         hintKeyParams: [0, 10]\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrevrange', reqx.key, 0, 10],\n            },\n            {\n               uri: ['zcard', reqx.key],\n            }\n         ];\n         return await this.redis.zrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrevrange',\n         params: ['key', 'start', 'stop'],\n         description: 'reverse range items in the zset'\n      }, async (req, res, reqx) => {\n         reqx.hints = [\n            {\n               uri: ['zrange', reqx.key, 0, 10]\n            },\n            {\n               uri: ['zcard', reqx.key]\n            }\n         ];\n         return await this.redis.zrevrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n   }\n\n   listCommands(context) {\n      return this.commands.filter(command => command.access !== 'redirect')\n      .filter(command => !context || command.context === context)\n      .map(command => [command.key, ...command.params].join(' '));\n   }\n\n   formatCommandUri(command) {\n      if (command.params.length) {\n         return [command.key, ... command.params.map(param => ':' + param)].join('/');\n      } else {\n         return command.key;\n      }\n   }\n\n   addPublicCommand(command, fn) {\n      let uri = command.key;\n      if (command.params) {\n         uri = [command.key, ... command.params.map(param => ':' + param)].join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), async (req, res) => {\n         try {\n            const match = req.path.match(/\\/:([^\\/]+)/);\n            if (match) {\n               throw {message: 'Invalid path: leading colon. Try substituting parameter: ' + match.pop()};\n            }\n            const result = await fn(req, res);\n            if (command.access === 'redirect') {\n            } else if (result !== undefined) {\n               await this.sendResult(command, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n      this.addCommand(command);\n   }\n\n   addPublicRoute(uri, fn) {\n      uri = [this.config.location, uri].join('/');\n      this.logger.debug('addPublicRoute', uri);\n      this.expressApp.get(uri, async (req, res) => {\n         try {\n            const result = await fn(req, res);\n            if (result !== undefined) {\n               await this.sendResult({}, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n   }\n\n   addRegisterRoutes() {\n      this.addPublicCommand({\n         key: 'register-ephemeral'\n      }, async (req, res) => {\n         req.params = {account: 'hub'};\n         return this.registerEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'register-ephemeral-named',\n         params: ['keyspace', 'access']\n      }, async (req, res) => {\n         req.params = {account: 'hub'};\n         return this.registerEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'register-ephemeral-access',\n         params: ['access']\n      }, async (req, res) => {\n         req.params.account = 'hub';\n         return this.registerEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'register-account-telegram',\n         params: ['account'],\n         description: 'register a new account linked to an authoritative Telegram.org account'\n      }, async (req, res) => {\n         return this.registerAccount(req, res);\n      });\n      this.addPublicCommand({\n         key: 'register-cert'\n      }, async (req, res) => {\n         const dn = req.get('ssl_client_s_dn');\n         const clientCert = req.get('ssl_client_cert');\n         if (!clientCert) throw {message: 'No client cert'};\n         if (!dn) throw {message: 'No client cert DN'};\n         const dns = this.parseDn(dn);\n         if (!dns.o) throw {message: 'No client cert O name'};\n         const [oMatching, account, domain] = dns.o.match(/^([\\-_a-z]+)@(.*)$/);\n         if (!oMatching) throw {message: 'Cert O name not matching \"account @ service domain\"'};\n         if (!domain.match(req.hostname)) throw {message: 'O domain not matching: ' + req.hostname};\n         return {account, domain};\n      });\n   }\n\n   parseDn(dn) {\n      const parts = {};\n      dn.split('/').filter(part => part.length)\n      .forEach(part => {\n         const [name, value] = part.split('=');\n         if (name && value) {\n            parts[name] = value;\n         } else {\n            this.logger.warn('parseDn', dn, part, name, value);\n         }\n      });\n      return parts;\n   }\n\n   addAccountRoutes() {\n      if (this.config.secureDomain) {\n         this.addAccountCommand({\n            key: 'grant-cert',\n            params: ['account', 'role', 'certId'],\n            defaultParams: {\n               group: 'admin'\n            },\n            access: 'admin'\n         }, async (req, res, {account, accountKey, time, clientCertDigest}) => {\n            const [cert] = await this.redis.multiExecAsync(multi => {\n               multi.hgetall(this.adminKey('cert', certId));\n            });\n            throw {message: 'Unimplemented'};\n         });\n      }\n   }\n\n   async registerAccount(req, res) {\n      try {\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         const {account} = req.params;\n         let v = this.validateRegisterAccount(account);\n         if (v) {\n            throw {message: v, account};\n         }\n         const dn = req.get('ssl_client_s_dn');\n         const clientCert = req.get('ssl_client_cert');\n         this.logger.info('registerAccount dn', dn);\n         if (!clientCert) {\n            throw {message: 'No client cert'};\n         }\n         const clientCertDigest = this.digestPem(clientCert);\n         const otpSecret = this.generateTokenKey();\n         const accountKey = this.adminKey('account', account);\n         const [hsetnx, saddAccount, saddCert] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', new Date().getTime());\n            multi.sadd(this.adminKey('accounts'), account);\n            multi.sadd(this.adminKey('account', account, 'topt'), otpSecret);\n            multi.sadd(this.adminKey('account', account, 'certs'), clientCertDigest);\n         });\n         if (!hsetnx) {\n            throw {message: 'Account exists'};\n         }\n         if (!saddAccount) {\n            this.logger.error('sadd account');\n         }\n         if (!saddCert) {\n            this.logger.error('sadd cert');\n         }\n         const result = this.buildQrReply({\n            otpSecret,\n            user: account,\n            host: this.config.hostname,\n            label: this.config.serviceLabel\n         });\n         await this.sendResult({}, req, res, {}, result);\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   async addAccountCommand(command, fn) {\n      let uri = [command.key];\n      if (command.params) {\n         uri = [command.key, ...command.params.map(param => ':' + param)];\n      }\n      this.expressApp.get([this.config.location, ...uri].join('/'), async (req, res) => {\n         try {\n            let message = this.validatePath(req);\n            if (message) throw {message};\n            const {account} = req.params;\n            const accountKey = this.adminKey('account', account);\n            const [[time], admined, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'admined');\n               multi.smembers(this.adminKey('account', account, 'certs'));\n            });\n            if (!admined) {\n               throw {message: 'Invalid account'};\n            }\n            if (lodash.isEmpty(certs)) {\n               throw {message: 'No certs'};\n            }\n            const duration = time - admined;\n            if (duration < this.config.adminLimit) {\n               return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n            }\n            this.validateCert(req, certs, account);\n            const dn = req.get('ssl_client_s_dn');\n            const result = await fn(req, res, {account, accountKey, time, admined, clientCertDigest});\n            if (result !== undefined) {\n               await this.sendResult({}, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n   }\n\n   generateTokenKey(length = 16) {\n      const Base32Symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n      return lodash.reduce(crypto.randomBytes(length), (result, value) => {\n         return result + Base32Symbols[Math.floor(value * Base32Symbols.length / 256)];\n      }, '');\n   }\n\n   formatTokenKey(tokenKey) {\n      return tokenKey.match(/.{1,4}/g).join(' ');\n   }\n\n   generateTokenCode(otpSecret, time) { // TODO test generating a TOTP token from secret\n      try {\n         time = Math.floor((time || (new Date().getTime())/1000)/30);\n         this.logger.info('base32', Object.keys(base32));\n         this.logger.info('speakeasy', Object.keys(speakeasy.totp));\n         this.logger.debug('otplib generateSecret', otp.utils.generateSecret());\n         this.logger.debug('otplib', otp.topt.generate(base32.decode(otpSecret), time));\n      } catch (err) {\n         this.logger.error('generateTokenCode', err);\n      }\n   }\n\n   buildQrReply(options) {\n      let {label, account, user, host, otpSecret, issuer} = options;\n      if (!otpSecret) {\n         otpSecret = this.generateTokenKey();\n      }\n      //this.logger.debug('code', this.generateTokenCode(otpSecret));\n      if (!issuer) {\n         issuer = label || host;\n      }\n      if (!account && user && host) {\n         account = `${user}@${host}`;\n      }\n      if (!account || !issuer) {\n         throw {message: 'Invalid'};\n      }\n      const uri = `${account}?secret=${otpSecret}&issuer=${issuer}`;\n      const otpauth = 'otpauth://totp/' + encodeURIComponent(uri);\n      const googleChartUrl = 'http://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=' + otpauth;\n      return {otpSecret, uri, otpauth, googleChartUrl};\n   }\n\n   validateRegisterTime() {\n      const time = new Date().getTime();\n      if (!this.registerTime) {\n         this.registerTime = time;\n      } else {\n         const duration = time - this.registerTime;\n         if (duration > 1000) {\n            this.registerTime = time;\n            this.registerCount = 0;\n         } else {\n            this.registerCount++;\n         }\n         if (this.registerCount > this.config.registerLimit) {\n            this.logger.error('registerCount');\n            return `Global register rate exceeed: ${this.config.registerLimit} per second`;\n         }\n      }\n      this.registerTime = time;\n   }\n\n   async registerEphemeral(req, res, previousError) {\n      let {account, keyspace, access} = req.params;\n      assert(account, 'account');\n      if (!keyspace) {\n         keyspace = this.generateTokenKey(12).toLowerCase();\n      } else {\n         const v = this.validateRegisterKeyspace(keyspace);\n         if (v) {\n            throw {message: v, keyspace};\n         }\n      }\n      if (!access) {\n      } else if (access === 'add') {\n         keyspace = '+' + keyspace;\n      } else if (access) {\n         this.sendError(req, res, {message: 'Access unimplemented: ' + access, hint: {\n            message: 'Try access: add',\n            description: 'Currently only \"add\" limited access is supported.'\n         }});\n      }\n      if (previousError) {\n         this.logger.warn('registerEphemeral retry');\n      }\n      try {\n         this.logger.debug('registerEphemeral');\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         let clientIp = req.get('x-forwarded-for');\n         const accountKey = this.accountKeyspace(account, keyspace);\n         this.logger.debug('registerEphemeral clientIp', clientIp, account, keyspace, accountKey);\n         const replies = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', new Date().getTime());\n            if (clientIp) {\n               multi.hsetnx(accountKey, 'clientIp', clientIp);\n               if (this.config.addClientIp) {\n                  multi.sadd(this.adminKey('keyspaces:ephemeral:ips'), clientIp);\n               }\n            }\n            //this.count(multi, 'keyspaces:ephemeral'); // TODO del old keyspaces:expire\n         });\n         if (!replies[0]) {\n            this.logger.error('keyspace clash', account, keyspace);\n            if (!previousError) {\n               return this.registerEphemeral(req, res, {message: 'keyspace clash'});\n            }\n            throw {message: 'Keyspace already exists'};\n         }\n         const replyPath = ['ak', account, keyspace].join('/');\n         this.logger.debug('registerEphemeral replyPath', replyPath);\n         if (this.isBrowser(req)) {\n            res.redirect(302, ['', replyPath, 'help'].join('/'));\n         } else {\n            return replyPath;\n         }\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   count(multi, key) {\n      multi.incr(this.adminKey(`metrics:${key}:count`));\n   }\n\n   validateImportTime() {\n      const time = new Date().getTime();\n      if (!this.importTime) {\n         this.importTime = time;\n      } else {\n         const duration = time - this.importTime;\n         if (duration > 1000) {\n            this.importTime = time;\n            this.importCount = 0;\n         } else {\n            this.importCount++;\n         }\n         if (this.importCount > this.config.importLimit) {\n            this.logger.error('importCount');\n            return `Global import rate exceeed: ${this.config.importLimit} per second`;\n         }\n      }\n      this.importTime = time;\n   }\n\n   addCommand(command) {\n      assert(command.key);\n      this.commands.push(command);\n      this.commandMap.set(command.key, command);\n   }\n\n   addKeyspaceCommand(command, fn) {\n      assert(command.key, 'command.key');\n      command.context = 'keyspace';\n      let uri = 'ak/:account/:keyspace';\n      command.params = command.params || [];\n      const key = command.key + command.params.length;\n      this.logger.debug('addKeyspaceCommand', command.key, key, uri);\n      this.addCommand(command);\n      const handler = this.createKeyspaceHandler(command, fn);\n      if (command.key === this.config.indexCommand) {\n         this.expressApp.get([this.config.location, uri].join('/'), handler);\n      }\n      uri += '/' + command.key;\n      if (command.params.length) {\n         assert(command.key !== this.config.indexCommand, 'indexCommand');\n         uri += '/' + command.params.map(param => ':' + param).join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), handler);\n      this.logger.debug('add', command.key, uri);\n   }\n\n   createKeyspaceHandler(command, fn) {\n      return async (req, res) => {\n         try {\n            const {account, keyspace, key, timeout} = req.params;\n            assert(account, 'account');\n            assert(keyspace, 'keyspace');\n            const accountKey = this.accountKeyspace(account, keyspace);\n            const helpPath = `/ak/${account}/${keyspace}/help`;\n            const reqx = {account, keyspace, accountKey, key, helpPath, command};\n            if (key) {\n               reqx.keyspaceKey = this.keyspaceKey(account, keyspace, key);\n            }\n            req.rquery = reqx;\n            let v;\n            //await this.migrateKeyspace(req.params);\n            v = this.validateAccount(account);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid account: ' + v);\n               return;\n            }\n            v = this.validateKeyspace(keyspace);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid keyspace: ' + v);\n               return;\n            }\n            v = this.validateKey(key);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid key: ' + v);\n               return;\n            }\n            if (timeout) {\n               if (!/^[0-9]$/.test(timeout)) {\n                  this.sendStatusMessage(req, res, 400, 'Invalid timeout: require range 1 to 9 seconds');\n                  return;\n               }\n            }\n            const isSecureAccount = !/^(pub|hub)$/.test(account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               if (isSecureAccount) {\n                  multi.smembers(this.adminKey('account', account, 'certs'));\n               }\n            });\n            Objects.kvs({time, registered, admined, accessed}).forEach(kv => {\n               reqx[kv.key] = parseInt(kv.value);\n            });\n            this.validateAccess(req, reqx, {certs});\n            let hostname;\n            if (req.hostname === this.config.hostname) {\n            } else if (lodash.endsWith(req.hostname, this.config.keyspaceHostname)) {\n               hostname = req.hostname.replace(/\\..*$/, '');\n               let hostHashes = await this.redis.hgetallAsync(this.adminKey('host', hostname));\n               if (!hostHashes) {\n                  throw new ValidationError(`Invalid hostname: ${hostname}`);\n               }\n               this.logger.debug('hostHashes', hostHashes);\n               if (!hostHashes.keyspaces) {\n                  throw new ValidationError(`Invalid hostname: ${hostname}`);\n               }\n               if (!lodash.includes(hostHashes.keyspaces, keyspace)) {\n                  throw new ValidationError(`Invalid keyspace: ${keyspace}`);\n               }\n            }\n            if (!keyspace) {\n               throw new ValidationError('Missing keyspace: ' + req.path);\n            }\n            if (timeout) {\n               if (timeout < 1 || timeout > 10) {\n                  throw new ValidationError('Timeout must range from 1 to 10 seconds: ' + timeout);\n               }\n            }\n            const multi = this.redis.multi();\n            multi.sadd(this.adminKey('keyspaces'), keyspace);\n            multi.hset(accountKey, 'accessed', time);\n            if (command && command.access === 'admin') {\n               multi.hset(accountKey, 'admined', time);\n            }\n            const result = await fn(req, res, reqx, multi);\n            if (result !== undefined) {\n               await this.sendResult(command, req, res, reqx, result);\n            }\n            if (key) {\n               assert(reqx.keyspaceKey);\n               const expire = this.getKeyExpire(account);\n               multi.expire(reqx.keyspaceKey, expire);\n               this.logger.debug('expire', reqx.keyspaceKey, expire);\n            }\n            const [...expire] = await multi.execAsync();\n            if (!expire) {\n               throw new ApplicationError('expire: ' + reqx.keyspaceKey);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      };\n   }\n\n   getKeyExpire(account) {\n      if (account === 'hub') {\n         return this.config.ephemeralKeyExpire;\n      } else {\n         return this.config.keyExpire;\n      }\n   }\n\n   async migrateKeyspace({account, keyspace}) {\n      const accountKey = this.accountKeyspace(account, keyspace);\n      const [accessToken, token] = await this.redis.multiExecAsync(multi => {\n         multi.hget(accountKey, 'accessToken');\n         multi.hget(accountKey, 'token');\n      });\n      if (!token && accessToken) {\n         const [hsetnx, hdel] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'token', accessToken);\n            multi.hdel(accountKey, 'accessToken');\n         });\n         if (!hsetnx) {\n            throw new Error('Migrate keyspace hset failed');\n         } else if (!hdel) {\n            throw new Error('Migrate keyspace hdel failed');\n         }\n      }\n   }\n\n   validateRegisterAccount(account) {\n      if (lodash.isEmpty(account)) {\n         return 'Invalid account (empty)';\n      } else if (['hub', 'pub', 'public'].includes(account)) {\n         return 'Invalid account (reserved name)';\n      } else if (!/^[\\-_a-z0-9]+$/.test(account)) {\n         return 'Account name is invalid. Try only lowercase/numeric with dash/underscore.';\n      }\n   }\n\n   validatePath(req) {\n      const match = req.path.match(/\\/:([^\\/]+)/);\n      if (match) {\n         return 'Invalid path: leading colon. Try substituting parameter: ' + match.pop();\n      }\n   }\n\n   validateRegisterKeyspace(keyspace) {\n      if (/~/.test(keyspace)) {\n         return 'contains tilde';\n      }\n   }\n\n   validateAccount(account) {\n      if (/^:/.test(account)) {\n         return 'leading colon';\n      }\n   }\n\n   validateKeyspace(keyspace) {\n      if (/^:/.test(keyspace)) {\n         return 'leading colon';\n      }\n      if (/::/.test(keyspace)) {\n         return 'double colon';\n      }\n      if (/:$/.test(keyspace)) {\n         return 'trailing colon';\n      }\n   }\n\n   validateKey(key) {\n      if (/^:/.test(key)) {\n         return 'leading colon';\n      }\n   }\n\n   isReadCommand(command) {\n      if (!command) {\n         return false;\n      } else if (!command.access) {\n         return true;\n      } else if (command.access === 'debug') {\n         return true;\n      }\n      return false;\n   }\n\n   validateAccess(req, reqx, {certs}) {\n      const {command, account, keyspace, time} = reqx;\n      const scheme = req.get('X-Forwarded-Proto');\n      this.logger.debug('validateAccess scheme', scheme, account, keyspace, command);\n      if (this.isSecureDomain(req)) {\n         if (scheme === 'http') {\n            throw {message: `Insecure scheme ${scheme}: ${req.hostname}`};\n         }\n      }\n      if (command.key === 'register-keyspace') {\n         if (reqx.registered) {\n            throw {message: 'Already registered'};\n         }\n      } else if (!reqx.registered) {\n         if (account === 'hub' || account === 'pub') {\n            throw {message: 'Expired (or unregistered) keyspace', hint: {\n               uri: 'register-ephemeral',\n               description: 'To register a new ephemeral keyspace'\n            }};\n         } else {\n            throw {message: 'Unregistered keyspace', hint: {\n               uri: 'register-ephemeral',\n               description: 'To register a new ephemeral keyspace'\n            }};\n         }\n      }\n      if (command.access) {\n         if (command.access === 'admin') {\n            if (!reqx.admined) {\n               this.logger.warn('validateAccess admined', keyspace, command.key, time);\n            } else {\n               const duration = time - reqx.admined;\n               if (duration < this.config.adminLimit) {\n                  throw {message: `Admin command interval not elapsed: ${this.config.adminLimit}s`};\n               }\n            }\n         } else if (command.access === 'debug') {\n         } else if (command.access === 'add') {\n            if (!/^[a-z]/.test(keyspace)) {\n               return;\n            }\n         } else if (command.access === 'set') {\n            if (/^\\+/.test(keyspace)) {\n               throw {message: 'Append-only keyspace'};\n            }\n         } else if (command.access === 'get') {\n         } else {\n         }\n      }\n      if (account !== 'hub' && account !== 'pub') {\n         this.validateCert(req, certs, account);\n      }\n   }\n\n   validateCert(req, certs, account) {\n      if (this.config.disableValidateCert) {\n         return;\n      }\n      if (!certs) {\n         throw {message: 'No enrolled certs', hint: {\n            commandKey: ['register-account-telegram']\n         }};\n      }\n      const clientCert = req.get('ssl_client_cert');\n      if (!clientCert) {\n         throw {message: 'No client cert sent', hint: {\n            commandKey: ['register-account-telegram']\n         }};\n      }\n      const clientCertDigest = this.digestPem(clientCert);\n      this.logger.info('validateCert', clientCertDigest, account);\n      if (!certs.includes(clientCertDigest)) {\n         throw {message: 'Invalid cert', hint: {\n            accountKey: ['register-account-telegram']\n         }};\n      }\n   }\n\n   keyIndex(account, keyspace) {\n      return [this.config.redisKeyspace, account, keyspace].reduce((previousValue, currentValue) => {\n         return previousValue + currentValue.length\n      }, 3);\n   }\n\n   accountKey(account) {\n      return this.adminKey('account', account);\n   }\n\n   accountKeyspace(account, keyspace) {\n      return [this.config.redisKeyspace, 'ak', account, keyspace].join(':');\n   }\n\n   keyspaceKey(account, keyspace, key) {\n      return [this.config.redisKeyspace, account, keyspace, key].join('~');\n   }\n\n   adminKey(...parts) {\n      return [this.config.redisKeyspace, ...parts].join(':');\n   }\n\n   async sendResult(command, req, res, reqx, result) {\n      const userAgent = req.get('User-Agent');\n      const uaMatch = userAgent.match(/\\s([A-Z][a-z]*\\/[\\.0-9]+)\\s/);\n      this.logger.debug('sendResult ua', !uaMatch? userAgent: uaMatch[1]);\n      command = command || {};\n      const mobile = this.isMobile(req);\n      this.logger.debug('sendResult mobile', mobile, command.key);\n      if (this.isDevelopment(req)) {\n         this.logger.debug('sendResult command', command.key, req.params, lodash.isArray(result));\n      } else {\n      }\n      if (command.sendResult) {\n         if (lodash.isFunction(command.sendResult)) {\n            const otherResult = await command.sendResult(req, res, reqx, result);\n            if (otherResult === undefined) {\n               return;\n            } else {\n               result = otherResult;\n            }\n         } else {\n            throw {message: 'command.sendResult type: ' + typeof command.sendResult};\n         }\n      }\n      let resultString = '';\n      if (!Values.isDefined(result)) {\n         this.logger.error('sendResult none');\n      } else if (Values.isDefined(req.query.json) || (command.format === 'json' && !mobile)) {\n         res.json(result);\n         return;\n      } else if (Values.isDefined(req.query.quiet)) {\n      } else if (this.config.defaultFormat === 'cli' || Values.isDefined(req.query.line)\n      || this.isCliDomain(req) || command.format === 'cli') {\n         res.set('Content-Type', 'text/plain');\n         if (lodash.isArray(result)) {\n            if (mobile) {\n            } else {\n               resultString = result.join('\\n');\n            }\n         } else if (lodash.isObject(result)) {\n            if (command.resultObjectType === 'KeyedArrays') {\n               resultString = lodash.flatten(Object.keys(result).map(key => {\n                  let value = result[key];\n                  if (lodash.isArray(value)) {\n                     return ['', key + ':', ...value];\n                  } else if (typeof value === 'string') {\n                     if (key === 'message') {\n                        return value;\n                     } else {\n                        return key + ': ' + value;\n                     }\n                  } else {\n                     return ['', key + ':', 'type:' + typeof value];\n                  }\n               })).join('\\n');\n            } else {\n               resultString = Object.keys(result).map(key => {\n                  let value = result[key];\n                  if (parseInt(value) === value) {\n                     value = parseInt(value);\n                  } else {\n                     value = `'${value}'`;\n                  }\n                  return [key, value].join('=');\n               }).join('\\n');\n            }\n         } else if (result === null) {\n         } else {\n            resultString = result.toString();\n         }\n      } else if (this.config.defaultFormat === 'plain' || Values.isDefined(req.query.plain)\n      || command.format === 'plain') {\n         res.set('Content-Type', 'text/plain');\n         resultString = result.toString();\n      } else if (this.config.defaultFormat === 'json' && !mobile) {\n         res.json(result);\n         return;\n      } else if (this.config.defaultFormat === 'html' || Values.isDefined(req.query.html)\n      || command.format === 'html' || this.isHtmlDomain(req) || mobile) {\n         return this.sendHtmlResult(command, req, res, reqx, result);\n      } else {\n         this.sendError(req, res, {message: `Invalid default format: ${this.config.defaultFormat}`});\n         return;\n      }\n      res.send(resultString + '\\n');\n   }\n\n   sendHtmlResult(command, req, res, reqx, result) {\n      let title = this.config.serviceLabel;\n      let heading, icon;\n      if (reqx.account && reqx.keyspace) {\n         const keyspaceLabel = KeyspaceHelp.obscureKeyspaceLabel(reqx);\n         title = `${reqx.account}/${keyspaceLabel}`;\n         heading = [Hc.b(reqx.account), Hs.tt(styles.header.keyspace, keyspaceLabel)].join(''),\n         icon = 'database';\n      }\n      let resultString = '';\n      let resultArray = [];\n      if (result === null) {\n      } else if (lodash.isString(result)) {\n         resultString = result;\n      } else if (lodash.isArray(result)) {\n         resultArray = result;\n      } else if (lodash.isObject(result)) {\n         resultArray = Object.keys(result).map(key => `<b>${key}</b> ${result[key]}`);\n      } else if (result) {\n         resultString = result.toString();\n      }\n      res.set('Content-Type', 'text/html');\n      const content = [];\n      this.logger.debug('sendResult reqx', reqx, command, resultString, resultArray.length);\n      if (command.key) {\n         content.push(Hso.div(styles.result.commandKey, command.key.replace(/-/g, ' ')));\n      }\n      if (reqx.key) {\n         //title = reqx.key;\n         content.push(Hso.div(styles.result.reqKey, reqx.key));\n      }\n      if (command.params) {\n         content.push(Hso.pre(styles.result.commandParams, command.params\n            .filter(key => key !== 'key')\n            .map(key => `<b>${key}</b> ${req.params[key]}`)\n            .join('\\n'))\n         );\n         this.logger.info('params', lodash.last(content));\n      }\n      let statusCode = 200;\n      let emptyMessage;\n      if (resultArray.length) {\n         if (resultString) {\n            this.logger.error('sendResult resultString', command, req.path);\n         }\n      } else if (!resultString) {\n         //statusCode = 404;\n         resultString = '<i>&lt;empty&gt;</i>';\n      }\n      if (resultString) {\n         resultArray.push(resultString);\n      }\n      content.push(Hs.pre(styles.result.resultArray, lodash.compact(resultArray).join('\\n')));\n      let hints = [];\n      if (reqx) {\n         if (reqx.hint) {\n            hints.push(reqx.hint);\n         }\n         if (reqx.hints) {\n            hints = hints.concat(reqx.hints);\n         }\n      }\n      if (hints.length && reqx.account && reqx.keyspace) {\n         const otherHints = hints.filter(hint => !hint.uri && hint.commandKey)\n         hints = hints\n         .filter(hint => hint.uri && hint.uri[0] !== 'help');\n         hints.push({\n            uri: ['help'],\n            description: 'view sample keyspace commands, or click on the header'\n         });\n         const renderedPathHints = hints\n         .map(hint => {\n            if (hint.uri && hint.uri.length) {\n               if (!hint.description) {\n                  const commandKey = hint.uri[0];\n                  const command = this.commandMap.get(commandKey);\n                  this.logger.debug('hint command description', commandKey, command);\n                  if (command && command.description) {\n                     hint = Object.assign({description: command.description}, hint);\n                  }\n               }\n               const path = HtmlElements.renderPath(['ak', reqx.account, reqx.keyspace, ...hint.uri].join('/'));\n               hint = Object.assign({path}, hint);\n               return hint;\n            }\n            return hint;\n         })\n         .map(hint => {\n            const uriLabel = [Hc.b(hint.uri[0]), ...hint.uri.slice(1)].join('/');\n            this.logger.debug('hint', uriLabel, hint);\n            return He.div({\n               style: styles.result.hint.container,\n               onClick: HtmlElements.onClick(hint.path)\n            }, [\n               Hso.div(styles.result.hint.message, hint.message),\n               Hso.div(styles.result.hint.link, `Try: ` + Hs.tt(styles.result.hint.uri, uriLabel)),\n               Hso.div(styles.result.hint.description, hint.description)\n            ]);\n         });\n         this.logger.debug('renderedPathHints', renderedPathHints);\n         content.push(renderedPathHints);\n         const renderedOtherHints = otherHints.map(hint => He.div({\n            style: styles.result.hint.container\n         }, [\n            Hso.div(styles.result.hint.message, hint.message),\n            Hso.div(styles.result.hint.link, `Try: ` + Hs.tt(styles.result.hint.uri, Hc.b(hint.commandKey))),\n            Hso.div(styles.result.hint.description, hint.description)\n         ]));\n         content.push(renderedOtherHints);\n      }\n      res.status(statusCode).send(renderPage({\n         config: this.config, req, reqx, title, heading, icon, content\n      }));\n   }\n\n   isDevelopment(req) {\n      return req.hostname === 'localhost' && process.env.NODE_ENV === 'development';\n   }\n\n   isSecureDomain(req) {\n      if (this.config.secureDomain) {\n         return true;\n      }\n      if (/^(secure|cli)\\./.test(req.hostname)) {\n         this.logger.warn('isSecureDomain', req.hostname);\n         return true;\n      }\n      return false;\n   }\n\n   isMobile(req) {\n      return /(Mobile|iPhone)/.test(req.get('User-Agent'));\n   }\n\n   isBrowser(req) {\n      return !/^curl\\//.test(req.get('User-Agent'));\n   }\n\n   isHtmlDomain(req) {\n      return /^web/.test(req.hostname);\n   }\n\n   isJsonDomain(req) {\n      return /^json/.test(req.hostname);\n   }\n\n   isCliDomain(req) {\n      return /^cli/.test(req.hostname) || !this.isBrowser(req) || this.config.cliDomain;\n   }\n\n   sendError(req, res, err) {\n      this.logger.warn(err);\n      if (err.context) {\n         this.logger.warn(err.context);\n      }\n      try {\n         this.sendStatusMessage(req, res, 500, err);\n      } catch (error) {\n         this.logger.error(error);\n      }\n   }\n\n   sendCommandError(command, req, res, reqx, err) {\n      this.logger.warn(err);\n      try {\n         this.sendStatusMessage(req, res, 500, err);\n      } catch (error) {\n         this.logger.error(error);\n      }\n   }\n\n   sendStatusMessage(req, res, statusCode, err) {\n      const reqx = req.rquery || {};\n      const command = reqx.command || {};\n      this.logger.warn('status', req.path, statusCode, typeof err, err);\n      let messageLines = [];\n      if (!err) {\n         this.logger.error('sendStatusMessage empty');\n         err = 'empty error message';\n      }\n      let title = req.path;\n      let hints = [];\n      if (lodash.isString(err)) {\n         title = err;\n      } else if (lodash.isArray(err)) {\n         messageLines = messageLines.concat(err);\n      } else if (typeof err === 'object') {\n         if (err.message) {\n            title = err.message;\n         }\n         if (err.hint) {\n            hints.push(err.hint);\n         }\n         if (err.hints) {\n            hints = hints.concat(err.hints);\n         }\n         hints = hints.map(hint => {\n            let url;\n            if (this.isBrowser(req)) {\n               url = `/${hint.uri}`;\n            } else if (/localhost/.test(req.hostname)) {\n               url = `http://localhost:8765/${hint.uri}`;\n            } else {\n               url = `https://${req.hostname}/${hint.uri}`;\n            }\n            if (this.isBrowser(req)) {\n               url = `Try <a href=\"${url}\"><tt>${url}</tt></a>`;\n            }\n            return Object.assign({url}, hint);\n         });\n         if (err.stack) {\n            messageLines.push(err.stack.split('\\n').slice(0, 5));\n         }\n      } else {\n         this.logger.error('sendStatusMessage type', typeof err, err);\n         err = 'unexpected error type: ' + typeof err;\n         messageLines.push(Object.keys(err).join(' '));\n      }\n      const heading = [Hc.b('Status'), Hc.tt(statusCode)].join(' ');\n      if (this.isBrowser(req)) {\n         this.logger.debug('hints', hints);\n         res.set('Content-Type', 'text/html');\n         res.status(statusCode).send(renderPage({\n            config: this.config,\n            req, reqx, title, heading,\n            content: [\n               //Hs.div(styles.error.status, `Status ${statusCode}`),\n               Hs.div(styles.error.message, title),\n               Hs.pre(styles.error.detail, lodash.flatten(messageLines).join('\\n')),\n               hints.map(hint => He.div(styles.error.hint, [\n                  Hso.div(styles.error.hintMessage, hint.message),\n                  Hso.div(styles.error.hintUrl, hint.url),\n                  Hso.div(styles.error.hintDescription, hint.description)\n               ])),\n            ]\n         }));\n      } else {\n         this.logger.warn('status lines', req.path, statusCode, typeof err, Object.keys(err), messageLines.length);\n         // TODO hints\n         res.status(statusCode).send(lodash.flatten([title, ...messageLines]).join('\\n') + '\\n');\n      }\n   }\n\n   digestPem(pem) {\n      const lines = pem.split(/[\\n\\t]/);\n      if (lines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      if (!/^-+BEGIN CERTIFICATE/.test(lines[0])) {\n         throw new ValidationError('Invalid first line');\n      }\n      const contentLines = lines.filter(line => {\n         return line.length > 16 && /^[\\w\\/\\+]+$/.test(line);\n      });\n      if (contentLines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      const sha1 = crypto.createHash('sha1');\n      contentLines.forEach(line => sha1.update(new Buffer(line)));\n      const digest = sha1.digest('hex');\n      if (digest.length < 32) {\n         throw new ValidationError('Invalid cert length');\n      }\n      return digest;\n   }\n\n   async end() {\n      this.logger.info('end');\n      if (redis) {\n         await this.redis.quitAsync();\n      }\n      if (this.expressServer) {\n         this.expressServer.close();\n      }\n   }\n}\n"]}