{"version":3,"sources":["../rquery/rquery.js"],"names":[],"mappings":"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","file":"rquery.js","sourcesContent":["\nimport expressLib from 'express';\nimport brucedown from 'brucedown';\nimport marked from 'marked';\nimport crypto from 'crypto';\nimport CSON from 'season';\nimport base32 from 'thirty-two';\nimport speakeasy from 'speakeasy';\nimport otp from 'otplib/lib/totp';\nimport concatStream from 'concat-stream';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport {handleCertScript, handleCertScriptHelp} from './handlers/certScript';\nimport {default as renderPage} from './html/Page';\nimport * as KeyspaceHelp from './html/KeyspaceHelp';\n\nimport * as Result from './handlers/Result';\n\nimport KeyspaceHelpPage from './jsx/KeyspaceHelpPage';\n\nimport styles from './html/styles';\n\nconst AccessKeys = ['open', 'private', 'add'];\n\nconst logger = Loggers.create(module.filename);\n\nexport default class rquery {\n\n   async testExit() {\n      return false;\n   }\n\n   async init() {\n      this.commandMap = new Map();\n      this.logger.info('init', this.config.redisUrl);\n      if (await this.testExit()) process.exit(1);\n      this.hints = {\n         signup: {\n            message: `Try \"@${this.config.adminBotName} /signup\" on https://web.telegram.org`,\n            url: `https://telegram.me/${this.config.adminBotName}?start`\n         },\n         grantCert: {\n            message: `Try \"@${this.config.adminBotName} /grantcert certId\" e.g. via https://web.telegram.org`,\n            url: `https://telegram.me/${this.config.adminBotName}?start`\n         },\n         registerCert: {\n            message: `Try <tt>/register-cert</tt>`,\n            url: '/register-cert'\n         },\n         routes: {\n            message: 'Try <tt>/routes</tt>',\n            url: '/routes'\n         },\n         createEphemeral: {\n            uri: 'create-ephemeral',\n            description: 'Create a new ephemeral keyspace'\n         }\n      };\n      this.redis = redisLib.createClient(this.config.redisUrl);\n      this.expressApp = expressLib();\n   }\n\n   async start() {\n      assert(global.rquery.config === this.config, 'global config');\n      this.expressApp.use((req, res, next) => {\n         const scheme = req.get('X-Forwarded-Proto');\n         if (this.config.serviceKey === 'development') {\n            next();\n         } else if (scheme !== 'https') {\n            const redirectUrl = `https://${req.hostname}${req.url}`;\n            this.logger.debug('redirect scheme', scheme, redirectUrl);\n            res.redirect(302, redirectUrl);\n         } else {\n            next();\n         }\n      });\n      this.expressApp.use((req, res, next) => {\n         req.pipe(concatStream(content => {\n            req.body = content;\n            next();\n         }));\n      });\n      this.addMonitoringRoutes();\n      this.addRoutes();\n      if (this.config.disableTelegramHook) {\n         this.logger.warn('telegram webhook disabled');\n      } else {\n         this.addTelegramWebhook();\n      }\n      this.expressApp.use(async (req, res, next) => {\n         try {\n            await this.handlePublish(req, res, next);\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n      this.expressApp.use((req, res) => {\n         try {\n            this.sendErrorRoute(req, res);\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n      this.expressApp.use((req, res) => this.sendErrorRoute(req, res));\n      this.expressServer = await Express.listen(this.expressApp, this.config.port);\n      this.logger.info('listen', this.config.port, this.config.redisUrl);\n   }\n\n   async handlePublish(req, res, next) {\n      const parts = req.url.slice(1).split('/');\n      const reqx = {};\n      if (parts.length == 4) {\n         const [account, keyspace, commandKey, key] = parts;\n         if (!['get', 'smembers'].includes(commandKey)) {\n            return next();\n         }\n         Object.assign(reqx, {account, keyspace, commandKey, key});\n      } else if (parts.length == 3) {\n         const [account, keyspace, key] = parts;\n         Object.assign(reqx, {account, keyspace, key});\n      } else {\n         return next();\n      }\n      this.logger.debug('publish', req.url, reqx);\n      const accountKeyspace = this.accountKeyspace(reqx.account, reqx.keyspace);\n      const keyspaceKey = this.keyspaceKey(reqx.account, reqx.keyspace, reqx.key);\n      const accountKey = this.adminKey('account', reqx.account);\n      this.logger.debug('publish', req.url, reqx);\n      let [access, type, result] = await this.redis.multiExecAsync(multi => {\n         multi.hget(accountKeyspace, 'access');\n         multi.type(keyspaceKey);\n         if (reqx.commandKey === 'get') {\n            multi.get(keyspaceKey);\n         } else if (reqx.commandKey === 'smembers') {\n            multi.smembers(keyspaceKey);\n         } else {\n            throw new ValidationError('Unsupported: ' + commandKey);\n         }\n      });\n      if (!reqx.commandKey) {\n         if (type === 'set') {\n            result = this.redis.smembersAsync(keyspaceKey);\n         } else if (type === 'string') {\n            result = this.redis.getAsync(keyspaceKey);\n         } else if (type === 'list') {\n            result = this.redis.lrangeAsync(keyspaceKey, 0, this.config.lrangeStop); // TODO\n         } else {\n            throw new ValidationError('Unsupported publish key type: ' + type);\n         }\n      }\n      if (access !== 'open') {\n         this.logger.debug('access', access, type, typeof result);\n         throw new ValidationError({status: 403, message: 'Access Prohibited e.g. unpublished keyspace'});\n      }\n      reqx.published = true;\n      await Result.sendResult(command, req, res, reqx, result);\n   }\n\n   addMonitoringRoutes() { // TODO\n   }\n\n   sendErrorRoute(req, res) {\n      try {\n         if (/^\\/favicon.ico$/.test(req.path)) {\n            res.status(404).send(`Invalid path: ${req.path}\\n`);\n            return;\n         }\n         const [matching, account, keyspace] = req.path.match(/^\\/ak\\/([^\\/]+)\\/([^\\/]+)\\//) || [];\n         this.logger.debug('sendErrorRoute', req.path, account, keyspace, this.isBrowser(req));\n         if (this.isBrowser(req)) {\n            let redirectPath = '/routes';\n            if (account && keyspace) {\n               redirectPath = ['/ak', account, keyspace, 'help'].join('/');\n            }\n            res.redirect(302, redirectPath);\n         } else {\n            res.status(404).send(`Invalid: ${req.path}. Try /routes or /help.\\n`);\n         }\n      } catch (err) {\n         this.logger.warn(err);\n         throw err;\n      }\n   }\n\n   addSecureDomain() {\n   }\n\n   addTelegramWebhook() {\n      if (!this.config.botSecret) {\n         this.logger.error('addTelegramWebhook botSecret');\n      } else {\n         this.expressApp.post('/webhook-telegram/*', async (req, res) => {\n            try {\n               this.logger.debug('webhook auth', req.params[0].substring(0, 4));\n               if (req.params[0] !== this.config.botSecret) {\n                  throw {message: 'Invalid telegram webhook'};\n               }\n               const body = req.body.toString('utf8');\n               this.logger.debug('body', body);\n               if (!/^[\"{\\[]/.test(body)) {\n                  throw {message: 'body not JSON', body};\n               } else {\n                  await this.handleTelegram(req, res, JSON.parse(body));\n                  res.send('');\n               }\n            } catch (err) {\n               this.logger.error(err);\n               res.status(500).send(`Internal error: ${err.message}\\n`);\n            }\n         });\n      }\n   }\n\n   async handleTelegram(req, res, telegram) {\n      const cert = this.getClientCert(req);\n      if (!cert) {\n         //throw {message: 'No client cert'};\n      } else {\n         this.logger.debug('telegram cert', cert.split('\\n')[0]);\n         const dn = this.parseCertDn(req);\n         this.logger.debug('telegram', telegram, dn);\n      }\n      const message = {};\n      let content;\n      if (telegram.message) {\n         message.type = 'message';\n         content = telegram.message;\n         if (!content.text) {\n         } else {\n            message.text = content.text;\n         }\n      } else if (telegram.inline_query) {\n         message.type = 'query';\n         content = telegram.inline_query;\n         if (!content.query) {\n         } else {\n            message.text = content.query;\n         }\n      } else {\n         this.logger.warn('telegram', telegram);\n         return;\n      }\n      if (!content.chat) {\n      } else if (!content.chat.id) {\n      } else {\n         message.chatId = content.chat.id;\n      }\n      this.logger.debug('telegram tcm', JSON.stringify({telegram, content, message}, null, 2));\n      if (!content.from) {\n         this.logger.warn('telegram tcm', {telegram, content, message});\n      } else {\n         message.fromId = content.from.id;\n         if (content.from.username) {\n            message.username = content.from.username;\n         }\n         message.greetName = content.from.username;\n         if (content.from.first_name) {\n            message.greetName = content.from.first_name;\n         } else if (content.from.first_name && content.from.last_name) {\n            message.greetName = [content.from.first_name, content.from.last_name].join(' ');\n         }\n         if (!message.username) {\n            await this.sendTelegram(message.chatId, 'html', [\n               `You must set your Telegram username under Settings via the top hamburger menu.`,\n               `We use this for your ${this.config.serviceLabel} account name.`,\n            ]);\n         } else if (/\\/verify/.test(content.text)) {\n            message.action = 'verify';\n            await this.handleTelegramVerify(message);\n         } else if (/\\/grant/.test(content.text)) {\n            message.action = 'grant';\n            await this.handleTelegramGrant(message);\n         } else if (/\\/signup/.test(content.text)) {\n            message.action = 'signup';\n            await this.handleTelegramSignup(message);\n         } else {\n            await this.sendTelegram(message.chatId, 'html', [\n               `Commands: <code>/signup /verifyme /grantcert</code>`\n            ]);\n         }\n      }\n      this.logger.info('telegram message', message, telegram);\n   }\n\n   async handleTelegramSignup(request) {\n      const now = new Date().getTime();\n      this.logger.info('handleTelegramSignup', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [sadd, verified, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sadd(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      if (!secret) {\n         secret = this.generateTokenKey();\n      }\n      if (sadd || !verified) {\n         const [hmset] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(userKey, 'verified', now);\n            multi.hsetnx(userKey, 'id', request.fromId);\n            multi.hsetnx(userKey, 'secret', secret);\n         });\n         await this.sendTelegram(request.chatId, 'html', [\n            `Thanks, ${request.greetName}.`,\n            `Your identity as is now verified to <b>${this.config.serviceLabel}</b>`,\n            `as <tt>telegram.me/${request.username}.</tt>`\n         ]);\n      }\n      const account = request.username;\n      await this.sendTelegram(request.chatId, 'html', [\n         `Thanks, ${request.greetName}.`,\n         `Your ${this.config.serviceLabel} account name is <b>${account}</b>, as per your Telegram user.`,\n         `Use the following script create a client cert:`,\n         `${this.config.openHostname}/cert-script/${account}.`,\n         `We recommend you review, and read ${this.config.openHostname}/docs/register-cert.md.`,\n      ]);\n   }\n\n   async handleTelegramVerify(request) {\n      const now = Seconds.now();\n      this.logger.info('handleTelegramVerify', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [sadd, verifiedString, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sadd(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      if (!secret) {\n         secret = this.generateTokenKey();\n      }\n      if (sadd || !verifiedString) {\n         const [hmset] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(userKey, 'verified', now);\n            multi.hsetnx(userKey, 'id', request.fromId);\n            multi.hsetnx(userKey, 'secret', secret);\n         });\n         await this.sendTelegram(request.chatId, 'html', [\n            `Thanks, ${request.greetName}.`,\n            `Your identity as is now verified to <b>${this.config.serviceLabel}</b>`,\n            `as <code>telegram.me/${request.username}.</code>`\n         ]);\n      } else {\n         let verifiedTime = parseInt(verifiedString);\n         if (verifiedTime > now) {\n            verifiedTime = Math.ceil(verifiedTime/1000);\n         }\n         const duration = now - verifiedTime;\n         await this.sendTelegram(request.chatId, 'html', [\n            `Hi ${request.greetName}.`,\n            `Your identity as was already verified`,\n            `${Millis.formatVerboseDuration(duration)} ago`,\n            `as <code>@${request.username}</code>`\n         ]);\n      }\n   }\n\n   async handleTelegramGrant(request) {\n      const now = Millis.now();\n      this.logger.info('handleTelegramGrant', request);\n      const match = request.text.match(/\\/grantcert (\\w+)$/);\n      if (!match) {\n         await this.sendTelegram(request.chatId, 'html', [\n            `Try <code>/grantcert &lt;digest&gt;</code>`,\n            `where the <code>digest</code> is returned by ${this.config.secureHostname}/register-cert`,\n            `performed with the cert to be enrolled.`,\n            `Read ${this.config.openHostname}/docs/register-cert.md for further info.`,\n            `Use the following link to create a client cert:`,\n            `${this.config.openHostname}/cert-script/${request.username}?id=${request.username}`,\n         ]);\n         return;\n      }\n      const cert = match[1];\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      const grantKey = this.adminKey('telegram', 'user', request.username, 'grantcert');\n      this.logger.info('handleTelegramGrant', userKey, grantKey, request, cert);\n      let [ismember, verified, secret, exists] = await this.redis.multiExecAsync(multi => {\n         multi.sismember(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n         multi.exists(grantKey);\n      });\n      let [setex] = await this.redis.multiExecAsync(multi => {\n         this.logger.info('handleTelegramGrant setex', grantKey, cert, this.config.enrollExpire);\n         multi.setex(grantKey, this.config.enrollExpire, cert);\n      });\n      if (setex) {\n         await this.sendTelegramReply(request, 'html', [\n            `You have approved enrollment of the cert <b>${cert}</b>.`,\n            `That identity can now enroll via ${this.config.secureHostname}/register-cert.`,\n            `This must be done in the next ${Millis.formatVerboseDuration(1000*this.config.enrollExpire)}`,\n            `otherwise you need to repeat this request, after it expires.`,\n            `See ${this.config.openHostname}/docs/register-cert.md for further info.`,\n         ]);\n      } else {\n         await this.sendTelegramReply(request, 'html', [\n            `Apologies, the 'setex' command reply was <tt>${setex}</tt>`,\n         ]);\n      }\n   }\n\n   async sendTelegramReply(request, format, ...content) {\n      if (request.chatId && request.greetName) {\n         await this.sendTelegram(request.chatId, format,\n            `Thanks, ${request.greetName}.`,\n            ...content\n         );\n      } else {\n         this.logger.error('sendTelegramReply', request);\n      }\n   }\n\n   async sendTelegramAlert(account, format, ...context) {\n      await this.sendTelegram(account, format, ...context);\n   }\n\n   async sendTelegram(chatId, format, ...content) {\n      this.logger.debug('sendTelegram', chatId, format, content);\n      try {\n         const text = lodash.trim(lodash.flatten(content).join(' '));\n         assert(chatId, 'chatId');\n         let uri = `sendMessage?chat_id=${chatId}`;\n         uri += '&disable_notification=true';\n         if (format === 'markdown') {\n            uri += `&parse_mode=Markdown`;\n         } else if (format === 'html') {\n            uri += `&parse_mode=HTML`;\n         }\n         uri += `&text=${encodeURIComponent(text)}`;\n         const url = [this.config.botUrl, uri].join('/');\n         this.logger.info('sendTelegram url', url, chatId, format, text);\n         const response = await Requests.request({url});\n         if (response.statusCode !== 200) {\n            this.logger.warn('sendTelegram', chatId, url);\n         }\n      } catch (err) {\n         this.logger.error(err);\n      }\n   }\n\n   addRoutes() {\n      this.addPublicCommand(require('./handlers/routes'));\n      this.addPublicCommand({\n         key: 'about',\n         access: 'redirect',\n      }, async (req, res) => {\n         if (this.config.aboutUrl) {\n            res.redirect(302, this.config.aboutUrl);\n         }\n      });\n      this.expressApp.get('', async (req, res) => {\n         res.redirect(302, '/routes');\n      });\n      this.addPublicRoute('help', async (req, res) => {\n         if (this.isBrowser(req)) {\n            if (this.config.helpUrl) {\n               res.redirect(302, this.config.helpUrl);\n            } else if (false) {\n               let content = await Files.readFile('README.md');\n               if (false) {\n                  brucedown('README.md', (err, htmlResult) => {\n                     this.logger.debug('brucedown', htmlResult);\n                  });\n               } else {\n                  content = renderPage({\n                     config: this.config,\n                     req,\n                     title: this.config.serviceLabel,\n                     content: marked(content.toString())\n                  });\n                  res.set('Content-Type', 'text/html');\n                  res.send(content);\n               }\n            }\n         } else if (this.isCliDomain(req)) {\n            return this.listCommands();\n         } else {\n            return this.listCommands();\n         }\n      });\n      if (this.config.allowInfo) {\n         this.addPublicRoute('info', async (req, res) => {\n            res.set('Content-Type', 'text/plain');\n            res.send(await this.redis.infoAsync());\n         });\n      }\n      this.addPublicRoute('epoch', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/seconds', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/milliseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 + time[1]/1000);\n      });\n      this.addPublicRoute('time/nanoseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 * 1000 + parseInt(time[1]));\n      });\n      this.addPublicRoute('time', () => this.redis.timeAsync());\n      this.addPublicCommand({\n         key: 'genkey-otp',\n         params: ['user', 'host'],\n         format: 'json'\n      }, async (req, res) => {\n         const {user, host} = req.params;\n         this.logger.debug('genkey-otp', user, host);\n         return this.buildQrReply({user, host});\n      });\n      this.addPublicCommand({\n         key: 'genkey-ga',\n         params: ['address', 'issuer'],\n         format: 'json'\n      }, async (req, res) => {\n         const {address, issuer} = req.params;\n         this.logger.debug('genkey-ga', address, issuer);\n         return this.buildQrReply({account: address, issuer});\n      });\n      if (!this.config.secureDomain) {\n         this.logger.warn('insecure mode');\n      } else {\n         this.addPublicCommand({\n            key: 'gentoken',\n            params: ['account']\n         }, async (req, res, reqx) => {\n            const {account} = req.params;\n            const accountKey = this.adminKey('account', account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               multi.smembers(this.adminKey('account', account, 'certs'));\n            });\n            const duration = time - admined;\n            if (duration < this.config.adminLimit) {\n               return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n            }\n            this.logger.debug('gentoken', accountKey);\n            const {certDigest, certRole} = this.validateCert(req, reqx, certs, account, []);\n            const token = this.generateTokenKey(6);\n            await this.redis.setexAsync([accountKey, token].join(':'), this.config.keyExpire, token);\n            return token;\n         });\n         this.addSecureDomain();\n      }\n      this.addPublicCommand({\n         key: 'verify-user-telegram',\n         params: ['user']\n      }, async (req, res) => {\n         const {user} = req.params;\n         const userKey = this.adminKey('telegram', 'user', user);\n         let [[now], sismember, verified, secret] = await this.redis.multiExecAsync(multi => {\n            multi.time();\n            multi.sismember(this.adminKey('telegram:verified:users'), user);\n            multi.hget(userKey, 'verified');\n            multi.hget(userKey, 'secret');\n         });\n         if (sismember) {\n            if (verified) {\n               const duration = parseInt(now) - parseInt(verified);\n               return `OK: ${user}@telegram.me, verified ${Millis.formatVerboseDuration(duration)} ago`;\n            } else {\n               return `OK: ${user}@telegram.me`;\n            }\n         } else {\n            return [\n               `Telegram user not yet verified: ${user}.`,\n               `Please Telegram '@${this.config.adminBotName} /verifyme'`,\n               `e.g. via https://web.telegram.org`\n            ].join(' ');\n         }\n      });\n      this.addPublicCommand({\n         key: 'cert-script',\n         params: ['account'],\n         format: 'cli'\n      }, (req, res, reqx) => handleCertScript(req, res, reqx, {config: this.config}));\n      this.addPublicCommand({\n         key: 'cert-script-help',\n         params: ['account'],\n         format: 'cli'\n      }, (req, res, reqx) => handleCertScriptHelp(req, res, reqx, {config: this.config}));\n      this.addRegisterRoutes();\n      this.addAccountRoutes();\n      this.addKeyspaceCommand({\n         key: 'help',\n         access: 'debug',\n         resultObjectType: 'KeyedArrays',\n         sendResult: async (req, res, reqx, result) => {\n            if (!this.isCliDomain(req)) {\n               res.set('Content-Type', 'text/html');\n               res.send(renderPage(KeyspaceHelp.render({\n                  config: this.config, commandMap: this.commandMap,\n                  req, reqx, result\n               })));\n            } else if (false && !this.isMobile(req)) {\n               res.set('Content-Type', 'text/html');\n               res.send(ReactDOMServer.renderToString(<KeyspaceHelpPage reqx={reqx} result={result}/>));\n            } else {\n               return Object.assign(lodash.omit(result, 'description'), {commands: result.commands.map(command => {\n                  if (lodash.isEmpty(command.params)) {\n                     if (command.description) {\n                        return command.key;\n                     } else {\n                        return command.key;\n                     }\n                  } else {\n                     return [command.key].concat(command.params.map(param => ':' + param)).join('/');\n                  }\n               })});\n            }\n         },\n         handleReq: async (req, res, reqx) => {\n            const {account, keyspace} = req.params;\n            let hostUrl = this.config.hostUrl;\n            if (this.config.hostDomain !== 'localhost') {\n               hostUrl = `https://${req.hostname}`;\n            }\n            this.logger.ndebug('help', req.params, this.commands.map(command => command.key).join('/'));\n            const message = Switch.on(`Welcome to this keyspace`,\n               [reqx.account === 'hub', [\n                  `Welcome to this ephemeral keyspace.`\n               ].join(' ')],\n               [reqx.account, [\n                  `Welcome to your account keyspace`\n               ].join(' ')],\n            );\n            const commandReferenceMessage = `Read the Redis.io docs for the following commands`;\n            const customCommandHeading = `Custom commands`;\n            let description = [\n               `You can set, get and add data to sets, lists, zsets, hashes etc.`,\n               `Try click the example URLs below.`,\n               `Also edit the URL in the location bar to try other combinations.`,\n               `Click anywhere on the iconized header bar to navigate back.`\n            ];\n            if (false && this.isSecureDomain(req)) {\n               description.push(\n                  `When reading keys, you can also try changing the subdomain to 'replica.'`\n               );\n            }\n            description.push(\n               `<i>(A client-side command completion tool will come later. This is an MVP without any such bells and whistles yet.)</i>`\n            );\n            description = description.join(' ');\n            const exampleParams = [\n               ['ttls'],\n               ['types'],\n               ['set', 'mykey1/myvalue'],\n               ['get', 'mykey1'],\n               ['sadd', 'myset1/myvalue'],\n               ['smembers', 'myset1'],\n               ['lpush', 'mylist1/myvalue1'],\n               ['lpushx', 'mylist1/myvalue2'],\n               ['rpop', 'mylist1'],\n               ['lrange', 'mylist1/0/10'],\n               ['lrevrange', 'mylist1/0/10'],\n               ['lrange', 'mylist1/-10/-1'],\n               ['hset', 'myhashes1/field1/value1'],\n               ['hsetnx', 'myhashes1/field2/value2'],\n               ['hgetall', 'myhashes1'],\n               ['zadd', 'myzset1/10/member10'],\n               ['zadd', 'myzset1/20/member20'],\n               ['zrange', 'myzset1/0/-1'],\n               ['zrevrange', 'myzset1/0/-1'],\n            ];\n            const customExampleParams = [\n               ['set-json-query', 'myobject1?name=myname&id=12346'],\n               ['get-json', 'myobject1'],\n            ];\n            const exampleUrls = exampleParams.map(params => {\n               const key = params.shift();\n               let url = `${hostUrl}/ak/${account}/${keyspace}/${key}`;\n               if (params) {\n                  url += '/' + params;\n               }\n               return url;\n            })\n            return {message, commandReferenceMessage, customCommandHeading, description, exampleUrls,\n               commands: this.commands,\n               keyspaceCommands: this.listCommands('keyspace')\n            };\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'create-keyspace',\n         access: 'admin'\n      }, async (req, res, reqx) => {\n         const {command, time, account, keyspace, certDigest, certRole} = reqx;\n         const role = req.query.role || 'admin';\n         if (role !== certRole) {\n            throw new ValidationError({\n               status: 400,\n               message: `Cert Role (OU=${certRole}) mismatch (${role})`\n            });\n         }\n         this.logger.debug('command', command.key, account, role);\n         const [sadd, accountExpire, hlen] = await this.redis.multiExecAsync(multi => {\n            multi.sadd(this.accountKey(account, 'keyspaces'), keyspace);\n            multi.hget(this.accountKey(account), 'expire');\n            multi.hlen(this.accountKeyspace(account, keyspace));\n         });\n         if (!sadd) {\n            throw new ValidationError({\n               status: 400,\n               message: 'Keyspace already exists',\n               hint: this.hints.routes\n            });\n         }\n         if (hlen) {\n            throw new ValidationError({\n               status: 400,\n               message: 'Keyspace already exists (hlen)',\n               hint: this.hints.routes\n            });\n         }\n         const [keyspaceId] = await this.redis.multiExecAsync(multi => {\n            multi.incr(this.adminKey('keyspaces:seq'));\n         });\n         const expire = Seconds.parse(req.query.expire) || this.config.keyspaceExpire;\n         if (req.query && req.query.expire) {\n            if (expire < 10)  {\n               throw new ValidationError(\n                  `Keyspace expiry must be greater than 10 seconds`\n               );\n            }\n            if (expire > this.config.keyspaceExpire)  {\n               if (certRole !== 'admin') {\n                  throw new ValidationError(\n                     `Keyspace expiry must be less than ${Seconds.toDays(this.config.keyspaceExpire)} days for cert role ${certRole}`\n                  );\n               }\n            }\n            if (expire > accountExpire)  {\n               throw new ValidationError(\n                  `Keyspace expiry must be less than ${Seconds.toDays(accountExpire)} days for this account`\n               );\n            }\n         }\n         const [hmset] = await this.redis.multiExecAsync(multi => {\n            multi.hmset(this.accountKey(account, keyspace), {\n               expire, role, registered: time\n            });\n         });\n         if (hmset !== 'OK') {\n            throw ValidationError({\n               message: 'Failed to register keyspace',\n            });\n         }\n         await this.sendTelegramAlert(account, 'html', [\n            `Registered new keyspace <code>${keyspace}</code>`,\n         ]);\n         return 'OK';\n      });\n      this.addAccountCommand({\n         key: 'keyspaces',\n         params: ['account'],\n         description: 'list account keyspaces',\n         relatedCommands: ['create-keyspace'],\n         dangerousRelatedCommands: ['destroy-keyspace'],\n         renderHtmlEach: (req, res, reqx, keyspace) => {\n            this.logger.debug('renderHtmlEach', keyspace);\n            return `<a href=\"/ak/${reqx.account}/${keyspace}/help\">${keyspace}</a>`;\n         },\n         access: 'admin'\n      }, async (req, res, reqx) => {\n         this.logger.debug('keyspaces', reqx.command.key, reqx.account, this.accountKey(reqx.account, 'keyspaces'));\n         const [keyspaces] = await this.redis.multiExecAsync(multi => {\n            multi.smembers(this.accountKey(reqx.account, 'keyspaces'));\n         });\n         if (keyspaces) {\n            keyspaces.sort();\n         }\n         return keyspaces;\n      });\n      this.addKeyspaceCommand({\n         key: 'set-keyspace-access',\n         params: ['access'],\n         relatedCommands: ['ttls'],\n         access: 'admin'\n      }, async (req, res, {account, keyspace, accountKeyspace}, multi) => {\n         this.logger.debug('access params', accountKeyspace, req.params);\n         if (!lodash.includes(AccessKeys, req.params.access)) {\n            throw new ValidationError('Invalid access key. Must be one of: ' + AccessKeys.join(', '));\n         }\n         return await this.redis.hsetAsync(accountKeyspace, 'access', req.params.access);\n      });\n      this.addKeyspaceCommand({\n         key: 'destroy-keyspace',\n         access: 'admin'\n      }, async (req, res, {account, keyspace, accountKey, keyspaceKey}) => {\n         const [keys] = await this.redis.multiExecAsync(multi => {\n            multi.keys(this.keyspaceKey(account, keyspace, '*'));\n         });\n         const [keyspaces] = await this.redis.multiExecAsync(multi => {\n            multi.smembers(this.accountKey(account, 'keyspaces'));\n         });\n         this.logger.info('destroy-keyspace', keyspace, keys.length, keyspaces);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multiReply = await this.redis.multiExecAsync(multi => {\n            keys.forEach(key => multi.del(key));\n            multi.del(this.accountKey(account, 'keyspaces'), keyspace);\n            //multi.del(this.accountKey(account, 'certs'));\n            //multi.del(accountKey);\n         });\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'flush',\n         access: 'admin'\n      }, async (req, res) => {\n         const {account, keyspace} = req.params;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.del(key));\n         const multiReply = await multi.execAsync();\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'get-keyspace-info',\n         access: 'debug',\n         description: 'show admin info for this keyspace'\n      }, async (req, res, reqx) => {\n         this.logger.debug('get-keyspace-info', reqx.accountKeyspace);\n         return await this.redis.hgetallAsync(reqx.accountKeyspace);\n      });\n      this.addAccountCommand({\n         key: 'get-account-info',\n         access: 'debug',\n         description: 'show admin info for this keyspace',\n         relatedCommands: ['keyspaces']\n      }, async (req, res, reqx) => {\n         return await this.redis.hgetallAsync(reqx.accountKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'keys',\n         access: 'debug',\n         description: 'show keys in this keyspace',\n         relatedCommands: ['ttls', 'types']\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'types',\n         access: 'debug',\n         description: 'view all key types in this keyspace',\n         relatedCommands: ['ttls']\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.type(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'values',\n         access: 'debug',\n         description: 'view all key values in this keyspace',\n         relatedCommands: ['ttls', 'keys']\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.type(key));\n         const types = await multi.execAsync();\n         const result = {};\n         const multiValues = this.redis.multi();\n         keys.forEach((key, index) => {\n            const type = types[index];\n            if (type === 'string') {\n               multiValues.get(key);\n            } else if (type === 'hash') {\n               multiValues.hkeys(key);\n            } else if (type === 'set') {\n               multiValues.smembers(key);\n            } else if (type === 'zset') {\n               multiValues.type(key);\n            } else {\n               multiValues.type(key);\n            }\n         });\n         let values = await multiValues.execAsync();\n         values = values.map((value, index) => {\n            const type = types[index];\n            if (type !== 'string' && typeof value !== 'string' && lodash.isArray(value)) {\n               return value.join(', ');\n            } else {\n               return value;\n            }\n         });\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = values[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'ttls',\n         access: 'debug',\n         description: 'view all TTLs in this keyspace',\n         relatedCommands: ['keyspaces', 'keys', 'values', 'types']\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = reqx;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.ttl(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'ttl',\n         params: ['key'],\n         access: 'debug',\n         description: 'check the key TTL',\n         relatedCommands: ['type']\n      }, async (req, res, reqx) => {\n         return await this.redis.ttlAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'type',\n         params: ['key'],\n         access: 'debug',\n         description: 'check the type of a key',\n         relatedCommands: ['ttl']\n      }, async (req, res, reqx) => {\n         return await this.redis.typeAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-encrypt',\n         params: ['key', 'value'],\n         access: 'set',\n         description: 'set the string value of a key, encrypting using client cert'\n      }, async (req, res, {keyspaceKey}) => {\n         const {key, value} = req.params;\n         let cert = req.get('ssl_client_cert');\n         if (!cert) {\n            throw new ValidationError({\n               status: 403,\n               message: 'No client cert',\n               hint: this.hints.signup\n            });\n         }\n         cert = cert.replace(/\\t/g, '\\n');\n         const encrypted = crypto.publicEncrypt(cert, new Buffer(value)).toString('base64');\n         const reply = await this.redis.setAsync(keyspaceKey, encrypted);\n         return {key, encrypted, reply};\n      });\n      this.addKeyspaceCommand({\n         key: 'set',\n         params: ['key', 'value'],\n         access: 'set',\n         description: 'set the string value of a key',\n         relatedCommands: ['get', 'ttl', 'del'],\n      }, async (req, res, reqx) => {\n         return await this.redis.setAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-json-object',\n         description: 'set JSON via URL encoded object',\n         params: ['key', 'value'],\n         access: 'set',\n         relatedCommands: ['get-json'],\n      }, async (req, res, reqx) => {\n         let string = req.params.value;\n         if (/^\\w/.test(req.params.value)) {\n            string = ['{', req.params.value, '}'].join('');\n            string = string.replace(/(\\W)(\\w+):/g, '$1\"$2\":');\n         }\n         return await this.redis.setAsync(reqx.keyspaceKey, string);\n      });\n      this.addKeyspaceCommand({\n         key: 'set-json-query',\n         params: ['key'],\n         access: 'set',\n         description: 'set JSON via URL query',\n         relatedCommands: ['get-json']\n      }, async (req, res, reqx) => {\n         return await this.redis.setAsync(reqx.keyspaceKey, JSON.stringify(req.query));\n      });\n      this.addKeyspaceCommand({\n         key: 'setex',\n         params: ['key', 'seconds', 'value'],\n         access: 'set',\n         description: 'set the value and expiration of a key',\n         relatedCommands: ['get', 'ttl'],\n      }, async (req, res, reqx) => {\n         const {seconds, value} = req.params;\n         return await this.redis.setexAsync(reqx.keyspaceKey, seconds, value);\n      });\n      this.addKeyspaceCommand({\n         key: 'setnx',\n         params: ['key', 'value'],\n         access: 'add',\n         description: 'set the value of a key if it does not exist',\n         relatedCommands: ['set', 'get', 'ttl'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.setnxAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'get',\n         params: ['key'],\n         description: 'get the value you have set',\n         relatedCommands: ['ttl'],\n      }, async (req, res, reqx) => {\n         return await this.redis.getAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'get-json',\n         params: ['key'],\n         description: 'get the JSON value you have set',\n         relatedCommands: ['ttl'],\n      }, async (req, res, reqx) => {\n         const {key, keyspaceKey} = reqx;\n         const value = await this.redis.getAsync(keyspaceKey);\n         this.logger.info('get-json', typeof value, value);\n         if (value) {\n            if (true) {\n               return JSON.parse(value);\n            } else {\n               res.json(JSON.parse(value));\n            }\n         } else if (false) {\n            this.sendStatusMessage(req, res, 404, 'Not found: ' + key);\n         } else {\n            return JSON.parse(null);\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'incr',\n         params: ['key'],\n         access: 'add',\n         description: 'increment the integer value of a key',\n         relatedCommands: ['get', 'incrby'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.incrAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'incrby',\n         params: ['key', 'increment'],\n         access: 'add',\n         description: 'increment the integer value of a key by the given amount',\n         relatedCommands: ['get', 'incr'],\n      }, async (req, res, reqx) => {\n         return await this.redis.incrbyAsync(reqx.keyspaceKey, req.params.increment);\n      });\n      this.addKeyspaceCommand({\n         key: 'exists',\n         params: ['key'],\n         description: 'check if a key exists in the keyspace',\n         relatedCommands: ['get'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.existsAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'del',\n         params: ['key'],\n         access: 'set',\n         description: 'delete a key from the keyspace',\n         relatedCommands: ['get', 'ttl'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.delAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sadd',\n         params: ['key', 'member'],\n         access: 'add',\n         description: 'add a member to the list',\n         relatedCommands: ['sismember', 'scard', 'type', 'ttl'],\n      }, async (req, res, reqx) => {\n         return await this.redis.saddAsync(reqx.keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'srem',\n         params: ['key', 'member'],\n         access: 'set',\n         description: 'remove an element from the set',\n         relatedCommands: ['sadd'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.sremAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'smove',\n         params: ['key', 'dest', 'member'],\n         access: 'set'\n      }, async (req, res, {account, keyspace, keyspaceKey}, multi) => {\n         const {dest, member} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         let result = await this.redis.smoveAsync(keyspaceKey, destKey, member);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'spop',\n         params: ['key'],\n         access: 'set',\n         description: 'remove and return a random member of the set',\n         relatedCommands: ['sadd'],\n      }, async (req, res, reqx) => {\n         return await this.redis.spopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'smembers',\n         params: ['key'],\n         description: 'get the members of your set',\n         relatedCommands: ['scard'],\n      }, async (req, res, reqx) => {\n         return await this.redis.smembersAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sismember',\n         params: ['key', 'member'],\n         description: 'check that the value exists in your set',\n         relatedCommands: ['smembers'],\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.sismemberAsync(reqx.keyspaceKey, req.params.member);\n         return reply;\n      });\n      this.addKeyspaceCommand({\n         key: 'scard',\n         params: ['key'],\n         description: 'to get the cardinality of the zset'\n      }, async (req, res, reqx) => {\n         return await this.redis.scardAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpush',\n         params: ['key', 'value'],\n         access: 'add',\n         description: 'prepend a value to the list',\n         relatedCommands: ['lpushx', 'llen', 'lrange', 'trim', 'rpop'],\n      }, async (req, res, reqx) => {\n         return await this.redis.lpushAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpushx',\n         params: ['key', 'value'],\n         access: 'add',\n         description: 'prepend a value to a list if it exists',\n         relatedCommands: ['lpush', 'llen', 'lrange', 'trim', 'rpop'],\n      }, async (req, res, reqx) => {\n         return await this.redis.lpushxAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpush-trim',\n         params: ['key', 'length', 'value'],\n         access: 'set',\n         relatedCommands: ['lpush', 'trim'],\n      }, async (req, res, {keyspaceKey}, multi) => {\n         const {value, length} = req.params;\n         multi.lpush(keyspaceKey, value);\n         multi.trim(keyspaceKey, length);\n      });\n      this.addKeyspaceCommand({\n         key: 'rpush',\n         params: ['key', 'value'],\n         rest: true,\n         access: 'add',\n         description: 'append a value to the list (on the right)',\n         relatedCommands: ['lpush'],\n      }, async (req, res, reqx) => {\n         return await this.redis.rpushAsync(reqx.keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpop',\n         params: ['key'],\n         access: 'set',\n         description: 'get and remove the first element in the list',\n         relatedCommands: ['lpush'],\n      }, async (req, res, reqx) => {\n         return await this.redis.lpopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'blpop',\n         params: ['key', 'timeout'],\n         access: 'set',\n         description: 'get and remove the first element of the list (blocking)',\n         relatedCommands: ['llen'],\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.blpopAsync(reqx.keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'rpop',\n         params: ['key'],\n         access: 'set',\n         description: 'get and remove the last element of the list',\n         relatedCommands: ['llen'],\n      }, async (req, res, reqx) => {\n         return await this.redis.rpopAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'brpop',\n         params: ['key', 'timeout'],\n         access: 'set',\n         description: 'get and remove the last element of the list (blocking)',\n         relatedCommands: ['llen'],\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.brpopAsync(reqx.keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'brpoplpush',\n         params: ['key', 'dest', 'timeout'],\n         access: 'set',\n         description: 'get and remove the last element of the list and prepend to another',\n         relatedCommands: ['llen'],\n      }, async (req, res, {account, keyspace, keyspaceKey}, multi) => {\n         const {dest, timeout} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         const result = await this.redis.brpoplpushAsync(keyspaceKey, destKey, timeout);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'llen',\n         params: ['key'],\n         description: 'get the number of elements in a list',\n         relatedCommands: ['lrange']\n      }, async (req, res, reqx) => {\n         return await this.redis.llenAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lindex',\n         params: ['key', 'index'],\n         exampleKeyParams: {\n            index: 1\n         },\n         description: 'get an element from a list by its index',\n         relatedCommands: ['lset', 'lrange']\n      }, async (req, res, reqx) => {\n         return await this.redis.lindexAsync(reqx.keyspaceKey, req.params.index);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrem',\n         params: ['key', 'count', 'value'],\n         access: 'set',\n         description: 'remove elements from the list',\n      }, async (req, res, reqx) => {\n         return await this.redis.lremAsync(reqx.keyspaceKey, req.params.count, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lset',\n         params: ['key', 'index', 'value'],\n         access: 'set',\n         description: 'set the value of an element in a list by its index',\n         relatedCommands: ['lindex', 'lrange']\n      }, async (req, res, reqx) => {\n         return await this.redis.lsetAsync(reqx.keyspaceKey, req.params.index, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'ltrim',\n         params: ['key', 'start', 'stop'],\n         access: 'set',\n         description: 'trim the list to the specified range',\n         relatedCommands: ['llen']\n      }, async (req, res, reqx) => {\n         return await this.redis.ltrimAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrange',\n         params: ['key', 'start', 'stop'],\n         exampleKeyParams: {\n            start: 0,\n            stop: 10,\n         },\n         description: 'get a range of elements of a list (from the left)',\n         relatedCommands: ['lrevrange', 'lindex', 'llen', 'rpop', 'brpoplpush']\n      }, async (req, res, reqx) => {\n         return await this.redis.lrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrevrange',\n         params: ['key', 'start', 'stop'],\n         exampleKeyParams: {\n            start: 0,\n            stop: 10,\n         },\n         description: 'get some elements of your list in reverse order',\n         relatedCommands: ['lrange', 'llen']\n      }, async (req, res, reqx) => {\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n         return array.reverse();\n      });\n      this.addKeyspaceCommand({\n         key: 'rrange',\n         params: ['key', 'start', 'stop'],\n         exampleKeyParams: {\n            start: 0,\n            stop: 10,\n         },\n         description: 'get elements from the right of your list',\n         relatedCommands: ['rrevrange', 'lrange', 'llen']\n      }, async (req, res, reqx) => {\n         if (req.params.start < 0) {\n            throw {message: `${reqx.command.key} start must be zero or greater`};\n         }\n         if (req.params.stop < 0) {\n            throw {message: `${reqx.command.key} stop must be zero or greater`};\n         }\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, 0 - req.params.stop, 0 - req.params.start - 1);\n         return array.reverse();\n      });\n      this.addKeyspaceCommand({\n         key: 'rrevrange',\n         params: ['key', 'start', 'stop'],\n         exampleKeyParams: {\n            start: 0,\n            stop: 10,\n         },\n         description: 'get elements from the right of your list in reverse order',\n         relatedCommands: ['lrange', 'llen']\n      }, async (req, res, reqx) => {\n         if (req.params.start < 0) {\n            throw {message: `${reqx.command.key} start must be zero or greater`};\n         }\n         if (req.params.stop < 0) {\n            throw {message: `${reqx.command.key} stop must be zero or greater`};\n         }\n         const array = await this.redis.lrangeAsync(reqx.keyspaceKey, 0 - req.params.stop, 0 - req.params.start - 1);\n         return array;\n      });\n      this.addKeyspaceCommand({\n         key: 'hset',\n         params: ['key', 'field', 'value'],\n         access: 'set',\n         description: 'set the string value of a hash field',\n         relatedCommands: ['hget', 'hgetall', 'hkeys', 'hvals', 'type', 'ttl']\n      }, async (req, res, reqx) => {\n         return await this.redis.hsetAsync(reqx.keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hsetnx',\n         params: ['key', 'field', 'value'],\n         access: 'add',\n         description: 'set the string value of a hash field if it does not exist',\n         relatedCommands: ['hget', 'hgetall', 'hkeys', 'hvals']\n      }, async (req, res, reqx) => {\n         return await this.redis.hsetnxAsync(reqx.keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hget',\n         params: ['key', 'field'],\n         description: 'get the contents of a hash field',\n         relatedCommands: ['hexists', 'hgetall', 'hkeys', 'hvals']\n      }, async (req, res, reqx) => {\n         return await this.redis.hgetAsync(reqx.keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hdel',\n         params: ['key', 'field'],\n         access: 'set',\n         description: 'delete a hash field',\n         relatedCommands: ['hexists', 'hget']\n      }, async (req, res, reqx) => {\n         return await this.redis.hdelAsync(reqx.keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hincrby',\n         params: ['key', 'field', 'increment'],\n         access: 'add',\n         description: 'increment the integer value of a hash field',\n         relatedCommands: ['hget']\n      }, async (req, res, reqx) => {\n         return await this.redis.hincrbyAsync(reqx.keyspaceKey, req.params.field, req.params.increment);\n      });\n      this.addKeyspaceCommand({\n         key: 'hexists',\n         params: ['key', 'field'],\n         description: 'check if the hash field exists',\n         relatedCommands: ['hkeys', 'hgetall']\n      }, async (req, res, reqx) => {\n         const reply = await this.redis.hexistsAsync(reqx.keyspaceKey, req.params.field);\n         return reply;\n      });\n      this.addKeyspaceCommand({\n         key: 'hlen',\n         params: ['key'],\n         description: 'get the number of fields in a hash',\n         relatedCommands: ['hkeys', 'hvals', 'hgetall']\n      }, async (req, res, reqx) => {\n         return await this.redis.hlenAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hkeys',\n         params: ['key'],\n         description: 'get the keys of the fields in your hashes',\n         relatedCommands: ['hlen', 'hvals', 'hgetall']\n      }, async (req, res, reqx) => {\n         return await this.redis.hkeysAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hvals',\n         params: ['key'],\n         description: 'get all the values in a hash',\n         relatedCommands: ['hkeys', 'hgetall']\n      }, async (req, res, reqx) => {\n         return await this.redis.hvalsAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hgetall',\n         params: ['key'],\n         description: 'get all the fields in a hash',\n         relatedCommands: ['hlen', 'hkeys', 'hvals']\n      }, async (req, res, reqx) => {\n         return await this.redis.hgetallAsync(reqx.keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'zcard',\n         params: ['key'],\n         description: 'get the cardinality of the zset',\n         relatedCommands: ['zrange', 'zrevrange']\n      }, async (req, res, reqx) => {\n         return await this.redis.zcardAsync(reqx.keyspaceKey);\n      });\n      if (this.config.redisVersion && this.config.redisVersion[0] >= 3) {\n         this.addKeyspaceCommand({\n            key: 'zaddnx',\n            params: ['key', 'score', 'member'],\n            access: 'add',\n            description: 'add a member to a sorted set if it does not exist',\n            relatedCommands: ['zrange', 'zcard'],\n         }, async (req, res, reqx) => {\n            return await this.redis.zaddAsync(reqx.keyspaceKey, 'NX', req.params.score, req.params.member);\n         });\n      }\n      this.addKeyspaceCommand({\n         key: 'zincrby',\n         params: ['key', 'increment', 'member'],\n         access: 'add',\n         description: 'increment the score of a member of a sorted set',\n         relatedCommands: ['zrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zincrbyAsync(reqx.keyspaceKey, req.params.increment, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zadd',\n         params: ['key', 'score', 'member'],\n         access: 'add',\n         description: 'add a member to a sorted set',\n         relatedCommands: ['zrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zaddAsync(reqx.keyspaceKey, req.params.score, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrem',\n         params: ['key', 'member'],\n         access: 'set',\n         description: 'remove a member from a sorted set',\n         relatedCommands: ['zrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zremAsync(reqx.keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrange',\n         params: ['key', 'start', 'stop'],\n         description: 'range items in the zset',\n         exampleKeyParams: [0, 10],\n         relatedCommands: ['zrevrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrevrange',\n         params: ['key', 'start', 'stop'],\n         description: 'reverse range items in the zset',\n         relatedCommands: ['zrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zrevrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrevrange',\n         params: ['key', 'start', 'stop'],\n         description: 'reverse range items in the zset',\n         relatedCommands: ['zrange', 'zcard']\n      }, async (req, res, reqx) => {\n         return await this.redis.zrevrangeAsync(reqx.keyspaceKey, req.params.start, req.params.stop);\n      });\n   }\n\n   listCommands(context) {\n      return this.commands.filter(command => command.access !== 'redirect')\n      .filter(command => !context || command.context === context)\n      .map(command => [command.key, ...command.params].join(' '));\n   }\n\n   formatCommandUri(command) {\n      if (command.params.length) {\n         return [command.key, ... command.params.map(param => ':' + param)].join('/');\n      } else {\n         return command.key;\n      }\n   }\n\n   addPublicCommand(command, handleReq) {\n      handleReq = handleReq || command.handleReq;\n      assert(Values.isDefined(handleReq), command.key);\n      let uri = command.key;\n      if (command.params) {\n         uri = [command.key, ... command.params.map(param => ':' + param)].join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), async (req, res) => {\n         try {\n            const match = req.path.match(/\\/:([^\\/]+)/);\n            if (match) {\n               throw {message: 'Invalid path: leading colon. Try substituting parameter: ' + match.pop()};\n            }\n            this.logger.debug('command', command.key);\n            const result = await handleReq(req, res, {command});\n            if (command.access === 'redirect') {\n            } else if (result !== undefined) {\n               await Result.sendResult(command, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n      this.addCommand(command);\n   }\n\n   addPublicRoute(uri, handleReq) {\n      uri = [this.config.location, uri].join('/');\n      this.logger.debug('addPublicRoute', uri);\n      this.expressApp.get(uri, async (req, res) => {\n         try {\n            const result = await handleReq(req, res);\n            if (result !== undefined) {\n               await Result.sendResult({}, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n   }\n\n   addRegisterRoutes() {\n      this.addPublicCommand({\n         key: 'register-ephemeral' // TODO remove 10 june\n      }, async (req, res) => {\n         req.params = {account: 'hub'};\n         return this.createEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'create-ephemeral'\n      }, async (req, res) => {\n         req.params = {account: 'hub'};\n         return this.createEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'create-ephemeral-named',\n         params: ['keyspace', 'access']\n      }, async (req, res) => {\n         req.params = {account: 'hub'};\n         return this.createEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'create-ephemeral-access',\n         params: ['access']\n      }, async (req, res) => {\n         req.params.account = 'hub';\n         return this.createEphemeral(req, res);\n      });\n      this.addPublicCommand({\n         key: 'create-account-telegram',\n         params: ['account'],\n         description: 'create a new account linked to an authoritative Telegram.org account'\n      }, async (req, res, reqx) => {\n         return this.createAccount(req, res, reqx);\n      });\n      this.addPublicCommand({\n         key: 'destroy-account',\n         params: ['account'],\n         dangerous: true, // TODO\n         description: 'destroy an account'\n      }, async (req, res, reqx) => {\n         let {account, accountKey} = reqx;\n         const scard = await this.redis.multiExecAsync(multi => {\n            multi.scard(this.accountKey(account, 'keyspaces'));\n         });\n         if (scard > 0) {\n            throw {message: 'All keyspaces must be destroyed individually first'};\n         }\n         this.logger.error('not implemented', reqx);\n         throw {message: 'Not implemented. Bug @evanxsummers after 24 June'}; // TODO\n      });\n      this.addPublicCommand({\n         key: 'register-cert',\n         relatedCommands: ['create-keyspace', 'keyspaces']\n      }, require('./handlers/registerCert').default);\n   }\n\n   getClientCert(req) {\n      let cert = req.get('ssl_client_cert');\n      if (cert) {\n         cert = cert.replace(/\\t/g, '\\n');\n      }\n      return cert;\n   }\n\n   parseCertDn(req) {\n      const dn = req.get('ssl_client_s_dn');\n      if (!dn) throw new ValidationError({message: 'No client cert DN', hint: this.hints.signup});\n      return this.parseDn(dn);\n   }\n\n   parseDn(dn) {\n      const parts = {};\n      dn.split('/').filter(part => part.length)\n      .forEach(part => {\n         const [name, value] = part.split('=');\n         if (name && value) {\n            parts[name.toLowerCase()] = value;\n         } else {\n            this.logger.warn('parseDn', dn, part, name, value);\n         }\n      });\n      return parts;\n   }\n\n   addAccountRoutes() {\n      if (this.config.secureDomain) {\n         this.addAccountCommand({\n            key: 'grant-cert',\n            params: ['account', 'role', 'certId'],\n            defaultParams: {\n               group: 'admin'\n            },\n            access: 'admin'\n         }, async (req, res, {account, accountKey, time, certDigest, certRole}) => {\n            const [cert] = await this.redis.multiExecAsync(multi => {\n               multi.hgetall(this.adminKey('cert', certId));\n            });\n            throw new ApplicationError('Unimplemented');\n         });\n      }\n   }\n\n   async createAccount(req, res) {\n      try {\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         const {account} = req.params;\n         let v = this.validateRegisterAccount(account);\n         if (v) {\n            throw new ValidationError(v);\n         }\n         const dn = req.get('ssl_client_s_dn');\n         const cert = req.get('ssl_client_cert');\n         this.logger.info('createAccount dn', dn);\n         if (!cert) {\n            throw new ValidationError({message: 'No client cert', hint: this.hints.signup});\n         }\n         const certDigest = this.digestPem(cert);\n         const otpSecret = this.generateTokenKey();\n         const accountKey = this.adminKey('account', account);\n         const [hsetnx, saddAccount] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', Seconds.now());\n            multi.sadd(this.adminKey('accounts'), account);\n            multi.hsetnx(accountKey, 'expire', this.config.keyExpire);\n            multi.sadd(this.adminKey('account', account, 'topt'), otpSecret);\n         });\n         if (!hsetnx) {\n            throw {message: 'Account already exists (hashes)'};\n         }\n         if (!saddAccount) {\n            throw {message: 'Account already exists (set)'};\n         }\n         const [saddCert] = await this.redis.multiExecAsync(multi => {\n            multi.sadd(this.adminKey('account', account, 'certs'), certDigest);\n         });\n         if (!saddCert) {\n            throw {message: 'Cert already exists'};\n         }\n         const result = this.buildQrReply({\n            otpSecret,\n            user: account,\n            host: this.config.hostDomain,\n            label: this.config.serviceLabel\n         });\n         await Result.sendResult({}, req, res, {account}, result);\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   async addAccountCommand(command, handleReq) {\n      handleReq = handleReq || command.handleReq;\n      let uri = [command.key];\n      if (command.params) {\n         uri = [command.key, ...command.params.map(param => ':' + param)];\n      }\n      if (command.access !== 'admin') {\n         this.logger.warn('AddAccountCommand access', command.access);\n      }\n      this.expressApp.get([this.config.location, ...uri].join('/'), async (req, res) => {\n         const reqx = {command};\n         try {\n            let message = this.validatePath(req);\n            if (message) throw {message};\n            const {account} = req.params;\n            const accountKey = this.adminKey('account', account);\n            const [[time], admined, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'admined');\n               multi.smembers(this.adminKey('account', account, 'certs'));\n            });\n            this.logger.debug('admin command', {account, accountKey, time, admined, certs});\n            if (!admined) {\n               //throw {message: 'Invalid account'};\n            }\n            if (lodash.isEmpty(certs)) {\n               throw {message: 'No certs'};\n            }\n            const duration = time - admined;\n            if (duration < this.config.adminLimit) {\n               return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n            }\n            const {certDigest, certRole} = this.validateCert(req, reqx, certs, account, []);\n            Object.assign(reqx, {account, accountKey, time, admined, certDigest, certRole});\n            const result = await handleReq(req, res, reqx);\n            if (result !== undefined) {\n               await Result.sendResult(command, req, res, reqx, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n   }\n\n   generateTokenKey(length = 16) {\n      const Base32Symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n      return lodash.reduce(crypto.randomBytes(length), (result, value) => {\n         return result + Base32Symbols[Math.floor(value * Base32Symbols.length / 256)];\n      }, '');\n   }\n\n   formatTokenKey(tokenKey) {\n      return tokenKey.match(/.{1,4}/g).join(' ');\n   }\n\n   generateTokenCode(otpSecret, time) { // TODO test generating a TOTP token from secret\n      try {\n         time = Math.floor((time || (new Date().getTime())/1000)/30);\n         this.logger.info('base32', Object.keys(base32));\n         this.logger.info('speakeasy', Object.keys(speakeasy.totp));\n         this.logger.debug('otplib generateSecret', otp.utils.generateSecret());\n         this.logger.debug('otplib', otp.topt.generate(base32.decode(otpSecret), time));\n      } catch (err) {\n         this.logger.error('generateTokenCode', err);\n      }\n   }\n\n   buildQrReply(options) {\n      let {label, account, user, host, otpSecret, issuer} = options;\n      if (!otpSecret) {\n         otpSecret = this.generateTokenKey();\n      }\n      //this.logger.debug('code', this.generateTokenCode(otpSecret));\n      if (!issuer) {\n         issuer = label || host;\n      }\n      if (!account && user && host) {\n         account = `${user}@${host}`;\n      }\n      if (!account || !issuer) {\n         throw {message: 'Invalid'};\n      }\n      const uri = `${account}?secret=${otpSecret}&issuer=${issuer}`;\n      const otpauth = 'otpauth://totp/' + encodeURIComponent(uri);\n      const googleChartUrl = 'http://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=' + otpauth;\n      return {otpSecret, uri, otpauth, googleChartUrl};\n   }\n\n   validateRegisterTime() {\n      const time = new Date().getTime();\n      if (!this.registerTime) {\n         this.registerTime = time;\n      } else {\n         const duration = time - this.registerTime;\n         if (duration > 1000) {\n            this.registerTime = time;\n            this.registerCount = 0;\n         } else {\n            this.registerCount++;\n         }\n         if (this.registerCount > this.config.registerLimit) {\n            this.logger.error('registerCount');\n            return `Global register rate exceeed: ${this.config.registerLimit} per second`;\n         }\n      }\n      this.registerTime = time;\n   }\n\n   async createEphemeral(req, res, previousError) {\n      let {account, keyspace, access} = req.params;\n      assert(account, 'account');\n      if (!keyspace) {\n         keyspace = this.generateTokenKey(12).toLowerCase();\n      } else {\n         const v = this.validateRegisterKeyspace(keyspace);\n         if (v) {\n            throw {message: v, keyspace};\n         }\n      }\n      if (!access) {\n      } else if (access === 'add') {\n         keyspace = '+' + keyspace;\n      } else if (access) {\n         this.sendError(req, res, {message: 'Access unimplemented: ' + access, hint: {\n            message: 'Try access: add',\n            description: 'Currently only \"add\" limited access is supported.'\n         }});\n      }\n      if (previousError) {\n         this.logger.warn('createEphemeral retry');\n      }\n      try {\n         this.logger.debug('createEphemeral');\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         let clientIp = req.get('x-forwarded-for');\n         this.logger.debug('createEphemeral clientIp', clientIp, account, keyspace);\n         const replies = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(this.accountKeyspace(account, keyspace), 'registered', Seconds.now());\n            if (clientIp) {\n               multi.hsetnx(this.accountKeyspace(account, keyspace), 'clientIp', clientIp);\n               if (this.config.addClientIp) {\n                  multi.sadd(this.adminKey('keyspaces:ephemeral:ips'), clientIp);\n               }\n            }\n            //this.count(multi, 'keyspaces:ephemeral'); // TODO del old keyspaces:expire\n         });\n         if (!replies[0]) {\n            this.logger.error('keyspace clash', account, keyspace);\n            if (!previousError) {\n               return this.createEphemeral(req, res, {message: 'keyspace clash'});\n            }\n            throw {message: 'Keyspace already exists'};\n         }\n         const replyPath = ['ak', account, keyspace].join('/');\n         this.logger.debug('createEphemeral replyPath', replyPath);\n         if (this.isBrowser(req)) {\n            res.redirect(302, ['', replyPath, 'help'].join('/'));\n         } else {\n            return replyPath;\n         }\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   count(multi, key) {\n      multi.incr(this.adminKey(`metrics:${key}:count`));\n   }\n\n   validateImportTime() {\n      const time = new Date().getTime();\n      if (!this.importTime) {\n         this.importTime = time;\n      } else {\n         const duration = time - this.importTime;\n         if (duration > 1000) {\n            this.importTime = time;\n            this.importCount = 0;\n         } else {\n            this.importCount++;\n         }\n         if (this.importCount > this.config.importLimit) {\n            this.logger.error('importCount');\n            return `Global import rate exceeed: ${this.config.importLimit} per second`;\n         }\n      }\n      this.importTime = time;\n   }\n\n   addCommand(command) {\n      assert(command.key);\n      this.commands.push(command);\n      this.commandMap.set(command.key, command);\n   }\n\n   addKeyspaceCommand(command, handleReq) {\n      if (handleReq) {\n         command.handleReq = handleReq;\n      }\n      assert(command.key, 'command.key');\n      command.context = 'keyspace';\n      let uri = 'ak/:account/:keyspace';\n      command.params = command.params || [];\n      const key = command.key + command.params.length;\n      this.logger.debug('addKeyspaceCommand', command.key, key, uri);\n      this.addCommand(command);\n      const handler = this.createKeyspaceHandler(command);\n      if (command.key === this.config.indexCommand) {\n         this.expressApp.get([this.config.location, uri].join('/'), handler);\n      }\n      uri += '/' + command.key;\n      if (command.params.length) {\n         assert(command.key !== this.config.indexCommand, 'indexCommand');\n         uri += '/' + command.params.map(param => ':' + param).join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), handler);\n      this.logger.debug('add', command.key, uri);\n   }\n\n   createKeyspaceHandler(command) {\n      return async (req, res) => {\n         try {\n            const {account, keyspace, key, timeout} = req.params;\n            assert(account, 'account');\n            assert(keyspace, 'keyspace');\n            const accountKey = this.accountKey(account);\n            const accountKeyspace = this.accountKeyspace(account, keyspace);\n            const helpPath = `/ak/${account}/${keyspace}/help`;\n            const reqx = {account, keyspace, accountKey, accountKeyspace, key, helpPath, command};\n            if (key) {\n               reqx.keyspaceKey = this.keyspaceKey(account, keyspace, key);\n            }\n            req.rquery = reqx;\n            let v;\n            //await this.migrateKeyspace(req.params);\n            v = this.validateAccount(account);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid account: ' + v);\n               return;\n            }\n            v = this.validateKeyspace(keyspace);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid keyspace: ' + v);\n               return;\n            }\n            v = this.validateKey(key);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid key: ' + v);\n               return;\n            }\n            if (timeout) {\n               if (!/^[0-9]$/.test(timeout)) {\n                  this.sendStatusMessage(req, res, 400, 'Invalid timeout: require range 1 to 9 seconds');\n                  return;\n               }\n            }\n            const isSecureAccount = !/^(pub|hub)$/.test(account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               if (isSecureAccount) {\n                  multi.smembers(this.adminKey('account', account, 'certs'));\n               }\n            });\n            Objects.kvs({time, registered, admined, accessed}).forEach(kv => {\n               reqx[kv.key] = parseInt(kv.value);\n            });\n            this.validateAccess(req, reqx, {certs});\n            let hostname;\n            if (req.hostname === this.config.hostDomain) {\n            } else if (lodash.endsWith(req.hostname, this.config.keyspaceHostname)) {\n               hostname = req.hostname.replace(/\\..*$/, '');\n               let hostHashes = await this.redis.hgetallAsync(this.adminKey('host', hostname));\n               if (!hostHashes) {\n                  throw new ValidationError(`Invalid host: ${hostname}`);\n               }\n               this.logger.debug('hostHashes', hostHashes);\n               if (!hostHashes.keyspaces) {\n                  throw new ValidationError(`Invalid host: ${hostname}`);\n               }\n               if (!lodash.includes(hostHashes.keyspaces, keyspace)) {\n                  throw new ValidationError(`Invalid keyspace: ${keyspace}`);\n               }\n            }\n            if (!keyspace) {\n               throw new ValidationError('Missing keyspace: ' + req.path);\n            }\n            if (timeout) {\n               if (timeout < 1 || timeout > 10) {\n                  throw new ValidationError('Timeout must range from 1 to 10 seconds: ' + timeout);\n               }\n            }\n            const multi = this.redis.multi();\n            multi.sadd(this.adminKey('keyspaces'), keyspace);\n            multi.hset(accountKey, 'accessed', time);\n            if (command && command.access === 'admin') {\n               multi.hset(accountKey, 'admined', time);\n            }\n            const result = await command.handleReq(req, res, reqx, multi);\n            if (result !== undefined) {\n               await Result.sendResult(command, req, res, reqx, result);\n            }\n            if (key) {\n               assert(reqx.keyspaceKey);\n               const expire = this.getKeyExpire(account);\n               multi.expire(reqx.keyspaceKey, expire);\n               this.logger.debug('expire', reqx.keyspaceKey, expire);\n            }\n            const [...expire] = await multi.execAsync();\n            if (!expire) {\n               throw new ApplicationError('expire: ' + reqx.keyspaceKey);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      };\n   }\n\n   getKeyExpire(account) {\n      if (account === 'hub') {\n         return this.config.ephemeralKeyExpire;\n      } else {\n         return this.config.keyExpire;\n      }\n   }\n\n   async migrateKeyspace({account, keyspace}) {\n      const accountKey = this.accountKeyspace(account, keyspace);\n      const [accessToken, token] = await this.redis.multiExecAsync(multi => {\n         multi.hget(accountKey, 'accessToken');\n         multi.hget(accountKey, 'token');\n      });\n      if (!token && accessToken) {\n         const [hsetnx, hdel] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'token', accessToken);\n            multi.hdel(accountKey, 'accessToken');\n         });\n         if (!hsetnx) {\n            throw new Error('Migrate keyspace hset failed');\n         } else if (!hdel) {\n            throw new Error('Migrate keyspace hdel failed');\n         }\n      }\n   }\n\n   validateRegisterAccount(account) {\n      if (lodash.isEmpty(account)) {\n         return 'Invalid account (empty)';\n      } else if (['hub', 'pub', 'public', 'ephemeral'].includes(account)) {\n      } else if (!/^[\\-_a-z0-9]+$/.test(account)) {\n         return 'Account name is invalid. Try only lowercase/numeric with dash/underscore.';\n      }\n   }\n\n   validatePath(req) {\n      const match = req.path.match(/\\/:([^\\/]+)/);\n      if (match) {\n         return 'Invalid path: leading colon. Try substituting parameter: ' + match.pop();\n      }\n   }\n\n   validateRegisterKeyspace(keyspace) {\n      if (/~/.test(keyspace)) {\n         return 'contains tilde';\n      }\n   }\n\n   validateAccount(account) {\n      if (/^:/.test(account)) {\n         return 'leading colon';\n      }\n   }\n\n   validateKeyspace(keyspace) {\n      if (/^:/.test(keyspace)) {\n         return 'leading colon';\n      }\n      if (/::/.test(keyspace)) {\n         return 'double colon';\n      }\n      if (/:$/.test(keyspace)) {\n         return 'trailing colon';\n      }\n   }\n\n   validateKey(key) {\n      if (/^:/.test(key)) {\n         return 'leading colon';\n      }\n   }\n\n   isReadCommand(command) {\n      if (!command) {\n         return false;\n      } else if (!command.access) {\n         return true;\n      } else if (command.access === 'debug') {\n         return true;\n      }\n      return false;\n   }\n\n   validateAccess(req, reqx, {certs}) {\n      const {command, account, keyspace, time} = reqx;\n      const scheme = req.get('X-Forwarded-Proto');\n      this.logger.debug('validateAccess scheme', scheme, account, keyspace, command);\n      if (this.isSecureDomain(req)) {\n         if (scheme === 'http') {\n            throw {message: `Insecure scheme ${scheme}: ${req.hostname}`};\n         }\n      }\n      if (account !== 'hub' && account !== 'pub') {\n         Object.assign(reqx, this.validateCert(req, reqx, certs, account, []));\n      }\n      if (false) {\n         if (command.key === 'create-keyspace') {\n            if (reqx.registered) {\n               throw new ValidationError({\n                  message: 'Already registered',\n                  hint: this.hints.routes\n               });\n            }\n         } else if (!reqx.registered) {\n            if (account === 'hub' || account === 'pub') {\n               throw new ValidationError({\n                  message: 'Expired (or unregistered) keyspace',\n                  hint: this.hints.createEphemeral\n               });\n            } else {\n               throw new ValidationError({\n                  message: 'Unregistered keyspace',\n                  hint: this.hints.createEphemeral\n               });\n            }\n         }\n      }\n      if (command.access) {\n         if (command.access === 'admin') {\n            if (!reqx.admined) {\n               this.logger.warn('validateAccess admined', keyspace, command.key, time);\n            } else {\n               const duration = time - reqx.admined;\n               if (duration < this.config.adminLimit) {\n                  throw new ValidationError({\n                     message: `Admin command interval not elapsed: ${this.config.adminLimit}s`\n                  });\n               }\n            }\n         } else if (command.access === 'debug') {\n         } else if (command.access === 'add') {\n            if (!/^[a-z]/.test(keyspace)) {\n               return;\n            }\n         } else if (command.access === 'set') {\n            if (/^\\+/.test(keyspace)) {\n               throw {message: 'Append-only keyspace'};\n            }\n         } else if (command.access === 'get') {\n         } else {\n         }\n      }\n   }\n\n   validateCert(req, reqx, certs, account, roles) {\n      if (this.config.disableValidateCert) {\n         return {};\n      }\n      if (!certs) {\n         throw new ValidationError({\n            status: 403,\n            message: 'No granted certs',\n            hint: this.hints.signup\n         });\n      }\n      const cert = req.get('ssl_client_cert');\n      if (!cert) {\n         throw new ValidationError({\n            status: 403,\n            message: 'No client cert sent',\n            hint: this.hints.signup\n         });\n      }\n      const dn = req.get('ssl_client_s_dn');\n      if (!dn) throw new ValidationError({\n         status: 400,\n         message: 'No client cert DN',\n         hint: this.hints.signup\n      });\n      const names = this.parseDn(dn);\n      if (names.o !== account) throw new ValidationError({\n         status: 403,\n         message: 'Cert O name mismatches account',\n         hint: this.hints.registerCert\n      });\n      const certRole = names.ou;\n      if (!lodash.isEmpty(roles) && !roles.includes(certRole)) throw new ValidationError({\n         status: 403,\n         message: 'No role access',\n         hint: this.hints.registerCert\n      });\n      const certDigest = this.digestPem(cert);\n      if (!certs.includes(certDigest)) {\n         this.logger.warn('validateCert', account, certRole, certDigest, certs);\n         throw new ValidationError({\n            status: 403,\n            message: 'Invalid cert',\n            hint: this.hints.registerCert\n         });\n      }\n      return {certDigest, certRole};\n   }\n\n   keyIndex(account, keyspace) {\n      return [this.config.redisKeyspace, account, keyspace].reduce((previousValue, currentValue) => {\n         return previousValue + currentValue.length\n      }, 3);\n   }\n\n   accountKey(account, ...more) {\n      return this.adminKey('account', account, ...more);\n   }\n\n   accountKeyspace(account, keyspace) {\n      return [this.config.redisKeyspace, 'ak', account, keyspace].join(':');\n   }\n\n   keyspaceKey(account, keyspace, key) {\n      return [this.config.redisKeyspace, account, keyspace, key].join('~');\n   }\n\n   adminKey(...parts) {\n      return [this.config.redisKeyspace, ...parts].join(':');\n   }\n\n   isDevelopment(req) {\n      return req.hostname === 'localhost' && process.env.NODE_ENV === 'development';\n   }\n\n   isSecureDomain(req) {\n      if (this.config.secureDomain) {\n         return true;\n      }\n      if (/^(secure|cli)\\./.test(req.hostname)) {\n         this.logger.warn('isSecureDomain', req.hostname);\n         return true;\n      }\n      return false;\n   }\n\n   isMobile(req) {\n      return /(Mobile|iPhone)/.test(req.get('User-Agent'));\n   }\n\n   isBrowser(req) {\n      return !/^curl\\//.test(req.get('User-Agent'));\n   }\n\n   getContentType(req) {\n      return this.isBrowser(req)? 'html' : 'plain';\n   }\n\n   isHtmlDomain(req) {\n      return /^web/.test(req.hostname);\n   }\n\n   isJsonDomain(req) {\n      return /^json/.test(req.hostname);\n   }\n\n   isCliDomain(req) {\n      return /^cli/.test(req.hostname) || !this.isBrowser(req) || this.config.cliDomain;\n   }\n\n   sendError(req, res, err) {\n      if (lodash.isError(err) && err.name !== 'ValidationError') {\n         this.logger.warn(err);\n      }\n      if (err.context) {\n         this.logger.warn(err.context);\n      }\n      try {\n         this.sendStatusMessage(req, res, err.status || 500, err);\n      } catch (error) {\n         this.logger.error(error);\n      }\n   }\n\n   sendStatusMessage(req, res, statusCode, err) {\n      const reqx = req.rquery || {};\n      const command = reqx.command || {};\n      this.logger.warn('status', req.path, statusCode, typeof err, err);\n      let messageLines = [];\n      if (!err) {\n         this.logger.error('sendStatusMessage empty');\n         err = 'empty error message';\n      }\n      let title = req.path;\n      let hints = [];\n      if (lodash.isString(err)) {\n         title = err;\n      } else if (lodash.isArray(err)) {\n         messageLines = messageLines.concat(err);\n      } else if (typeof err === 'object') {\n         this.logger.debug('sendStatusMessage', err, req.params);\n         if (err.code === 'WRONGTYPE') {\n            const {account, keyspace, key} = req.params;\n            title = 'Wrong type for key';\n            if (account && keyspace && key) {\n               hints.push({\n                  message: `Check the key type`,\n                  uri: ['ak', account, keyspace, 'type', key].join('/')\n               });\n            }\n         } else if (err.message) {\n            title = err.message;\n         }\n         if (err.hint) {\n            hints.push(err.hint);\n         }\n         if (err.hints) {\n            hints = hints.concat(err.hints);\n         }\n         hints = hints.map(hint => {\n            hint = Object.assign({}, hint);\n            if (hint.url) {\n               if (hint.message) {\n                  if (this.isBrowser(req)) {\n                  } else if (hint.message) {\n                     hint.message = hint.message.replace(/<\\/?(b|tt|i|code|pre)>/g, '');\n                  }\n               }\n            } else if (hint.uri) {\n               let url;\n               if (this.isBrowser(req)) {\n                  url = `/${hint.uri}`;\n               } else if (/localhost/.test(req.hostname)) {\n                  url = `http://localhost:8765/${hint.uri}`;\n               } else {\n                  url = `https://${req.hostname}/${hint.uri}`;\n               }\n               hint.url = url;\n            }\n            return hint;\n         });\n         if (err.stack) {\n            if (err.name === 'ValidationError') {\n            } else if (err.name === 'Error' && err.code) {\n               if (!['WRONGTYPE'].includes(err.code)) {\n                  messageLines.push(err.code);\n               }\n            } else if (err.name) {\n               messageLines.push(err.name);\n            } else if (!lodash.isError(err)) {\n            } else if (err.stack) {\n               messageLines.push(err.stack.split('\\n').slice(0, 2));\n            }\n         }\n      } else {\n         this.logger.error('sendStatusMessage type', typeof err, err);\n         err = 'unexpected error type: ' + typeof err;\n         messageLines.push(Object.keys(err).join(' '));\n      }\n      if (!hints.length) {\n         hints.push(this.hints.routes);\n      }\n      const heading = [Hc.b('Status'), Hc.tt(statusCode)].join(' ');\n      if (this.isBrowser(req)) {\n         this.logger.debug('hints', hints);\n         res.set('Content-Type', 'text/html');\n         res.status(statusCode).send(renderPage({\n            backPath: '/routes',\n            config: this.config,\n            req, reqx, title, heading,\n            content: [\n               //Hs.div(styles.error.status, `Status ${statusCode}`),\n               He.div({style: styles.error.message}, title),\n               He.pre({\n                  style: styles.error.detail,\n                  meta: 'optional'\n               }, lodash.flatten(messageLines).join('\\n')),\n               hints.map(hint => {\n                  this.logger.debug('hint', hint);\n                  const attributes = {\n                     style: styles.error.hintContainer,\n                     href: hint.url\n                  };\n                  if (hint.url[0] !== '/') {\n                     attributes.target = '_blank';\n                  }\n                  if (hint.clipboard) {\n                     attributes.onClick = `window.prompt('Copy to clipboard via Ctrl-C', '${hint.clipboard}')`;\n                  }\n                  return He.a(attributes, lodash.flatten([\n                     Hso.div(styles.error.hintMessage, hint.message),\n                     Hso.div(styles.error.hintDescription, hint.description)\n                  ]))\n               }),\n            ]\n         }));\n      } else {\n         messageLines = messageLines.concat(hints.map(hint => {\n            if (true) {\n               return lodash.compact([hint.message]);\n            } else {\n               return lodash.compact([hint.message, hint.url]);\n            }\n         }));\n         this.logger.warn('status lines', req.path, statusCode, messageLines);\n         this.logger.debug('messageLines', messageLines, lodash.flatten(messageLines), hints);\n         res.status(statusCode).send(lodash.flatten([title, ...messageLines]).join('\\n') + '\\n');\n      }\n   }\n\n   splitPem(pem) {\n      const lines = pem.split(/[\\n\\t]/);\n      if (lines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      if (!/^-+BEGIN CERTIFICATE/.test(lines[0])) {\n         throw new ValidationError('Invalid first line');\n      }\n      const contentLines = lines.filter(line => line.length > 16 && !/^--/.test(line));\n      if (contentLines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      return contentLines;\n   }\n\n   extractPem(pem) {\n      const contentLines = this.splitPem(pem);\n      return contentLines[4].slice(-12);\n   }\n\n   digestPem(pem) {\n      const contentLines = this.splitPem(pem);\n      const content = contentLines.join('');\n      const sha1 = crypto.createHash('sha1');\n      sha1.update(new Buffer(content));\n      const digest = sha1.digest('hex');\n      this.logger.debug('digestPem', digest);\n      if (digest.length < 32) {\n         throw new ValidationError({\n            status: 400,\n            message: 'Invalid cert length'\n         });\n      }\n      return digest;\n   }\n\n   async end() {\n      this.logger.info('end');\n      if (redis) {\n         await this.redis.quitAsync();\n      }\n      if (this.expressServer) {\n         this.expressServer.close();\n      }\n   }\n}\n"]}