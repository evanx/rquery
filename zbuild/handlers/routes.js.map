{"version":3,"sources":["../../rquery/handlers/routes.js"],"names":[],"mappings":"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","file":"routes.js","sourcesContent":["\nimport {default as renderPage} from '../html/Page';\nimport {default as renderHelp} from '../html/Help';\n\nconst logger = Loggers.create(module.filename);\nconst rquery = global.rquery;\nassert(rquery.config, 'rquery.config');\n\nmodule.exports = {\n   key: 'routes',\n   access: 'debug',\n   aliases: ['/'],\n   resultObjectType: 'KeyedArrays',\n   sendResult: async (req, res, reqx, result) => {\n      if (rquery.isCliDomain(req)) {\n         //logger.debug('routes result', Object.keys(result));\n         return result;\n      } else {\n         res.set('Content-Type', 'text/html');\n         res.send(renderPage(renderHelp({\n            config: rquery.config, req, result, homePath: '/'\n         })));\n      }\n   },\n   handleReq: async (req, res, reqx) => {\n      assert(reqx.command === module.exports, 'command');\n      assert(lodash.isFunction(rquery.isSecureDomain), 'rquery');\n      let hostUrl = rquery.config.hostUrl;\n      if (rquery.config.hostDomain != 'localhost') {\n         hostUrl = 'https://' + req.hostname;\n      }\n      const routes = Express.getRoutes(rquery.expressApp)\n      .filter(route => !['/', '/routes', '/webhook-telegram/*', '/help', '/about'].includes(route));\n      assert(lodash.isArray(routes) && routes.length, 'routes: ' + routes.length);\n      const accountOnlyRoutes = routes\n      .filter(route => route.includes(':account') && !route.includes(':keyspace'));\n      logger.debug('routes', routes.length);\n      let account;\n      try {\n         const dn = req.get('ssl_client_s_dn');\n         if (dn) {\n            const names = rquery.parseDn(dn);\n            if (names.o.match(/^[\\-_a-z]+$/)) {\n               account = names.o;\n            }\n            logger.debug('dn', {dn, names, account});\n         }\n      } catch (err) {\n         logger.error('cert', err);\n      }\n      const {sessionId} = req.cookies;\n      if (!account && sessionId) {\n         const [[time], session] = await rquery.redis.multiExecAsync(multi => {\n            multi.time();\n            multi.hgetall(rquery.adminKey('session', sessionId));\n         });\n         if (!session) {\n            throw new ValidationError({\n               message: 'Session expired or invalid',\n               hint: rquery.hints.login\n            });\n         }\n         logger.debug('admin command', {account, time, session});\n         const {id, role} = session;\n         if (role !== 'admin') {\n            throw new ValidationError({\n               message: 'Admin role required',\n               hint: rquery.hints.login\n            });\n         }\n         account = session.account;\n      }\n      const $ = rquery.getContentType(req) === 'html'? He : Hp;\n      const messages = account\n      ? [\n         $.a({href: '/keyspaces/' + account}, `List the keyspaces on your account`)\n      ]\n      : [\n         $.a({href: '/about'}, `About ${rquery.config.serviceLabel}`),\n         $.a({href: '/create-ephemeral'}, `Create an ephemeral keyspace via /create-ephemeral`),\n         $.a({\n            target: '_blank',\n            href: `https://telegram.me/${rquery.config.adminBotName}?start`\n         }, `Try \"@${rquery.config.adminBotName} /signup\"`)\n      ];\n      return {\n         messages\n         ,\n         common: routes\n         .filter(route => route)\n         .filter(route => !route.includes(':'))\n         .filter(route => ![\n            '/epoch', '/register-ephemeral'\n         ].includes(route))\n         .filter(route => route !== '/enroll-cert' || rquery.isSecureDomain(req))\n         .filter(route => route !== '/register-cert' || rquery.isSecureDomain(req))\n         .map(route => `${hostUrl}${route}`)\n         ,\n         misc: routes\n         .filter(route => route.includes(':') && !route.includes('telegram') && !/\\:(account|access)/.test(route))\n         .map(route => `${route}`)\n         ,\n         ephemeral: routes\n         .filter(route => route.includes('-ephemeral') && route !== '/register-ephemeral')\n         .map(route => `${route}`)\n         ,\n         telegram: routes\n         .filter(route => route.includes('telegram'))\n         .map(route => `${route}`)\n         ,\n         account: accountOnlyRoutes.map(route => `${route}`)\n         ,\n         accountKeyspace: routes\n         .filter(route => route.includes(':account') && route.includes(':keyspace/'))\n         .map(route => `${route}`)\n      };\n   }\n};\n"]}