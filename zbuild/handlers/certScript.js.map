{"version":3,"sources":["../../rquery/handlers/certScript.js"],"names":[],"mappings":"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","file":"certScript.js","sourcesContent":["\nconst logger = Loggers.create(module.filename);\n\nexport async function handleCertScriptHelp(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const curlAccount = `curl -s -E ${dir}/privcert.pem ${serviceUrl}/ak/${account}`;\n   const helpResult = [\n      ``,\n      `  To force archiving an existing ${dir}, add '?archive' to the URL:`,\n      ``,\n      `    curl -s ${serviceUrl}/${commandKey}/${account}?archive | bash`,\n      ``,\n      `  This will first move ${dir} to ${archive}/TIMESTAMP first.`,\n      ``,\n      `  See your privcerts: ${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      ``,\n      `  For example, create a keyspace called 'tmp10days' as follows:`,\n      `    ${curlAccount}/tmp10days/create-keyspace`,\n      ``,\n      `  Then try Redis commands on this keyspace for example:`,\n      `    ${curlAccount}/tmp10days/help`,\n      `    ${curlAccount}/tmp10days/set/mykey/myvalue`,\n      `    ${curlAccount}/tmp10days/get/mykey`,\n      ``,\n      `  Then in your browser, load 'privcert.p12' and try:`,\n      `    ${serviceUrl}/ak/${account}/tmp10days/help`,\n      ``,\n      `  For CLI convenience, install rhcurl bash script, as per instructions:`,\n      `    curl -s -L https://raw.githubusercontent.com/evanx/redishub/master/docs/install.rhcurl.txt`,\n      ``,\n   ];\n   return lodash.flatten(helpResult);\n}\n\nexport async function handleCertScript(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const role = req.params.role || req.query.role || 'admin';\n   const id = req.params.id || req.query.id || 'admin';\n   const CN = [config.certPrefix, account, role, req.params.clientId || req.query.clientId || id].join(':');\n   const OU = role;\n   const O = account;\n   const curlAccount = `curl -s -E \\${dir}/privcert.pem \\${serviceUrl}/ak/\\${account}`;\n   let result = [\n      `Curl this script and pipe into bash as follows to create key dir ~/.redishub/live:`,\n      `curl -s '${serviceUrl}/${commandKey}/${account}' | bash`,\n      ``,\n   ].map(line => `# ${line}`);\n   result = result.concat([\n      `(`,\n      `  set -u -e`,\n      `  account='${account}'`,\n      `  role='${role}'`,\n      `  id='${id}'`,\n      `  CN='${CN}' # unique cert name (certPrefix, account, role, id)`,\n      `  OU='${OU}' # role for this cert`,\n      `  O='${O}' # account name`,\n      `  dir=${dir} # must not exist, or be archived`,\n      `  # Note that the following files are created in this dir:`,\n      `  # account privkey.pem cert.pem privcert.pem privcert.p12 x509.txt cert.extract.txt`,\n      `  commandKey='${commandKey}'`,\n      `  serviceUrl='${serviceUrl}'`,\n      `  archive=${archive}`,\n      `  certWebhook=\"\\${serviceUrl}/create-account-telegram/\\${account}\"`,\n   ]);\n   if (Values.isDefined(req.query.archive)) {\n      result = result.concat([\n         `  if [ -d ${dir} ]`,\n         `  then`,\n         `    mkdir -p ${archive} # ensure dir exists`,\n         `    mv -n ${dir} ${archive}/\\`date +'%Y-%m-%dT%Hh%Mm%Ss%s'\\``,\n         `  fi`,\n      ]);\n   } else if (!lodash.isEmpty(req.query.dir) && !req.query.dir.includes(config.clientCertHomeDir)) {\n      logger.info('certScript dir', req.query.dir, config.clientCertHomeDir);\n   } else {\n      result = result.concat([\n         `  mkdir -p ${config.clientCertHomeDir} # ensure default dir exists`,\n      ]);\n   }\n   result = result.concat([\n      `  if [ -d ${dir} ]`,\n      `  then`,\n      `    echo \"Directory ${dir} already exists. Try add '?archive' query to the URL.\"`,\n      `  else`,\n      `    mkdir -p ${config.clientCertHomeDir}`,\n      `    cd \\$_`,\n      `    curl -s https://raw.githubusercontent.com/evanx/redishub/master/bin/cert-script.sh -O`,\n      `    cat cert-script.sh`,\n      `    sha1sum cert-script.sh`,\n      `    curl -s https://redishub.com/assets/cert-script.sh.sha1sum`,\n      `    echo 'Press Ctrl-C in the next 8 seconds if the above hashes do not match'`,\n      `    sleep 8`,\n      `    mkdir ${dir} && cd $_ # error exit if dir exists`,\n      `    source <(cat cert-script.sh)`,\n      `  fi`,\n      `)`,\n   ]);\n   result.push('');\n   return lodash.flatten(result);\n}\n"]}