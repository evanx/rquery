{"version":3,"sources":["../../rquery/handlers/certScript.js"],"names":[],"mappings":"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","file":"certScript.js","sourcesContent":["\nconst logger = Loggers.create(module.filename);\n\nexport async function handleCertScriptHelp(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const curlAccount = `curl -s -E ${dir}/privcert.pem ${serviceUrl}/ak/${account}`;\n   const helpResult = [\n      ``,\n      `  Find your privcerts: ${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      `  For example, create a keyspace called 'tmp10days' as follows:`,\n      `    ${curlAccount}/tmp10days/create-keyspace`,\n      `  Then try Redis commands on this keyspace for example:`,\n      `    ${curlAccount}/tmp10days/help`,\n      `    ${curlAccount}/tmp10days/set/mykey/myvalue`,\n      `    ${curlAccount}/tmp10days/get/mykey`,\n      ``,\n      `  In your browser, load 'privcert.p12' and try:`,\n      `    ${serviceUrl}/ak/${account}/tmp10days/help`,\n      ``,\n      `  For CLI convenience, install wscurl bash script, as per instructions:`,\n      `    curl -s -L ${config.docUrl}/install.wscurl.txt`,\n      ``,\n   ];\n   return lodash.flatten(helpResult);\n}\n\nexport async function handleCertScript(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const defaultDir = config.clientCertHomeDir + '/live';\n   const dir = req.query.dir || defaultDir;\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const telegramBot = config.adminBotName;\n   const account = req.params.account;\n   const role = req.params.role || req.query.role || 'admin';\n   const id = req.params.id || req.query.id || 'admin';\n   const CN = [config.certPrefix, account, role, req.params.clientId || req.query.clientId || id].join(':');\n   const OU = role;\n   const O = account;\n   const curlAccount = `curl -s -E \\${dir}/privcert.pem \\${serviceUrl}/ak/\\${account}`;\n   let result = [\n      `Curl this script and pipe into bash as follows to create key dir ${defaultDir}:`,\n      `curl -s 'https://${config.openHostname}/${commandKey}/${account}' | bash`,\n      ``,\n   ].map(line => `# ${line}`);\n   result = result.concat([\n      `( # create subshell to enable set -u -e`,\n      `  set -u -e # error exit if any undeclared vars or unhandled errors`,\n      `  account='${account}' # same as Telegram.org username`,\n      `  role='${role}' # role for the cert e.g. admin`,\n      `  id='${id}' # user/device id for the cert`,\n      `  CN='${CN}' # unique cert name (certPrefix, account, role, id)`,\n      `  OU='${OU}' # role for this cert`,\n      `  O='${O}' # account name`,\n      `  dir=${dir} # must not exist, or be archived`,\n      `  # Note that the following files are created in this dir:`,\n      `  # account privkey.pem cert.pem privcert.pem privcert.p12 x509.txt cert.extract.txt`,\n      `  commandKey='${commandKey}'`,\n      `  serviceUrl='${serviceUrl}' # for cert access control`,\n      `  telegramBot='${telegramBot}' # bot for granting cert access`,\n      `  archive='${archive}' # directory to archive existing live dir when ?archive`,\n      `  certWebhook='${serviceUrl}/create-account-telegram/${account}'`,\n   ]);\n   if (Values.isDefined(req.query.archive)) {\n      result = result.concat([\n         `  if [ -d ${dir} ]`,\n         `  then`,\n         `    mkdir -p ${archive} # ensure dir exists`,\n         `    mv -ni ${dir} ${archive}/\\`date +'%Y-%m-%dT%Hh%Mm%Ss%s'\\``,\n         `  fi`,\n      ]);\n   } else if (!lodash.isEmpty(req.query.dir) && !req.query.dir.includes(config.clientCertHomeDir)) {\n      logger.info('certScript dir', req.query.dir, config.clientCertHomeDir);\n   } else {\n      result = result.concat([\n         `  mkdir -p ${config.clientCertHomeDir} # ensure default dir exists`,\n      ]);\n   }\n   result = result.concat([\n      `  if [ -d ${dir} ]`,\n      `  then`,\n      `    echo \"Directory ${dir} already exists. Try add '?archive' query to the URL.\"`,\n      `  else`,\n      `    mkdir ${dir} && cd $_ # error exit if dir exists`,\n      `    curl -s https://raw.githubusercontent.com/webserva/webserva/master/bin/cert-script.sh -O`,\n      `    cat cert-script.sh`,\n      `    sha1sum cert-script.sh`,\n      `    curl -s https://open.webserva.com/assets/cert-script.sh.sha1sum`,\n      `    echo '1c04b96bde8f4f1f1b4c05c9c368204bd8b46e54'`,\n      `    echo 'Press Ctrl-C in the next 8 seconds if any of the above hashes differ'`,\n      `    sleep 8`,\n      `    source <(cat cert-script.sh)`,\n      `  fi`,\n      `)`\n   ]);\n   result.push('');\n   return lodash.flatten(result);\n}\n"]}