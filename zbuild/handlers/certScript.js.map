{"version":3,"sources":["../../rquery/handlers/certScript.js"],"names":[],"mappings":"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","file":"certScript.js","sourcesContent":["\nexport default async function handleCertScript(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const role = req.params.role || req.query.role || 'admin';\n   const id = req.params.id || req.query.id || 'admin';\n   const CN = [config.certPrefix, account, role, req.params.clientId || req.query.clientId || id].join(':');\n   const OU = role;\n   const O = account;\n   const curlAccount = `curl -s -E \\${dir}/privcert.pem \\${serviceUrl}/ak/\\${account}`;\n   const help = [\n      ``,\n      `To force archiving an existing \\${dir}, add '?archive' to the URL:`,\n      `  curl -s \\${serviceUrl}/\\${commandKey}/\\${account}?archive | bash`,\n      `This will first move \\${dir} to \\${archive}/TIMESTAMP`,\n      ``,\n      `Use: \\${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      ``,\n      `For example, create a keyspace called 'tmp10days' as follows:`,\n      `  ${curlAccount}/tmp10days/create-keyspace`,\n      ``,\n      `Then try Redis commands on this keyspace for example:`,\n      `  ${curlAccount}/tmp10days/help`,\n      `  ${curlAccount}/tmp10days/set/mykey/myvalue`,\n      `  ${curlAccount}/tmp10days/get/mykey`,\n      ``,\n      `Then in your browser, load 'privcert.p12' and try:`,\n      `   \\${serviceUrl}/ak/\\${account}/tmp10days/help`,\n      ``,\n      `For CLI convenience, install rhcurl bash script, as per instructions:`,\n      `  curl -s -L https://raw.githubusercontent.com/webserva/home/master/docs/install.rhcurl.txt`,\n      ``,\n   ];\n   let result = [\n      ``,\n      `Curl this script and pipe into bash as follows to create key dir ~/.redishub/live:`,\n      ``,\n      `curl -s '${serviceUrl}/${commandKey}/${account}' | bash`,\n      ``,\n   ].map(line => `# ${line}`);\n   result.push('');\n   result.push('(');\n   result = result.concat([\n      `  account='${account}'`,\n      `  role='${role}'`,\n      `  id='${id}'`,\n      ``,\n      `  CN='${CN}' # unique cert name (certPrefix, account, role, id)`,\n      `  OU='${OU}' # role for this cert`,\n      `  O='${O}' # account name`,\n      ``,\n      `  dir=${dir} # must not exist, or be archived`,\n      `  # Note that the following files are created in this dir:`,\n      `  # account privkey.pem cert.pem privcert.pem privcert.p12 x509.txt cert.extract.txt`,\n      `  commandKey='${commandKey}'`,\n      `  serviceUrl='${serviceUrl}'`,\n      `  archive=${archive}`,\n      `  certWebhook=\"\\${serviceUrl}/create-account-telegram/\\${account}\"`,\n      ``,\n   ]);\n   if (Values.isDefined(req.query.archive)) {\n      result = result.concat([\n         `  mkdir -p \\${archive} # ensure dir exists`,\n         `  mv -n \\${dir} \\${archive}/\\`date +'%Y-%m-%dT%Hh%Mm%Ss%s'\\``,\n      ]);\n   } else if (!lodash.isEmpty(req.query.dir) && !req.query.dir.match(/\\.redishub/)) {\n   } else {\n      result = result.concat([\n         `  mkdir -p ~/.redishub # ensure dir exists`,\n      ]);\n   }\n   result = result.concat([\n      ``,\n      `  # TODO curl following from static stable versioned script from https://raw.githubusercontent.com/webserva/home`,\n      `  if [ ! -d \\${dir} ]`,\n      `  then`,\n      `    echo \"Directory \\${dir} already exists. Try add '?archive' query to the URL.\"`,\n      `  else # directory does not exist`,\n      `    mkdir \\${dir}`,\n      `    cd $_`,\n      `    echo \"\\${account}\" > account`,\n      `    if openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\\`,\n      `      -subj \"/CN=\\${CN}/OU=\\${OU}/O=\\${O}\" \\\\`,\n      `      -keyout privkey.pem -out cert.pem`,\n      `    then`,\n      `      openssl x509 -text -in cert.pem > x509.txt`,\n      `      grep 'CN=' x509.txt`,\n      `      cat cert.pem | head -3 | tail -1 | tail -c-12 > cert.extract.pem`,\n      `      cat privkey.pem cert.pem > privcert.pem`,\n      `      openssl x509 -text -in privcert.pem | grep 'CN='`,\n      `      curl -s -E privcert.pem \"$certWebhook\" ||`,\n      `        echo \"Registered account \\${account} ERROR $?\"`,\n      `      if ! openssl pkcs12 -export -out privcert.p12 -inkey privkey.pem -in cert.pem`,\n      `      then`,\n      `        echo; pwd; ls -l`,\n      `        echo \"ERROR $?: openssl pkcs12 ($PWD)\"`,\n      `        false # error code 1`,\n      `      else`,\n      `        echo \"Exported $PWD/privcert.p12 OK\"`,\n      `        pwd; ls -l`,\n      `        sleep 2`,\n      ]);\n      result = result.concat(help.map(line => `        echo \"${line}\"`));\n      result = result.concat([\n      `        curl -s https://raw.githubusercontent.com/webserva/home/master/docs/install.rhcurl.txt`,\n      `        certExtract=\\`cat cert.extract.pem\\``,\n      `        echo \"Try https://telegram.me/redishub_bot '/grantcert \\$certExtract'\"`,\n      `      fi`,\n      `    fi`,\n      `  fi`,\n      ')',\n   ]);\n   result.push('');\n   return lodash.flatten(result);\n}\n"]}