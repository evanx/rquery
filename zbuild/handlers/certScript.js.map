{"version":3,"sources":["../../rquery/handlers/certScript.js"],"names":[],"mappings":"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","file":"certScript.js","sourcesContent":["\n\nexport async function handleCertScriptHelp(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const curlAccount = `curl -s -E ${dir}/privcert.pem ${serviceUrl}/ak/${account}`;\n   const help = [\n      ``,\n      `To force archiving an existing ${dir}, add '?archive' to the URL:`,\n      `  curl -s ${serviceUrl}/${commandKey}/${account}?archive | bash`,\n      `This will first move ${dir} to ${archive}/TIMESTAMP`,\n      ``,\n      `Use: ${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      ``,\n      `For example, create a keyspace called 'tmp10days' as follows:`,\n      `  ${curlAccount}/tmp10days/create-keyspace`,\n      ``,\n      `Then try Redis commands on this keyspace for example:`,\n      `  ${curlAccount}/tmp10days/help`,\n      `  ${curlAccount}/tmp10days/set/mykey/myvalue`,\n      `  ${curlAccount}/tmp10days/get/mykey`,\n      ``,\n      `Then in your browser, load 'privcert.p12' and try:`,\n      `   ${serviceUrl}/ak/${account}/tmp10days/help`,\n      ``,\n      `For CLI convenience, install rhcurl bash script, as per instructions:`,\n      `  curl -s -L https://raw.githubusercontent.com/evanx/redishub/master/docs/install.rhcurl.txt`,\n      ``,\n   ];\n   return lodash.flatten(result);\n}\n\nexport async function handleCertScript(req, res, reqx, {config}) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || config.clientCertHomeDir + '/live';\n   const archive = req.query.archive || config.clientCertHomeDir + '/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const role = req.params.role || req.query.role || 'admin';\n   const id = req.params.id || req.query.id || 'admin';\n   const CN = [config.certPrefix, account, role, req.params.clientId || req.query.clientId || id].join(':');\n   const OU = role;\n   const O = account;\n   const curlAccount = `curl -s -E \\${dir}/privcert.pem \\${serviceUrl}/ak/\\${account}`;\n   const help = [\n      ``,\n      `To force archiving an existing \\${dir}, add '?archive' to the URL:`,\n      `  curl -s \\${serviceUrl}/\\${commandKey}/\\${account}?archive | bash`,\n      `This will first move \\${dir} to \\${archive}/TIMESTAMP`,\n      ``,\n      `Use: \\${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      ``,\n      `For example, create a keyspace called 'tmp10days' as follows:`,\n      `  ${curlAccount}/tmp10days/create-keyspace`,\n      ``,\n      `Then try Redis commands on this keyspace for example:`,\n      `  ${curlAccount}/tmp10days/help`,\n      `  ${curlAccount}/tmp10days/set/mykey/myvalue`,\n      `  ${curlAccount}/tmp10days/get/mykey`,\n      ``,\n      `Then in your browser, load 'privcert.p12' and try:`,\n      `   \\${serviceUrl}/ak/\\${account}/tmp10days/help`,\n      ``,\n      `For CLI convenience, install rhcurl bash script, as per instructions:`,\n      `  curl -s -L https://raw.githubusercontent.com/webserva/home/master/docs/install.rhcurl.txt`,\n      ``,\n   ];\n   let result = [\n      ``,\n      `Curl this script and pipe into bash as follows to create key dir ~/.redishub/live:`,\n      ``,\n      `curl -s '${serviceUrl}/${commandKey}/${account}' | bash`,\n      ``,\n   ].map(line => `# ${line}`);\n   result.push('');\n   result.push('(');\n   result = result.concat([\n      `  account='${account}'`,\n      `  role='${role}'`,\n      `  id='${id}'`,\n      ``,\n      `  CN='${CN}' # unique cert name (certPrefix, account, role, id)`,\n      `  OU='${OU}' # role for this cert`,\n      `  O='${O}' # account name`,\n      ``,\n      `  dir=${dir} # must not exist, or be archived`,\n      `  # Note that the following files are created in this dir:`,\n      `  # account privkey.pem cert.pem privcert.pem privcert.p12 x509.txt cert.extract.txt`,\n      `  commandKey='${commandKey}'`,\n      `  serviceUrl='${serviceUrl}'`,\n      `  archive=${archive}`,\n      `  certWebhook=\"\\${serviceUrl}/create-account-telegram/\\${account}\"`,\n      ``,\n   ]);\n   if (Values.isDefined(req.query.archive)) {\n      result = result.concat([\n         `  mkdir -p \\${archive} # ensure dir exists`,\n         `  mv -n \\${dir} \\${archive}/\\`date +'%Y-%m-%dT%Hh%Mm%Ss%s'\\``,\n      ]);\n   } else if (!lodash.isEmpty(req.query.dir) && !req.query.dir.match(/\\.redishub/)) {\n   } else {\n      result = result.concat([\n         `  mkdir -p ~/.redishub # ensure dir exists`,\n      ]);\n   }\n   result = result.concat([\n      `  curl -s https://raw.githubusercontent.com/evanx/redishub/master/bin/cert-script.sh -O`,\n      `  cat cert-script.sh`,\n      `  curl -s https://redishub.com/assets/cert-script.sh.sha1sum`,\n      `  sha1sum cert-script.sh`,\n      `  echo 'Press Ctrl-C to abort, Enter to execute'`,\n      `  read _continue`,\n      `  source <(cat cert-script.sh)`,\n      `)`,\n   ]);\n   result.push('');\n   return lodash.flatten(result);\n}\n"]}