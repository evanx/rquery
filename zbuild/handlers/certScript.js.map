{"version":3,"sources":["../../rquery/handlers/certScript.js"],"names":[],"mappings":"2LAEe,iBAAgB,GAAhB,CAAqB,GAArB,CAA0B,IAA1B,CAAgC,MAAhC,MAIN,GAJM,CAKN,OALM,CAMN,SANM,CAYN,UAZM,CAaN,UAbM,CAcN,OAdM,CAeN,IAfM,CAgBN,EAhBM,CAiBN,EAjBM,CAkBN,CAlBM,CAmBN,IAnBM,CAoCR,MApCQ,qHACR,IAAI,KAAJ,CAAU,GAAV,EAAiB,CAAC,EAAD,CAAK,GAAL,CAAU,IAAV,EAAgB,QAAhB,CAAyB,IAAI,KAAJ,CAAU,GAAnC,CADT,gCAEH,IAAI,eAAJ,CAAoB,wBAApB,CAFG,QAIN,GAJM,CAIA,IAAI,KAAJ,CAAU,GAAV,EAAiB,kBAJjB,CAKN,OALM,CAKI,IAAI,KAAJ,CAAU,OAAV,EAAqB,qBALzB,CAMN,SANM,CAMM,OAAO,SAAP,CAAiB,IAAI,KAAJ,CAAU,OAA3B,CANN,MAOR,WAAa,IAAI,KAAJ,CAAU,GAPf,6BAQJ,IAAI,KAAJ,CAAU,GAAV,CAAc,KAAd,CAAoB,8BAApB,CARI,+BASA,IAAI,eAAJ,CAAoB,2BAApB,CATA,QAYN,UAZM,CAYO,KAAK,OAAL,CAAa,GAZpB,CAaN,UAbM,CAaO,OAAO,OAbd,CAcN,OAdM,CAcI,IAAI,MAAJ,CAAW,OAdf,CAeN,IAfM,CAeC,IAAI,MAAJ,CAAW,IAAX,EAAmB,IAAI,KAAJ,CAAU,IAA7B,EAAqC,OAftC,CAgBN,EAhBM,CAgBD,CAAC,IAAD,CAAO,OAAP,CAAgB,IAAhB,CAAsB,IAAI,MAAJ,CAAW,QAAX,EAAuB,IAAI,KAAJ,CAAU,QAAjC,EAA6C,UAAnE,EAA+E,IAA/E,CAAoF,GAApF,CAhBC,CAiBN,EAjBM,CAiBD,IAjBC,CAkBN,CAlBM,CAkBF,OAlBE,CAmBN,IAnBM,CAmBC,8sBAnBD,CAoCR,MApCQ,CAoCC,sEAIG,UAJH,KAIiB,UAJjB,KAI+B,OAJ/B,YAKX,GALW,CAKP,2BAAa,IAAb,EALO,CApCD,CA0CZ,OAAO,IAAP,CAAY,EAAZ,EACA,OAAO,IAAP,CAAY,GAAZ,EACA,OAAS,OAAO,MAAP,CAAc,UACX,GADW,4LAIH,UAJG,wBAKH,UALG,qBAMN,OANM,mBAOP,OAPO,WAQX,EARW,gEASX,EATW,oCAUZ,CAVY,2FAAd,CAAT,CAcA,GAAI,OAAO,SAAP,CAAiB,IAAI,KAAJ,CAAU,OAA3B,CAAJ,CAAyC,CACtC,OAAS,OAAO,MAAP,CAAc,0GAAd,CAAT,CAIF,CALD,KAKO,GAAI,CAAC,OAAO,OAAP,CAAe,IAAI,KAAJ,CAAU,GAAzB,CAAL,CAAoC,CAC1C,CADM,KACA,CACJ,OAAS,OAAO,MAAP,CAAc,8CAAd,CAAT,CAGF,CACD,OAAS,OAAO,MAAP,CAAc,02BAAd,CAAT,CAyBA,OAAS,OAAO,MAAP,CAAc,KAAK,GAAL,CAAS,qCAAuB,IAAvB,MAAT,CAAd,CAAT,CACA,OAAS,OAAO,MAAP,CAAc,iHAIpB,GAJoB,CAAd,CAAT,CAMA,OAAO,IAAP,CAAY,EAAZ,EArGY,gCAsGL,OAAO,OAAP,CAAe,MAAf,CAtGK,+D","file":"certScript.js","sourcesContent":["\n\nexport default async function (req, res, reqx, config) {\n   if (req.query.dir && ['', '.', '..'].includes(req.query.dir)) {\n      throw new ValidationError('Empty or invalid \"dir\"');\n   }\n   const dir = req.query.dir || '~/.redishub/live';\n   const archive = req.query.archive || '~/.redishub/archive';\n   const isArchive = Values.isDefined(req.query.archive);\n   if (isArchive && req.query.dir) {\n      if (!req.query.dir.match(/^[~\\/a-z0-9\\.]+(live|cert)$/i)) {\n         throw new ValidationError('Invalid \"dir\" for archive');\n      }\n   }\n   const commandKey = reqx.command.key;\n   const serviceUrl = config.hostUrl;\n   const account = req.params.account;\n   const role = req.params.role || req.query.role || 'admin';\n   const CN = ['rh', account, role, req.params.clientId || req.query.clientId || 'original'].join(':');\n   const OU = role;\n   const O = account;\n   const help = [\n      `To force archiving an existing \\${dir}, add '?archive' to the URL:`,\n      `   curl -s \\${serviceUrl}/\\${commandKey}/\\${account}?archive | bash`,\n      `This will first move \\${dir} to \\${archive}/TIMESTAMP`,\n      ``,\n      `Use: \\${dir}/privcert.pem (curl) and/or privcert.p12 (browser)`,\n      ``,\n      `For example, Create a keyspace called 'tmp10days' as follows:`,\n      `   curl -s -E ~/.redishub/live/privcert.pem \\${serviceUrl}/ak/\\${account}/tmp10days/create-keyspace`,\n      ``,\n      `See help for keyspace 'tmp10days' in your browser as follows:`,\n      `   \\${serviceUrl}/ak/\\${account}/tmp10days/help`,\n      ``,\n      `For CLI convenience, install rhcurl bash script, as per instructions:`,\n      `  curl -s -L https://raw.githubusercontent.com/evanx/redishub/master/docs/install.rhcurl.txt`,\n      ``,\n   ];\n   let result = [\n      ``,\n      `Curl this script and pipe into bash as follows:`,\n      ``,\n      `  curl -s ${serviceUrl}/${commandKey}/${account} | bash`,\n   ].map(line => `# ${line}`);\n   result.push('');\n   result.push('(');\n   result = result.concat([\n      `  dir=${dir} # must not exist, or be archived`,\n      `  # Note that the following files are created in this dir:`,\n      `  #   account privkey.pem cert.pem privcert.pem privcert.p12 x509.txt`,\n      `  commandKey='${commandKey}'`,\n      `  serviceUrl='${serviceUrl}'`,\n      `  account='${account}'`,\n      `  archive=${archive}`,\n      `  CN='${CN}' # unique client ID (service, account, role, id)`,\n      `  OU='${OU}' # role for this cert`,\n      `  O='${O}' # account name`,\n      `  certWebhook=\"\\${serviceUrl}/create-account-telegram/\\${account}\"`,\n      ``,\n   ]);\n   if (Values.isDefined(req.query.archive)) {\n      result = result.concat([\n         `  mkdir -p \\${archive} # ensure dir exists`,\n         `  mv -n \\${dir} \\${archive}/\\`date +'%Y-%M-%dT%Hh%Mm%Ss%s'\\``,\n      ]);\n   } else if (!lodash.isEmpty(req.query.dir)) {\n   } else {\n      result = result.concat([\n         `  mkdir -p ~/.redishub # ensure dir exists`,\n      ]);\n   }\n   result = result.concat([\n      ``,\n      `  if mkdir \\${dir} && cd $_`,\n      `  then # mkdir ok so directory did not exist`,\n      `    echo \"\\${account}\" > account`,\n      `    if openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\\`,\n      `      -subj \"/CN=\\${CN}/OU=\\${OU}/O=\\${O}\" \\\\`,\n      `      -keyout privkey.pem -out cert.pem`,\n      `    then`,\n      `      openssl x509 -text -in cert.pem > x509.txt`,\n      `      grep 'CN=' x509.txt`,\n      `      cat privkey.pem cert.pem > privcert.pem`,\n      `      openssl x509 -text -in privcert.pem | grep 'CN='`,\n      `      curl -s -E privcert.pem \"$certWebhook\" ||`,\n      `        echo \"Registered account \\${account} ERROR $?\"`,\n      `      if ! openssl pkcs12 -export -out privcert.p12 -inkey privkey.pem -in cert.pem`,\n      `      then`,\n      `        echo; pwd; ls -l`,\n      `        echo \"ERROR $?: openssl pkcs12 ($PWD)\"`,\n      `        false # error code 1`,\n      `      else`,\n      `        echo; pwd; ls -l`,\n      `        echo \"Exported $PWD/privcert.p12 OK\"`,\n      `      fi`,\n   ]);\n   result = result.concat(help.map(line => `      echo \"${line}\"`));\n   result = result.concat([\n      `      curl -s https://raw.githubusercontent.com/evanx/redishub/master/docs/install.rhcurl.txt`,\n      `    fi`,\n      `  fi`,\n      ')',\n   ]);\n   result.push('');\n   return lodash.flatten(result);\n}\n"]}