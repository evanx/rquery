{"version":3,"sources":["../../rquery/handlers/registerCert.js"],"names":[],"mappings":"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","file":"registerCert.js","sourcesContent":["\nconst logger = Loggers.create(module.filename);\nconst rquery = global.rquery;\n\nexport default async function registerCert(req, res, reqx) {\n   const cert = rquery.getClientCert(req);\n   if (!cert) throw new ValidationError({\n      status: 403,\n      message: 'No client cert',\n      hint: rquery.hints.signup\n   });\n   const dn = rquery.parseCertDn(req);\n   if (!dn.ou) throw new ValidationError({\n      status: 400,\n      message: 'No client cert OU name',\n      hint: rquery.hints.signup\n   });\n   const [matching, account, role, id] = dn.cn.split(':');\n   logger.debug('CN', matching);\n   if (!matching) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Cert CN mismatch',\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.ou !== role) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Cert OU/role mismatch',\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.o !== account) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Cert O/account mismatch',\n         hint: rquery.hints.signup\n      });\n   }\n   const accountKey = rquery.adminKey('account', account);\n   const grantKey = rquery.adminKey('telegram', 'user', account, 'grantcert');\n   const certDigest = rquery.digestPem(cert);\n   const shortDigest = certDigest.slice(-12);\n   const pemExtract = rquery.extractPem(cert);\n   logger.debug(Loggers.values({certDigest, shortDigest, pemExtract}, 'cert'));\n   const [granted, sismember] = await rquery.redis.multiExecAsync(multi => {\n      multi.get(grantKey);\n      multi.sismember(rquery.adminKey('account', account, 'certs'), certDigest);\n   });\n   if (sismember) {\n      throw new ValidationError({\n         status: 200,\n         message: 'Cert granted',\n         hint: rquery.hints.routes\n      });\n   }\n   if (!granted) {\n      throw new ValidationError({message: 'Cert must be granted via @redishub_bot',\n         status: 403,\n         hint: {\n            message: [\n               `Try @redishub_bot \"/grantcert ${shortDigest}\"`,\n               `e.g. via https://web.telegram.org,`,\n            ].join(' '),\n            clipboard: `@redishub_bot /grantcert ${shortDigest}`,\n            url: `https://telegram.me/redishub_bot#grantcert-${shortDigest}`\n         }\n      });\n   }\n   if (granted.indexOf(shortDigest) < 0 &&\n   certDigest.indexOf(granted) < 0 &&\n   pemExtract != granted) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Granted cert not matching: ' + shortDigest,\n         hint: {\n            message: `Try @redishub_bot \"/grantcert ${shortDigest}`\n            + ` from the authoritative Telegram account`\n            + ` e.g. via https://web.telegram.org`\n            ,\n            clipboard: `@redishub_bot /grantcert ${shortDigest}`,\n            url: `https://telegram.me/redishub_bot#grantcert-${shortDigest}`\n         }\n      });\n   }\n   const [del, sadd] = await rquery.redis.multiExecAsync(multi => {\n      multi.del(grantKey);\n      multi.sadd(rquery.adminKey('account', account, 'certs'), certDigest);\n   });\n   if (!sadd) {\n      logger.debug('certs sadd');\n   }\n   if (!del) {\n      logger.warn('certs grant del');\n   }\n   return {account};\n}\n"]}