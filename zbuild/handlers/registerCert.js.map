{"version":3,"sources":["../../rquery/handlers/registerCert.js"],"names":[],"mappings":"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","file":"registerCert.js","sourcesContent":["\nconst logger = Loggers.create(module.filename);\nconst rquery = global.rquery;\n\nexport default async function registerCert(req, res, reqx) {\n   const cert = rquery.getClientCert(req);\n   if (!cert) throw new ValidationError({\n      status: 403,\n      message: 'No client cert',\n      hint: rquery.hints.signup\n   });\n   const certFingerprint = rquery.getClientCertFingerprint(req);\n   if (!certFingerprint) throw new ValidationError({\n      status: 500,\n      message: 'No client cert certFingerprint'\n   });\n   const dn = rquery.parseCertDn(req);\n   if (!dn.ou) throw new ValidationError({\n      status: 400,\n      message: 'No client cert OU name',\n      hint: rquery.hints.signup\n   });\n   const [type, account, role, id] = dn.cn.split(':');\n   const clientId = [dn.cn, '#', certFingerprint.slice(0, 6), ':' + certFingerprint.slice(-6)].join('');\n   logger.debug('CN', dn, type, {account, role, id}, {clientId});\n   if (type !== 'ws' || !account || !role || !id) {\n      throw new ValidationError({\n         status: 400,\n         message: `Invalid cert CN. Expect: 'ws:account:role:id'`,\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.ou !== role) {\n      throw new ValidationError({\n         status: 400,\n         message: `Cert OU/role mismatch. Expect role as per CN.`,\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.o !== account) {\n      throw new ValidationError({\n         status: 400,\n         message: `Cert O/account mismatch. Expect account as per CN.`,\n         hint: rquery.hints.signup\n      });\n   }\n   const accountKey = rquery.adminKey('account', account);\n   const grantKey = rquery.adminKey('telegram', 'user', account, 'grant');\n   const [granted, sismember] = await rquery.redis.multiExecAsync(multi => {\n      multi.get(grantKey);\n      multi.sismember(rquery.adminKey('account', account, 'certs'), clientId);\n   });\n   if (sismember) {\n      throw new ValidationError({\n         status: 200,\n         message: 'Cert already granted',\n         hint: rquery.hints.routes\n      });\n   }\n   if (!granted) {\n      throw new ValidationError({message: `Cert must be granted via https://telegram.me/${rquery.config.adminBotName}`,\n         status: 403,\n         hint: {\n            message: [\n               `/grant ${clientId}`\n            ].join(' '),\n            clipboard: `/grant ${clientId}`,\n            url: `https://telegram.me/${rquery.config.adminBotName}?start`\n         }\n      });\n   }\n   if (clientId.indexOf(granted) < 0) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Granted cert not matching: ' + clientId,\n         hint: {\n            message: `Try @${rquery.config.adminBotName} \"/grant ${clientId}\"`\n            + ` from the authoritative Telegram account`\n            + ` e.g. via https://web.telegram.org`\n            ,\n            clipboard: `/grant ${clientId}`,\n            url: `https://telegram.me/${rquery.config.adminBotName}?start`\n         }\n      });\n   }\n   const [del, sadd, hmset] = await rquery.redis.multiExecAsync(multi => {\n      multi.del(grantKey);\n      multi.sadd(rquery.adminKey('account', account, 'certs'), clientId);\n      multi.hmset(rquery.adminKey('account', account, 'cert', clientId), {account, role, id});\n   });\n   if (!sadd) {\n      logger.debug('certs sadd');\n   }\n   if (!del) {\n      logger.warn('certs grant del');\n   }\n   return {account};\n}\n"]}