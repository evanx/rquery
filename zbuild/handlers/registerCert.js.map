{"version":3,"sources":["../../rquery/handlers/registerCert.js"],"names":[],"mappings":"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","file":"registerCert.js","sourcesContent":["\nconst logger = Loggers.create(module.filename);\nconst rquery = global.rquery;\n\nexport default async function registerCert(req, res, reqx) {\n   const cert = rquery.getClientCert(req);\n   if (!cert) throw new ValidationError({\n      status: 403,\n      message: 'No client cert',\n      hint: rquery.hints.signup\n   });\n   const certFingerprint = rquery.getClientCertFingerprint(req);\n   if (!certFingerprint) throw new ValidationError({\n      status: 500,\n      message: 'No client cert certFingerprint'\n   });\n   const dn = rquery.parseCertDn(req);\n   if (!dn.ou) throw new ValidationError({\n      status: 400,\n      message: 'No client cert OU name',\n      hint: rquery.hints.signup\n   });\n   const [type, account, role, id] = dn.cn.split(':');\n   logger.debug('CN', dn, type, {account, role, id}, {certFingerprint});\n   if (type !== 'ws' || !account || !role || !id) {\n      throw new ValidationError({\n         status: 400,\n         message: `Invalid cert CN. Expect: 'ws:account:role:id'`,\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.ou !== role) {\n      throw new ValidationError({\n         status: 400,\n         message: `Cert OU/role mismatch. Expect role as per CN.`,\n         hint: rquery.hints.signup\n      });\n   }\n   if (dn.o !== account) {\n      throw new ValidationError({\n         status: 400,\n         message: `Cert O/account mismatch. Expect account as per CN.`,\n         hint: rquery.hints.signup\n      });\n   }\n   const accountKey = rquery.adminKey('account', account);\n   const grantKey = rquery.adminKey('telegram', 'user', account, 'grant');\n   const [granted, sismember] = await rquery.redis.multiExecAsync(multi => {\n      multi.get(grantKey);\n      multi.sismember(rquery.adminKey('account', account, 'certs'), certFingerprint);\n   });\n   if (sismember) {\n      throw new ValidationError({\n         status: 200,\n         message: 'Cert already granted',\n         hint: rquery.hints.routes\n      });\n   }\n   if (!granted) {\n      throw new ValidationError({message: `Cert must be granted via https://telegram.me/${rquery.config.adminBotName}`,\n         status: 403,\n         hint: {\n            message: [\n               `/grant ${certFingerprint}`\n            ].join(' '),\n            clipboard: `/grant ${certFingerprint}`,\n            url: `https://telegram.me/${rquery.config.adminBotName}?start`\n         }\n      });\n   }\n   if (certFingerprint.indexOf(granted) < 0) {\n      throw new ValidationError({\n         status: 400,\n         message: 'Granted cert not matching: ' + certFingerprint,\n         hint: {\n            message: `Try @${rquery.config.adminBotName} \"/grant ${certFingerprint}\"`\n            + ` from the authoritative Telegram account`\n            + ` e.g. via https://web.telegram.org`\n            ,\n            clipboard: `/grant ${certFingerprint}`,\n            url: `https://telegram.me/${rquery.config.adminBotName}?start`\n         }\n      });\n   }\n   const [del, sadd, hmset] = await rquery.redis.multiExecAsync(multi => {\n      multi.del(grantKey);\n      multi.sadd(rquery.adminKey('account', account, 'certs'), certFingerprint);\n      multi.hmset(rquery.adminKey('account', account, 'cert', certFingerprint), {account, role, id});\n   });\n   if (!sadd) {\n      logger.debug('certs sadd');\n   }\n   if (!del) {\n      logger.warn('certs grant del');\n   }\n   return {account};\n}\n"]}