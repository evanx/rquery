{"version":3,"sources":["../lib/ClassPreprocessor.js"],"names":[],"mappings":"uOAQO,iBAAyB,UAAzB,CAAqC,KAArC,MAKE,QALF,CAOE,UAPF,CAYE,UAZF,CAaE,KAbF,CAcE,OAdF,CAgBA,cAhBA,CAiBA,UAjBA,gH;AACJ,OAAO,KAAP,CAAa,WAAb,CAA0B,UAA1B,EADI,GAEC,QAAQ,IAAR,CAAa,UAAb,CAFD,+BAGK,gBAAkB,UAHvB,QAKE,QALF,CAKa,UALb,wBAME,MAAM,MAAN,CAAa,QAAb,CANF,QAOE,UAPF,CAOe,WAAW,OAAX,CAAmB,iBAAnB,CAAsC,QAAtC,CAPf,CAQJ,WAAa,WAAW,OAAX,CAAmB,IAAnB,CAAyB,OAAO,QAAP,CAAgB,OAAhB,CAAwB,gBAAxB,CAA0C,EAA1C,CAAzB,CAAb,CACA,GAAI,CAAC,QAAQ,IAAR,CAAa,UAAb,CAAL,CAA+B,CAC5B,WAAa,WAAa,KAA1B,CACF,CACK,UAZF,CAYe,aAAG,YAAH,CAAgB,UAAhB,EAA4B,QAA5B,EAZf,CAaE,KAbF,kBAa0B,MAAM,IAAN,CAAW,GAAX,CAb1B,oBAcE,OAdF,eAeJ,OAAO,KAAP,CAAa,OAAb,CAAsB,KAAtB,CAA6B,OAA7B,EACI,cAhBA,CAgBiB,WAAW,OAAX,CAAmB,IAAI,MAAJ,CAAW,KAAX,CAAkB,GAAlB,CAAnB,CAA2C,OAA3C,CAhBjB,CAiBA,UAjBA,CAiBa,KAjBb,CAkBJ,eAAiB,eAAe,KAAf,CAAqB,IAArB,EAA2B,GAA3B,CAA+B,SAAC,IAAD,CAAO,KAAP,CAAiB,CAC9D,GAAI,mBAAmB,IAAnB,CAAwB,IAAxB,CAAJ,CAAmC,CAChC,WAAa,IAAb,CACF,CAFD,KAEO,GAAI,OAAS,UAAT,EAAuB,aAAa,IAAb,CAAkB,IAAlB,CAA3B,CAAoD,CACxD,OAAO,wCAAsC,MAAQ,CAA9C,OAAP,CACF,CACD,IAAM,eAAiB,KAAK,OAAL,CAAa,cAAb,YAAsC,MAAQ,CAA9C,OAAvB,CACA,OAAO,MAAP,CAAc,MAAd,CAAsB,KAAtB,CAA6B,cAA7B,EACA,OAAO,cAAP,CACF,CATgB,EASd,IATc,CAST,IATS,CAAjB,CAUA,OAAO,MAAP,CAAc,QAAd,CAAwB,cAAxB,EACA,aAAG,aAAH,CAAiB,UAAjB,CAA6B,cAA7B,EACA,OAAO,KAAP,CAAa,YAAb,CAA2B,UAA3B,EA9BI,gCA+BG,UA/BH,+D,mBAAe,S,gDAPtB,sB,qCACA,8B,6CACA,0B,yCACA,8B,IAAY,K,+VAEZ,IAAM,OAAS,QAAQ,MAAR,CAAe,OAAO,QAAtB,CAAgC,MAAhC,CAAf","file":"ClassPreprocessor.js","sourcesContent":["\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport pathl from 'path';\nimport * as Files from './Files';\n\nconst logger = Loggers.create(module.filename, 'info');\n\nexport async function buildSync(sourceFile, names) { // regex this dereferencing on names\n   logger.debug('buildSync', sourceFile);\n   if (!/^\\.\\//.test(sourceFile)) {\n      throw 'unsupported: ' + sourceFile;\n   }\n   const buildDir = './build/';\n   await Files.mkdirp(buildDir);\n   const targetFile = sourceFile.replace(/^(\\.\\/[a-z]*)\\//, buildDir);\n   sourceFile = sourceFile.replace(/^./, module.filename.replace(/\\/lib\\/\\w*\\.js/, ''));\n   if (!/\\.js$/.test(sourceFile)) {\n      sourceFile = sourceFile + '.js';\n   }\n   const sourceCode = fs.readFileSync(sourceFile).toString();\n   const regex = `([^a-z\\\\.'])(${names.join('|')})([^-A-Za-z:'])`;\n   const replace = `\\$1this.\\$2$3`;\n   logger.debug('regex', regex, replace);\n   let translatedCode = sourceCode.replace(new RegExp(regex, 'g'), replace);\n   let loggerLine = false;\n   translatedCode = translatedCode.split('\\n').map((line, index) => {\n      if (/^\\s+this\\.logger/.test(line)) {\n         loggerLine = true;\n      } else if (false && loggerLine && /\\)\\s+{\\s*$/.test(line)) {\n         return line + `\\nthis.logger.debug('line', ${index + 1});`;\n      }\n      const translatedLine = line.replace(/\\$lineNumber/, `'line:${index + 1}'`);\n      logger.ndebug('line', index, translatedLine);\n      return translatedLine;\n   }).join('\\n');\n   logger.ndebug('source', translatedCode);\n   fs.writeFileSync(targetFile, translatedCode);\n   logger.debug('targetFile', targetFile);\n   return targetFile;\n}\n"]}