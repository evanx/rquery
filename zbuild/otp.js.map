{"version":3,"sources":["../rquery/otp.js"],"names":[],"mappings":"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","file":"otp.js","sourcesContent":["\nimport expressLib from 'express';\nimport marked from 'marked';\nimport crypto from 'crypto';\nimport CSON from 'season';\nimport base32 from 'thirty-two';\nimport speakeasy from 'speakeasy';\nimport otp from 'otplib/lib/totp';\nimport concatStream from 'concat-stream';\n\nimport * as Files from './Files';\nimport * as Express from './Express';\n\nconst unsupportedAuth = ['twitter.com', 'github.com', 'gitlab.com', 'bitbucket.org'];\nconst supportedAuth = ['telegram.org'];\n\nexport default class {\n\n   async init() {\n      this.logger.info('init');\n   }\n\n   async start() {\n      this.redis = redisLib.createClient(this.config.redisUrl);\n      this.expressApp = expressLib();\n      this.expressApp.use((req, res, next) => {\n         req.pipe(concatStream(content => {\n            req.body = content;\n            next();\n         }));\n      });\n      this.addRoutes();\n      if (this.config.disableTelegramHook) {\n         this.logger.warn('telegram webhook disabled');\n      } else {\n         this.addTelegramWebhook();\n      }\n      this.expressApp.use((req, res) => this.sendErrorRoute(req, res));\n      this.expressServer = await Express.listen(this.expressApp, this.config.port);\n      this.logger.info('listen', this.config.port, Express.getRoutes(this.expressApp), this.expressServer);\n   }\n\n   sendErrorRoute(req, res) {\n      try {\n         if (/^\\/favicon.ico$/.test(req.path)) {\n            res.status(404).send(`Invalid path: ${req.path}\\n`);\n            return;\n         }\n         const [matching, account, keyspace] = req.path.match(/^\\/ak\\/([a-z]+)\\/([^\\/]+)\\//);\n         this.logger.debug('sendErrorRoute', req.path,  account, keyspace, this.isBrowser(req));\n         if (this.isBrowser(req)) {\n            let redirectPath = '/routes';\n            if (account && keyspace) {\n               redirectPath = ['/ak', account, keyspace, 'help'].join('/');\n            }\n            res.redirect(302, redirectPath);\n         } else {\n            res.status(404).send(`Invalid: ${req.path}. Try /routes or /help.\\n`);\n         }\n      } catch (err) {\n         this.logger.warn(err);\n         throw err;\n      }\n   }\n\n   addSecureDomain() {\n      this.addPublicCommand({\n         key: 'genkey-otp-webhook',\n         params: ['host', 'user', 'webhookDomain']\n      }, async (req, res) => {\n         const {user, host, webhook} = req.params;\n         if (!/^[a-z][a-z0-9-\\.]+\\.[a-z]+$/.test(webhookDomain)) {\n            throw {message: 'Invalid webhook host'};\n         }\n         const supportedDomains = ['test.redishub.com'];\n         if (webhookDomain !== supportedDomains[0]) {\n            throw {message: 'Webhook host not supported. Try: ' + supportedDomains[0]};\n         }\n         const uri = ['webhook', this.config.serviceName, host, user].join('/');\n         const url = `https://${webhook}/${uri}`;\n         this.logger.debug('webhook url', url, host, user);\n         const response = await Requests.head({url, timeout: this.config.webhookTimeout});\n         if (response.statusCode !== 200) {\n            throw {message: `Webhook ` + response.statusCode, url};\n         }\n         return this.buildQrReply({user, host});\n      });\n   }\n\n   async end() {\n      this.logger.info('end');\n      if (redis) {\n         await this.redis.quitAsync();\n      }\n      if (this.expressServer) {\n         this.expressServer.close();\n      }\n   }\n}\n"]}