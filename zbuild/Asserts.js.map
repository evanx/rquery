{"version":3,"sources":["../lib/Asserts.js"],"names":[],"mappings":"0BACA,+B,wTAEA,SAAS,MAAT,CAAgB,IAAhB,CAAsB,OAAtB,CAA+B,CAC5B,OAAO,KAAO,IAAP,CAAc,QAAQ,QAAR,EAArB,CACF,CAED,mBACG,MADH,iBACU,KADV,CACiB,IADjB,CACuB,CACjB,qBAAO,KAAP,CAAc,IAAd,EACA,OAAO,KAAP,CACF,CAJJ,CAKG,YALH,uBAKgB,KALhB,CAKuB,IALvB,CAK6B,CACvB,qBAAO,KAAP,CAAc,IAAd,EACA,qBAAO,OAAO,KAAP,GAAiB,QAAxB,CAAkC,IAAlC,EACA,OAAO,KAAP,CACF,CATJ,gEAUgB,KAVhB,CAUuB,IAVvB,CAU6B,CACvB,qBAAO,KAAP,CAAc,IAAd,EACA,qBAAO,OAAO,KAAP,GAAiB,QAAxB,CAAkC,IAAlC,EACA,OAAO,KAAP,CACF,CAdJ,kEAeiB,KAfjB,CAewB,IAfxB,CAe8B,CACxB,qBAAO,KAAP,CAAc,IAAd,EACA,qBAAO,SAAS,KAAT,IAAoB,KAA3B,CAAkC,IAAlC,EACA,OAAO,KAAP,CACF,CAnBJ,wEAoBoB,KApBpB,CAoB2B,IApB3B,CAoBiC,GApBjC,CAoBsC,CAChC,GAAI,CAAC,GAAL,CAAU,CACP,IAAM,WAAW,KAAX,CAAiB,IAAjB,EAAuB,GAA7B,CACF,CACD,qBAAO,KAAP,CAAc,CAAC,SAAD,CAAO,WAAP,CAAd,EACA,qBAAO,OAAO,SAAP,CAAiB,KAAjB,CAAP,CAAgC,OAAO,SAAP,CAAkB,CAAC,SAAD,CAAO,WAAP,CAAlB,CAAhC,EACA,qBAAO,OAAS,GAAhB,CAAqB,OAAO,KAAP,CAAc,CAAC,SAAD,CAAO,WAAP,CAAc,OAAd,CAAd,CAArB,EACA,OAAO,KAAP,CACF,CA5BJ,wEA6BoB,KA7BpB,CA6B2B,IA7B3B,CA6BiC,GA7BjC,CA6BsC,CAChC,GAAI,CAAC,GAAL,CAAU,CACP,IAAM,WAAW,KAAX,CAAiB,IAAjB,EAAuB,GAA7B,CACF,CACD,qBAAO,KAAP,CAAc,CAAC,SAAD,CAAO,WAAP,CAAd,EACA,qBAAO,OAAO,SAAP,CAAiB,KAAjB,CAAP,CAAgC,OAAO,SAAP,CAAkB,CAAC,SAAD,CAAO,WAAP,CAAlB,CAAhC,EACA,qBAAO,OAAS,GAAhB,CAAqB,OAAO,KAAP,CAAc,CAAC,SAAD,CAAO,WAAP,CAAc,OAAd,CAAd,CAArB,EACA,OAAO,KAAP,CACF,CArCJ,0EAsCqB,KAtCrB,CAsC4B,IAtC5B,CAsCkC,CAC5B,QAAQ,WAAR,CAAoB,KAApB,CAA2B,IAA3B,EACA,MAAM,OAAN,CAAc,cAAQ,CACnB,QAAQ,YAAR,CAAqB,IAArB,CAA2B,IAA3B,EACF,CAFD,EAGA,OAAO,KAAP,CACF,CA5CJ,8DA6Ce,KA7Cf,CA6CsB,IA7CtB,CA6C4B,CACtB,qBAAO,KAAP,CAAc,IAAd,EACA,qBAAO,OAAO,OAAP,CAAe,KAAf,CAAP,CAA8B,cAAgB,IAA9C,EACA,qBAAO,CAAC,OAAO,OAAP,CAAe,KAAf,CAAR,CAA+B,UAAY,IAA3C,EACA,OAAO,KAAP,CACF,CAlDJ","file":"Asserts.js","sourcesContent":["\nimport assert from 'assert';\n\nfunction format(type, options) {\n   return type + ': ' + options.toString();\n}\n\nexports = {\n   assert(value, name) {\n      assert(value, name);\n      return value;\n   },\n   assertString(value, name) {\n      assert(value, name);\n      assert(typeof value === 'string', name);\n      return value;\n   },\n   assertString(value, name) {\n      assert(value, name);\n      assert(typeof value === 'string', name);\n      return value;\n   },\n   assertInteger(value, name) {\n      assert(value, name);\n      assert(parseInt(value) === value, name);\n      return value;\n   },\n   assertIntegerMax(value, name, max) {\n      if (!max) {\n         max = Invariants.props[name].max;\n      }\n      assert(value, {name, value});\n      assert(Number.isInteger(value), format('integer', {name, value}));\n      assert(value <= max, format('max', {name, value, max}));\n      return value;\n   },\n   assertIntegerMin(value, name, min) {\n      if (!min) {\n         min = Invariants.props[name].min;\n      }\n      assert(value, {name, value});\n      assert(Number.isInteger(value), format('integer', {name, value}));\n      assert(value >= min, format('min', {name, value, min}));\n      return value;\n   },\n   assertStringArray(value, name) {\n      Asserts.assertArray(value, name);\n      value.forEach(item => {\n         Asserts.assertString(item, name);\n      });\n      return value;\n   },\n   assertArray(value, name) {\n      assert(value, name);\n      assert(lodash.isArray(value), 'not array: ' + name);\n      assert(!lodash.isEmpty(value), 'empty: ' + name);\n      return value;\n   }\n};\n"]}