{"version":3,"sources":["../rquery/rquery.js"],"names":[],"mappings":"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","file":"rquery.js","sourcesContent":["\nimport expressLib from 'express';\nimport marked from 'marked';\nimport crypto from 'crypto';\nimport CSON from 'season';\nimport base32 from 'thirty-two';\nimport speakeasy from 'speakeasy';\nimport otp from 'otplib/lib/totp';\nimport concatStream from 'concat-stream';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport * as Files from './Files';\nimport * as Express from './Express';\n\nimport KeyspaceHelpPage from './KeyspaceHelpPage';\n\nconst unsupportedAuth = ['twitter.com', 'github.com', 'gitlab.com', 'bitbucket.org'];\nconst supportedAuth = ['telegram.org'];\n\nexport default class {\n\n   async init() {\n      this.logger.info('init');\n   }\n\n   async start() {\n      this.redis = redisLib.createClient(this.config.redisUrl);\n      this.expressApp = expressLib();\n      this.expressApp.use((req, res, next) => {\n         req.pipe(concatStream(content => {\n            req.body = content;\n            next();\n         }));\n      });\n      this.addRoutes();\n      if (this.config.disableTelegramHook) {\n         this.logger.warn('telegram webhook disabled');\n      } else {\n         this.addTelegramWebhook();\n      }\n      this.expressApp.use((req, res) => this.sendErrorRoute(req, res));\n      this.expressServer = await Express.listen(this.expressApp, this.config.port);\n      this.logger.info('listen', this.config.port, Express.getRoutes(this.expressApp), this.expressServer);\n   }\n\n   sendErrorRoute(req, res) {\n      try {\n         if (/^\\/favicon.ico$/.test(req.path)) {\n            res.status(404).send(`Invalid path: ${req.path}\\n`);\n            return;\n         }\n         const [account, keyspace] = Strings.matches(req.path, /^\\/ak\\/([^\\/]+)\\/([^\\/]+)\\//);\n         this.logger.debug('sendErrorRoute', req.path,  account, keyspace, this.isBrowser(req));\n         if (this.isBrowser(req)) {\n            let redirectPath = '/routes';\n            if (account && keyspace) {\n               redirectPath = ['/ak', account, keyspace, 'help'].join('/');\n            }\n            res.redirect(302, redirectPath);\n         } else {\n            res.status(404).send(`Invalid: ${req.path}. Try /routes or /help.\\n`);\n         }\n      } catch (err) {\n         this.logger.warn(err);\n         throw err;\n      }\n   }\n\n   addSecureDomain() {\n   }\n\n   addTelegramWebhook() {\n      if (!this.config.botSecret) {\n         this.logger.error('addTelegramWebhook botSecret');\n      } else {\n         this.expressApp.post('/webhook-telegram/*', async (req, res) => {\n            try {\n               this.logger.debug('webhook auth', req.params[0], this.config.botSecret);\n               if (req.params[0] !== this.config.botSecret) {\n                  throw 'Invalid telegram webhook';\n               }\n               const body = req.body.toString('utf8');\n               this.logger.debug('body', body);\n               if (!/^[\"{\\[]/.test(body)) {\n                  throw {message: 'body not JSON', body};\n               } else {\n                  await this.handleTelegram(req, res, JSON.parse(body));\n                  res.send('');\n               }\n            } catch (err) {\n               this.logger.error(err);\n               res.status(500).send(`Internal error: ${err.message}\\n`);\n            }\n         });\n      }\n   }\n\n   async handleTelegram(req, res, telegram) {\n      this.logger.debug('telegram', telegram);\n      const message = {};\n      let content;\n      if (telegram.message) {\n         message.type = 'message';\n         content = telegram.message;\n         if (!content.text) {\n         } else {\n            message.text = content.text;\n         }\n      } else if (telegram.inline_query) {\n         message.type = 'query';\n         content = telegram.inline_query;\n         if (!content.query) {\n         } else {\n            message.text = content.query;\n         }\n      } else {\n         this.logger.warn('telegram', telegram);\n         return;\n      }\n      if (!content.chat) {\n      } else if (!content.chat.id) {\n      } else {\n         message.chatId = content.chat.id;\n      }\n      this.logger.debug('tcm', {telegram, content, message});\n      if (!content.from) {\n      } else if (!content.from.username) {\n      } else if (!content.from.id) {\n      } else {\n         message.fromId = content.from.id;\n         message.greetName = content.from.username;\n         if (true && content.from.first_name) {\n            message.greetName = content.from.first_name;\n         } else if (content.from.first_name && content.from.last_name) {\n            message.greetName = [content.from.first_name, content.from.last_name].join(' ');\n         }\n         message.username = content.from.username;\n         if (/verify/.test(content.text)) {\n            message.action = 'verify';\n            await this.handleTelegramVerify(message);\n         } else if (/grant/.test(content.text)) {\n            message.action = 'grant';\n            await this.handleTelegramGrant(message);\n         } else {\n            await this.sendTelegramReply(message, {\n               content: `Commands:\n               /verify - verify your Telegram identity to redishub.com\n               `\n            });\n         }\n      }\n      this.logger.info('telegram message', message, telegram);\n   }\n\n   async handleTelegramVerify(request) {\n      const now = new Date().getTime();\n      this.logger.info('handleTelegramVerify', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [sadd, verified, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sadd(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      if (!secret) {\n         secret = this.generateTokenKey();\n      }\n      if (sadd || !verified) {\n         const [hmset] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(userKey, 'verified', now);\n            multi.hsetnx(userKey, 'id', request.fromId);\n            multi.hsetnx(userKey, 'secret', secret);\n         });\n         await this.sendTelegramReply(request, {\n            format: 'html',\n            content: `Thanks, ${request.greetName}.\n            Your identity as is now verified to <b>${this.config.serviceLabel}</b>\n            as <code>telegram.me/${request.username}.</code>\n            `\n         });\n      } else {\n         const duration = now - parseInt(verified);\n         await this.sendTelegramReply(request, {\n            format: 'html',\n            content: `Hi ${request.greetName}.\n            Your identity as was already verified to <b>${this.config.serviceLabel}</b>\n            ${Millis.formatDuration(duration)} ago as <code>@${request.username}</code>\n            `\n         });\n      }\n   }\n\n   async handleTelegramGrant(request) {\n      const now = new Date().getTime();\n      this.logger.info('handleTelegramGrant', request);\n      const userKey = this.adminKey('telegram', 'user', request.username);\n      let [ismember, verified, secret] = await this.redis.multiExecAsync(multi => {\n         multi.sismember(this.adminKey('telegram:verified:users'), request.username);\n         multi.hget(userKey, 'verified');\n         multi.hget(userKey, 'secret');\n      });\n      throw {message: 'Not implemented'};\n   }\n\n   async sendTelegramReply(request, response) {\n      this.logger.info('sendTelegramReply', response);\n      try {\n         assert(request.fromId, 'fromId');\n         const content = lodash.trim(response.content.replace(/\\s\\s+/g, ' '));\n         let uri = `sendMessage?chat_id=${request.fromId}`;\n         uri += '&disable_notification=true';\n         if (response.format === 'markdown') {\n            uri += `&parse_mode=Markdown`;\n         } else if (response.format === 'html') {\n            uri += `&parse_mode=HTML`;\n         }\n         uri += `&text=${encodeURIComponent(content)}`;\n         const url = [this.config.botUrl, uri].join('/');\n         this.logger.info('sendTelegramReply url', url);\n         await Requests.head({url});\n      } catch (err) {\n         this.logger.error(err);\n      }\n   }\n\n   addRoutes() {\n      this.addPublicCommand({\n         key: 'routes',\n         access: 'debug',\n         aliases: ['/']\n      }, async (req, res, reqx) => {\n         const routes = Express.getRoutes(this.expressApp)\n         .filter(route => !['/', '/routes', '/webhook-telegram/*'].includes(route));\n         const accountOnlyRoutes = routes.filter(route => route.includes(':account') && !route.includes(':keyspace'));\n         return ['Common routes:']\n         .concat(\n            routes.filter(route => route && !route.includes(':'))\n            .map(route => `${this.config.hostUrl}${route}`)\n         ).concat(['', 'Miscellaneous parameterized routes:'])\n         .concat(\n            routes.filter(route => route.includes(':') && !route.includes('telegram') && !/\\:(keyspace|account)/.test(route))\n            .map(route => `${route}`)\n         ).concat(['', 'Telegram routes:'])\n         .concat(\n            routes.filter(route => route.includes('telegram'))\n            .map(route => `${route}`)\n         ).concat(accountOnlyRoutes.length? ['', 'Account only routes:'] : [])\n         .concat(\n            accountOnlyRoutes.map(route => `${route}`)\n         ).concat(['', 'Account/keyspace routes:', `${this.config.hostUrl}/register-expire`])\n         .concat(\n            routes.filter(route => route.includes(':account') && route.includes(':keyspace'))\n            .map(route => `${route}`)\n         );\n      });\n      this.addPublicCommand({\n         key: 'about',\n         access: 'redirect',\n      }, async (req, res) => {\n         res.redirect(302, 'https://github.com/evanx/redishub/blob/master/README.md');\n      });\n      this.expressApp.get('', async (req, res) => {\n         res.redirect(302, '/routes');\n      });\n      this.addPublicRoute('help', async (req, res) => {\n         if (this.isBrowser(req)) {\n            let content = await Files.readFile('README.md');\n            res.set('Content-Type', 'text/html');\n            res.send(marked(content.toString()));\n         } else if (this.isCliDomain(req)) {\n            return this.listCommands();\n         } else {\n            return this.listCommands();\n         }\n      });\n      if (this.config.allowInfo) {\n         this.addPublicRoute('info', async (req, res) => {\n            res.set('Content-Type', 'text/plain');\n            res.send(await this.redis.infoAsync());\n         });\n      }\n      if (this.config.allowKeyspaces) {\n         this.addPublicRoute('keyspaces', () => this.redis.smembersAsync(this.adminKey('keyspaces')));\n      }\n      this.addPublicRoute('epoch', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/seconds', async () => {\n         const time = await this.redis.timeAsync();\n         return time[0];\n      });\n      this.addPublicRoute('time/milliseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 + time[1]/1000);\n      });\n      this.addPublicRoute('time/nanoseconds', async () => {\n         const time = await this.redis.timeAsync();\n         return Math.ceil(time[0] * 1000 * 1000 + parseInt(time[1]));\n      });\n      this.addPublicRoute('time', () => this.redis.timeAsync());\n      this.addPublicCommand({\n         key: 'genkey-otp',\n         params: ['user', 'host']\n      }, async (req, res) => {\n         const {user, host} = req.params;\n         this.logger.debug('genkey-otp', user, host);\n         return this.buildQrReply({user, host});\n      });\n      this.addPublicCommand({\n         key: 'genkey-ga',\n         params: ['address', 'issuer']\n      }, async (req, res) => {\n         const {address, issuer} = req.params;\n         this.logger.debug('genkey-ga', address, issuer);\n         return this.buildQrReply({account: address, issuer});\n      });\n      if (!this.config.secureDomain) {\n         this.logger.warn('insecure mode');\n      } else {\n         this.addPublicCommand({\n            key: 'gentoken',\n            params: ['account']\n         }, async (req, res) => {\n            const {account} = req.params;\n            const accountKey = this.adminKey('account', account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               multi.smembers(this.adminKey('account', account, 'certs'));\n            });\n            const duration = time - admined;\n            if (duration < this.config.adminLimit) {\n               return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n            }\n            this.logger.debug('gentoken', accountKey);\n            const errorMessage = this.validateCert(req, certs, account);\n            if (errorMessage) {\n               return errorMessage;\n            }\n            const token = this.generateTokenKey(6);\n            await this.redis.setexAsync([accountKey, token].join(':'), this.config.keyExpire, token);\n            return token;\n         });\n         this.addSecureDomain();\n      }\n      this.addPublicCommand({\n         key: 'verify-user-telegram',\n         params: ['user']\n      }, async (req, res) => {\n         const {user} = req.params;\n         const userKey = this.adminKey('telegram', 'user', user);\n         let [[now], sismember, verified, secret] = await this.redis.multiExecAsync(multi => {\n            multi.time();\n            multi.sismember(this.adminKey('telegram:verified:users'), user);\n            multi.hget(userKey, 'verified');\n            multi.hget(userKey, 'secret');\n         });\n         if (sismember) {\n            if (verified) {\n               const duration = parseInt(now) - parseInt(verified);\n               return `OK: ${user}@telegram.me, verified ${Millis.formatDuration(duration)} ago`;\n            } else {\n               return `OK: ${user}@telegram.me`;\n            }\n         } else {\n            return `Telegram user not yet verified: ${user}. Please Telegram '@redishub_bot /verify' e.g. via https://web.telegram.org`;\n         }\n      });\n      this.addRegisterRoutes();\n      this.addKeyspaceCommand({\n         key: 'help',\n         access: 'debug',\n         resultObjectType: 'KeyedArrays',\n         sendResult: async (req, res, reqx, result) => {\n            if (this.isMobile(req)) {\n               res.set('Content-Type', 'text/html');\n               res.send(ReactDOMServer.renderToString(<KeyspaceHelpPage {...reqx} {...result}/>));\n            } else {\n               return result;\n            }\n         }\n      }, async (req, res, reqx) => {\n         const {account, keyspace} = req.params;\n         this.logger.ndebug('help', req.params, this.commands.map(command => command.key).join('/'));\n         const message = `Usage: e.g. sadd/myset/myvalue, smembers/myset etc as follows:`;\n         const exampleUrls = [\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/set/mykey/myvalue`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/get/mykey`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/sadd/myset/myvalue`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/smembers/myset`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/lpush/mylist/myvalue`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/lrange/mylist/0/-1`,\n            `${this.config.hostUrl}/ak/${account}/${keyspace}/ttls`,\n         ];\n         return {message, exampleUrls, keyspaceCommands: this.listCommands('keyspace')};\n      });\n      this.addKeyspaceCommand({\n         key: 'register-keyspace',\n         access: 'admin'\n      }, async (req, res, {time, account, keyspace, accountKey}) => {\n         const replies = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', time);\n         });\n         return replies;\n      });\n      this.addKeyspaceCommand({\n         key: 'deregister-keyspace',\n         access: 'admin'\n      }, async (req, res, {account, keyspace, accountKey, keyspaceKey}) => {\n         const [keys] = await this.redis.multiExecAsync(multi => {\n            multi.keys(this.keyspaceKey(account, keyspace, '*'));\n         });\n         const [keyspaces] = await this.redis.multiExecAsync(multi => {\n            multi.smembers(this.accountKey(account, 'keyspaces'));\n         });\n         this.logger.info('deregister', keyspace, keys.length, keyspaces);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multiReply = await this.redis.multiExecAsync(multi => {\n            keys.forEach(key => multi.del(key));\n            multi.del(this.accountKey(account, 'keyspaces'), keyspace);\n            multi.del(this.accountKey(account, 'certs'));\n            multi.del(accountKey);\n         });\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'flush',\n         access: 'admin'\n      }, async (req, res) => {\n         const {account, keyspace} = req.params;\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.del(key));\n         const multiReply = await multi.execAsync();\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'getconfig',\n         access: 'debug'\n      }, async (req, res, {accountKey}) => {\n         return await this.redis.hgetallAsync(accountKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'keys',\n         access: 'debug'\n      }, async (req, res, {account, keyspace}) => {\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         const keyIndex = this.keyIndex(account, keyspace);\n         return keys.map(key => key.substring(keyIndex));\n      });\n      this.addKeyspaceCommand({\n         key: 'types',\n         access: 'debug'\n      }, async (req, res, {account, keyspace}) => {\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.type(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'ttl',\n         params: ['key'],\n         access: 'debug'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.ttlAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'ttls',\n         access: 'debug'\n      }, async (req, res, {account, keyspace}) => {\n         const keys = await this.redis.keysAsync(this.keyspaceKey(account, keyspace, '*'));\n         this.logger.debug('ttl ak', account, keyspace, keys);\n         const keyIndex = this.keyIndex(account, keyspace);\n         const multi = this.redis.multi();\n         keys.forEach(key => multi.ttl(key));\n         const results = await multi.execAsync();\n         const result = {};\n         keys.forEach((key, index) => result[key.substring(keyIndex)] = results[index]);\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'type',\n         params: ['key'],\n         access: 'debug'\n      }, async (req, res, {keyspaceKey}) => {\n         this.logger.debug('type', keyspaceKey);\n         return await this.redis.typeAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'set',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.setAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'setex',\n         params: ['key', 'seconds', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         const {seconds, value} = req.params;\n         return await this.redis.setexAsync(keyspaceKey, seconds, value);\n      });\n      this.addKeyspaceCommand({\n         key: 'setnx',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.setnxAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'get',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.getAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'incr',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.incrAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'exists',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.existsAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'del',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.delAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sadd',\n         params: ['key', 'member'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.saddAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'srem',\n         params: ['key', 'member'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.sremAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'smove',\n         params: ['key', 'dest', 'member'],\n         access: 'set'\n      }, async (req, res, {multi, account, keyspace, keyspaceKey}) => {\n         const {dest, member} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         let result = await this.redis.smoveAsync(keyspaceKey, destKey, member);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'spop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.spopAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'smembers',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.smembersAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'sismember',\n         params: ['key', 'member']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.sismemberAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'scard',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.scardAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpush',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lpushAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpushtrim',\n         params: ['key', 'length', 'value'],\n         access: 'set'\n      }, async (req, res, {multi, keyspaceKey}) => {\n         const {value, length} = req.params;\n         multi.lpush(keyspaceKey, value);\n         multi.trim(keyspaceKey, length);\n      });\n      this.addKeyspaceCommand({\n         key: 'rpush',\n         params: ['key', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.rpushAsync(keyspaceKey, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lpop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lpopAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'blpop',\n         params: ['key', 'timeout'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         const reply = await this.redis.blpopAsync(keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'brpop',\n         params: ['key', 'timeout'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         const reply = await this.redis.brpopAsync(keyspaceKey, req.params.timeout);\n         if (!reply) {\n            return null;\n         } else {\n            return reply[1];\n         }\n      });\n      this.addKeyspaceCommand({\n         key: 'rpop',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.rpopAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'brpoplpush',\n         params: ['key', 'dest', 'timeout'],\n         access: 'set'\n      }, async (req, res, {multi, account, keyspace, keyspaceKey}) => {\n         const {dest, timeout} = req.params;\n         const destKey = this.keyspaceKey(account, keyspace, dest);\n         const result = await this.redis.brpoplpushAsync(keyspaceKey, destKey, timeout);\n         multi.expire(destKey, this.getKeyExpire(account));\n         return result;\n      });\n      this.addKeyspaceCommand({\n         key: 'llen',\n         params: ['key'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.llenAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'lindex',\n         params: ['key', 'index']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lindexAsync(keyspaceKey, req.params.index);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrem',\n         params: ['key', 'count', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lremAsync(keyspaceKey, req.params.count, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'lset',\n         params: ['key', 'index', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lsetAsync(keyspaceKey, req.params.index, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'ltrim',\n         params: ['key', 'start', 'stop'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.ltrimAsync(keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'lrange',\n         params: ['key', 'start', 'stop'],\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.lrangeAsync(keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'hset',\n         params: ['key', 'field', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hsetAsync(keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hsetnx',\n         params: ['key', 'field', 'value'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hsetnxAsync(keyspaceKey, req.params.field, req.params.value);\n      });\n      this.addKeyspaceCommand({\n         key: 'hget',\n         params: ['key', 'field']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hgetAsync(keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hdel',\n         params: ['key', 'field'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hdelAsync(keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hincrby',\n         params: ['key', 'field', 'increment'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hincrbyAsync(keyspaceKey, req.params.field, req.params.increment);\n      });\n      this.addKeyspaceCommand({\n         key: 'hexists',\n         params: ['key', 'field']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hexistsAsync(keyspaceKey, req.params.field);\n      });\n      this.addKeyspaceCommand({\n         key: 'hlen',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hlenAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hkeys',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hkeysAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'hgetall',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.hgetallAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'zcard',\n         params: ['key']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.zcardAsync(keyspaceKey);\n      });\n      this.addKeyspaceCommand({\n         key: 'zadd',\n         params: ['key', 'score', 'member'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.zaddAsync(keyspaceKey, req.params.score, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrem',\n         params: ['key', 'member'],\n         access: 'set'\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.zremAsync(keyspaceKey, req.params.member);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrange',\n         params: ['key', 'start', 'stop']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.zrangeAsync(keyspaceKey, req.params.start, req.params.stop);\n      });\n      this.addKeyspaceCommand({\n         key: 'zrevrange',\n         params: ['key', 'start', 'stop']\n      }, async (req, res, {keyspaceKey}) => {\n         return await this.redis.zrevrangeAsync(keyspaceKey, req.params.start, req.params.stop);\n      });\n   }\n\n   listCommands(context) {\n      return this.commands.filter(command => command.access !== 'redirect')\n      .filter(command => !context || command.context === context)\n      .map(command => [command.key, ...command.params].join(' '));\n   }\n\n   formatCommandUri(command) {\n      if (command.params.length) {\n         return [command.key, ... command.params.map(param => ':' + param)].join('/');\n      } else {\n         return command.key;\n      }\n   }\n\n   addPublicCommand(command, fn) {\n      let uri = command.key;\n      if (command.params) {\n         uri = [command.key, ... command.params.map(param => ':' + param)].join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), async (req, res) => {\n         try {\n            const result = await fn(req, res);\n            if (command.access === 'redirect') {\n            } else {\n               await this.sendResult(command, req, res, {}, result);\n            }\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n      this.commands.push(command);\n   }\n\n   addPublicRoute(uri, fn) {\n      this.expressApp.get([this.config.location, uri].join('/'), async (req, res) => {\n         try {\n            const result = await fn(req, res);\n            await this.sendResult({}, req, res, {}, result);\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      });\n   }\n\n   addRegisterRoutes() {\n      this.expressApp.get(this.config.location + '/register-expire', (req, res) => this.registerExpire(req, res));\n      if (this.config.secureDomain) {\n         this.expressApp.get(this.config.location + '/register-account-telegram/:account', (req, res) => this.registerAccount(req, res));\n      }\n   }\n\n   async registerAccount(req, res) {\n      try {\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         const {account} = req.params;\n         let v = this.validateRegisterAccount(account);\n         if (v) {\n            throw {message: v, account};\n         }\n         const dn = req.get('ssl_client_s_dn');\n         const clientCert = req.get('ssl_client_cert');\n         this.logger.info('registerAccount dn', dn);\n         if (!clientCert) {\n            return 'No client cert';\n         }\n         const clientCertDigest = this.digestPem(clientCert);\n         const otpSecret = this.generateTokenKey();\n         const accountKey = this.adminKey('account', account);\n         const [hsetnx, saddAccount, saddCert] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', new Date().getTime());\n            multi.sadd(this.adminKey('accounts'), account);\n            multi.sadd(this.adminKey('account', account, 'topt'), otpSecret);\n            multi.sadd(this.adminKey('account', account, 'certs'), clientCertDigest);\n         });\n         if (!hsetnx) {\n            throw {message: 'Account exists'};\n         }\n         if (!saddAccount) {\n            this.logger.error('sadd account');\n         }\n         if (!saddCert) {\n            this.logger.error('sadd cert');\n         }\n         const result = this.buildQrReply({\n            otpSecret,\n            user: account,\n            host: this.config.hostname,\n            label: this.config.serviceLabel\n         });\n         await this.sendResult({}, req, res, {}, result);\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   generateTokenKey(length = 16) {\n      const Base32Symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n      return lodash.reduce(crypto.randomBytes(length), (result, value) => {\n         return result + Base32Symbols[Math.floor(value * Base32Symbols.length / 256)];\n      }, '');\n   }\n\n   formatTokenKey(tokenKey) {\n      return tokenKey.match(/.{1,4}/g).join(' ');\n   }\n\n   generateTokenCode(otpSecret, time) { // TODO test generating a TOTP token from secret\n      try {\n         time = Math.floor((time || (new Date().getTime())/1000)/30);\n         this.logger.info('base32', Object.keys(base32));\n         this.logger.info('speakeasy', Object.keys(speakeasy.totp));\n         this.logger.debug('otplib generateSecret', otp.utils.generateSecret());\n         this.logger.debug('otplib', otp.topt.generate(base32.decode(otpSecret), time));\n      } catch (err) {\n         this.logger.error('generateTokenCode', err);\n      }\n   }\n\n   buildQrReply(options) {\n      let {label, account, user, host, otpSecret, issuer} = options;\n      if (!otpSecret) {\n         otpSecret = this.generateTokenKey();\n      }\n      //this.logger.debug('code', this.generateTokenCode(otpSecret));\n      if (!issuer) {\n         issuer = label || host;\n      }\n      if (!account && user && host) {\n         account = `${user}@${host}`;\n      }\n      if (!account || !issuer) {\n         throw {message: 'Invalid'};\n      }\n      const uri = `${account}?secret=${otpSecret}&issuer=${issuer}`;\n      const otpauth = 'otpauth://totp/' + encodeURIComponent(uri);\n      const googleChartUrl = 'http://chart.googleapis.com/chart?chs=200x200&chld=M|0&cht=qr&chl=' + otpauth;\n      return {otpSecret, uri, otpauth, googleChartUrl};\n   }\n\n   validateRegisterTime() {\n      const time = new Date().getTime();\n      if (!this.registerTime) {\n         this.registerTime = time;\n      } else {\n         const duration = time - this.registerTime;\n         if (duration > 1000) {\n            this.registerTime = time;\n            this.registerCount = 0;\n         } else {\n            this.registerCount++;\n         }\n         if (this.registerCount > this.config.registerLimit) {\n            this.logger.error('registerCount');\n            return `Global register rate exceeed: ${this.config.registerLimit} per second`;\n         }\n      }\n      this.registerTime = time;\n   }\n\n   async registerExpire(req, res, previousError) {\n      if (previousError) {\n         this.logger.warn('registerExpire retry');\n      }\n      try {\n         this.logger.debug('registerExpire');\n         let errorMessage = this.validateRegisterTime();\n         if (errorMessage) {\n            this.sendError(req, res, {message: errorMessage});\n            return;\n         }\n         const account = '@' + this.generateTokenKey().substring(0, 6).toLowerCase();\n         const keyspace = this.generateTokenKey().substring(0, 6).toLowerCase();\n         let clientIp = req.get('x-forwarded-for');\n         const accountKey = this.accountKeyspace(account, keyspace);\n         this.logger.debug('registerExpire clientIp', clientIp, account, keyspace, accountKey);\n         const replies = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'registered', new Date().getTime());\n            multi.expire(accountKey, this.config.ephemeralAccountExpire);\n            if (clientIp) {\n               multi.hsetnx(accountKey, 'clientIp', clientIp);\n               if (this.config.addClientIp) {\n                  multi.sadd(this.adminKey('keyspaces:expire:ips'), clientIp);\n               }\n            }\n            this.count(multi, 'keyspaces:expire');\n         });\n         if (!replies[0]) {\n            this.logger.error('keyspace clash', account, keyspace);\n            if (!previousError) {\n               return this.registerExpire(req, res, {message: 'keyspace clash'});\n            }\n            throw {message: 'Expire keyspace clash'};\n         }\n         const replyPath = ['ak', account, keyspace].join('/');\n         this.logger.debug('registerExpire', keyspace, clientIp, replyPath);\n         if (this.isBrowser(req)) {\n            if (true) {\n               res.redirect(302, [replyPath, 'help'].join('/'));\n            } else {\n               res.send(replyPath);\n            }\n         } else {\n            await this.sendResult({}, req, res, {}, replyPath);\n         }\n      } catch (err) {\n         this.sendError(req, res, err);\n      }\n   }\n\n   count(multi, key) {\n      multi.incr(this.adminKey(`metrics:${key}:count`));\n   }\n\n   validateImportTime() {\n      const time = new Date().getTime();\n      if (!this.importTime) {\n         this.importTime = time;\n      } else {\n         const duration = time - this.importTime;\n         if (duration > 1000) {\n            this.importTime = time;\n            this.importCount = 0;\n         } else {\n            this.importCount++;\n         }\n         if (this.importCount > this.config.importLimit) {\n            this.logger.error('importCount');\n            return `Global import rate exceeed: ${this.config.importLimit} per second`;\n         }\n      }\n      this.importTime = time;\n   }\n\n   addKeyspaceCommand(command, fn) {\n      assert(command.key, 'command.key');\n      command.context = 'keyspace';\n      let uri = 'ak/:account/:keyspace';\n      command.params = command.params || [];\n      const key = command.key + command.params.length;\n      this.logger.debug('addKeyspaceCommand', command.key, key, uri);\n      this.commands.push(command);\n      const handler = this.createKeyspaceHandler(command, fn);\n      if (command.key === this.config.indexCommand) {\n         this.expressApp.get([this.config.location, uri].join('/'), handler);\n      }\n      uri += '/' + command.key;\n      if (command.params.length) {\n         assert(command.key !== this.config.indexCommand, 'indexCommand');\n         uri += '/' + command.params.map(param => ':' + param).join('/');\n      }\n      this.expressApp.get([this.config.location, uri].join('/'), handler);\n      this.logger.debug('add', command.key, uri);\n   }\n\n   createKeyspaceHandler(command, fn) {\n      return async (req, res) => {\n         try {\n            const {account, keyspace, key, timeout} = req.params;\n            assert(account, 'account');\n            assert(keyspace, 'keyspace');\n            const accountKey = this.accountKeyspace(account, keyspace);\n            let v;\n            //await this.migrateKeyspace(req.params);\n            v = this.validateAccount(account);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid account: ' + v);\n               return;\n            }\n            v = this.validateKeyspace(keyspace);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid keyspace: ' + v);\n               return;\n            }\n            v = this.validateKey(key);\n            if (v) {\n               this.sendStatusMessage(req, res, 400, 'Invalid key: ' + v);\n               return;\n            }\n            if (timeout) {\n               if (!/^[0-9]$/.test(timeout)) {\n                  this.sendStatusMessage(req, res, 400, 'Invalid timeout: require range 1 to 9 seconds');\n                  return;\n               }\n            }\n            const isSecureAccount = !/^@/.test(account);\n            const [[time], registered, admined, accessed, certs] = await this.redis.multiExecAsync(multi => {\n               multi.time();\n               multi.hget(accountKey, 'registered');\n               multi.hget(accountKey, 'admined');\n               multi.hget(accountKey, 'accessed');\n               if (isSecureAccount) {\n                  multi.smembers(this.adminKey('account', account, 'certs'));\n               }\n            });\n            v = this.validateAccess({command, req, account, keyspace, time, registered, admined, accessed, certs});\n            if (v) {\n               this.sendStatusMessage(req, res, 403, v);\n               return;\n            }\n            let hostname;\n            if (req.hostname === this.config.hostname) {\n            } else if (lodash.endsWith(req.hostname, this.config.keyspaceHostname)) {\n               hostname = req.hostname.replace(/\\..*$/, '');\n               let hostHashes = await this.redis.hgetallAsync(this.adminKey('host', hostname));\n               if (!hostHashes) {\n                  throw new ValidationError(`Invalid hostname: ${hostname}`);\n               }\n               this.logger.debug('hostHashes', hostHashes);\n               if (!hostHashes.keyspaces) {\n                  throw new ValidationError(`Invalid hostname: ${hostname}`);\n               }\n               if (!lodash.includes(hostHashes.keyspaces, keyspace)) {\n                  throw new ValidationError(`Invalid keyspace: ${keyspace}`);\n               }\n            }\n            if (!keyspace) {\n               throw new ValidationError('Missing keyspace: ' + req.path);\n            }\n            if (timeout) {\n               if (timeout < 1 || timeout > 10) {\n                  throw new ValidationError('Timeout must range from 1 to 10 seconds: ' + timeout);\n               }\n            }\n            const multi = this.redis.multi();\n            const reqx = {multi, time, account, keyspace, accountKey};\n            if (key) {\n               reqx.keyspaceKey = this.keyspaceKey(account, keyspace, key);\n            }\n            await this.sendResult(command, req, res, reqx, await fn(req, res, reqx));\n            multi.sadd(this.adminKey('keyspaces'), keyspace);\n            multi.hset(accountKey, 'accessed', time);\n            if (command && command.access === 'admin') {\n               multi.hset(accountKey, 'admined', time);\n            }\n            if (key) {\n               assert(reqx.keyspaceKey);\n               multi.expire(reqx.keyspaceKey, this.getKeyExpire(account));\n            }\n            if (account[0] === '@') {\n               multi.expire(accountKey, this.config.ephemeralAccountExpire);\n            }\n            await multi.execAsync();\n         } catch (err) {\n            this.sendError(req, res, err);\n         }\n      };\n   }\n\n   getKeyExpire(account) {\n      if (account[0] === '@') {\n         return this.config.ephemeralKeyExpire;\n      } else {\n         return this.config.keyExpire;\n      }\n   }\n\n   async migrateKeyspace({account, keyspace}) {\n      const accountKey = this.accountKeyspace(account, keyspace);\n      const [accessToken, token] = await this.redis.multiExecAsync(multi => {\n         multi.hget(accountKey, 'accessToken');\n         multi.hget(accountKey, 'token');\n      });\n      if (!token && accessToken) {\n         const [hsetnx, hdel] = await this.redis.multiExecAsync(multi => {\n            multi.hsetnx(accountKey, 'token', accessToken);\n            multi.hdel(accountKey, 'accessToken');\n         });\n         if (!hsetnx) {\n            throw new Error('Migrate keyspace hset failed');\n         } else if (!hdel) {\n            throw new Error('Migrate keyspace hdel failed');\n         }\n      }\n   }\n\n   validateRegisterAccount(account) {\n      if (lodash.isEmpty(account)) {\n         return 'Invalid account (empty)';\n      } else if (account[0] === '@') {\n         return 'Invalid account (leading @ symbol reserved for ephemeral keyspaces)';\n      } else if (!/^[\\-_a-z0-9]+$/.test(account)) {\n         return 'Account name is invalid. Try only lowercase/numeric with dash/underscore.';\n      }\n   }\n\n   validateRegisterKeyspace(keyspace) {\n      if (/~/.test(keyspace)) {\n         return 'contains tilde';\n      }\n   }\n\n   validateAccount(account) {\n      if (/^:/.test(account)) {\n         return 'leading colon';\n      }\n   }\n\n   validateKeyspace(keyspace) {\n      if (/^:/.test(keyspace)) {\n         return 'leading colon';\n      }\n      if (/::/.test(keyspace)) {\n         return 'double colon';\n      }\n      if (/:$/.test(keyspace)) {\n         return 'trailing colon';\n      }\n   }\n\n   validateKey(key) {\n      if (/^:/.test(key)) {\n         return 'leading colon';\n      }\n   }\n\n   isReadCommand(command) {\n      if (!command) {\n         return false;\n      } else if (!command.access) {\n         return true;\n      } else if (command.access === 'debug') {\n         return true;\n      }\n      return false;\n   }\n\n   validateAccess({req, command, account, keyspace, time, registered, admined, accessed, certs}) {\n      const scheme = req.get('X-Forwarded-Proto');\n      this.logger.debug('validateAccess scheme', scheme, account, keyspace, command);\n      if (this.isSecureDomain(req)) {\n         if (scheme === 'http') {\n            return `Insecure scheme ${scheme}: ${req.hostname}`;\n         }\n      }\n      if (command.access) {\n         if (command.access === 'admin') {\n            if (!admined) {\n               this.logger.warn('validateAccess admined', keyspace, command.key, time);\n            } else {\n               const duration = time - admined;\n               if (duration < this.config.adminLimit) {\n                  return `Admin command interval not elapsed: ${this.config.adminLimit}s`;\n               }\n            }\n         } else if (command.access === 'debug') {\n         } else if (command.access === 'set') {\n         } else if (command.access === 'get') {\n         } else {\n         }\n      }\n      const isSecureAccount = !/^@/.test(account);\n      if (this.isSecureDomain(req) && account[0] !== '@') {\n         const errorMessage = this.validateCert(req, certs, account);\n         if (errorMessage) {\n            return errorMessage;\n         }\n      } else if (command.key === 'register-keyspace') {\n      } else if (!registered) {\n         return 'Unregistered keyspace';\n      } else if (isSecureAccount) {\n         this.logger.error('validateAccess', account, keyspace);\n         return 'Invalid access';\n      }\n   }\n\n   validateCert(req, certs, account) {\n      if (this.config.disableValidateCert) {\n         return null;\n      }\n      if (!certs) {\n         return 'No enrolled certs';\n      }\n      const clientCert = req.get('ssl_client_cert');\n      if (!clientCert) {\n         return 'No client cert';\n      }\n      const clientCertDigest = this.digestPem(clientCert);\n      this.logger.info('validateCert', clientCertDigest, account);\n      if (!certs.includes(clientCertDigest)) {\n         return 'Invalid cert';\n      }\n      return null;\n   }\n\n   keyIndex(account, keyspace) {\n      return [this.config.redisKeyspace, account, keyspace].reduce((previousValue, currentValue) => {\n         return previousValue + currentValue.length\n      }, 3);\n   }\n\n   accountKey(account) {\n      return this.adminKey('account', account);\n   }\n\n   accountKeyspace(account, keyspace) {\n      return [this.config.redisKeyspace, 'ak', account, keyspace].join(':');\n   }\n\n   keyspaceKey(account, keyspace, key) {\n      return [this.config.redisKeyspace, account, keyspace, key].join('~');\n   }\n\n   adminKey(...parts) {\n      return [this.config.redisKeyspace, ...parts].join(':');\n   }\n\n   async sendResult(command, req, res, reqx, result) {\n      const userAgent = req.get('User-Agent');\n      this.logger.debug('sendResult ua', userAgent);\n      command = command || {};\n      if (this.isDebugReq(req)) {\n         this.logger.ndebug('sendResult', command.command, req.params, req.query, result);\n      }\n      const mobile = this.isMobile(req);\n      if (command.sendResult) {\n         if (lodash.isFunction(command.sendResult)) {\n            const otherResult = await command.sendResult(req, res, reqx, result);\n            if (otherResult === undefined) {\n               return;\n            } else {\n               result = otherResult;\n            }\n         } else {\n            throw 'command.sendResult type: ' + typeof command.sendResult;\n         }\n      }\n      let resultString = '';\n      if (!Values.isDefined(result)) {\n      } else if (Values.isDefined(req.query.quiet)) {\n      } else if (this.config.defaultFormat === 'cli' || Values.isDefined(req.query.line)\n      || this.isCliDomain(req) || command.format === 'cli') {\n         res.set('Content-Type', 'text/plain');\n         if (lodash.isArray(result)) {\n            if (mobile) {\n            } else {\n               resultString = result.join('\\n');\n            }\n         } else if (lodash.isObject(result)) {\n            if (command.resultObjectType === 'KeyedArrays') {\n               resultString = lodash.flatten(Object.keys(result).map(key => {\n                  let value = result[key];\n                  if (lodash.isArray(value)) {\n                     return ['', key + ':', ...value];\n                  } else if (typeof value === 'string') {\n                     if (key === 'message') {\n                        return value;\n                     } else {\n                        return key + ': ' + value;\n                     }\n                  } else {\n                     return ['', key + ':', 'type:' + typeof value];\n                  }\n               })).join('\\n');\n            } else {\n               resultString = Object.keys(result).map(key => {\n                  let value = result[key];\n                  if (parseInt(value) === value) {\n                     value = parseInt(value);\n                  } else {\n                     value = `'${value}'`;\n                  }\n                  return [key, value].join('=');\n               }).join('\\n');\n            }\n         } else if (result === null) {\n         } else {\n            resultString = result.toString();\n         }\n      } else if (this.config.defaultFormat === 'plain' || Values.isDefined(req.query.plain)\n      || command.format === 'plain') {\n         res.set('Content-Type', 'text/plain');\n         resultString = result.toString();\n      } else if (this.config.defaultFormat === 'html' || Values.isDefined(req.query.html)\n      || command.format === 'html') {\n         res.set('Content-Type', 'text/html');\n         resultString = result.toString();\n      } else if (this.config.defaultFormat !== 'json') {\n         this.sendError(req, res, {message: `Invalid default format: ${this.config.defaultFormat}`});\n      } else {\n         res.json(result);\n         return;\n      }\n      res.send(resultString + '\\n');\n   }\n\n   isDebugReq(req) {\n      return req.hostname === 'localhost';\n   }\n\n   isSecureDomain(req) {\n      if (this.config.secureDomain) {\n         return true;\n      }\n      if (/^(secure|cli)\\./.test(req.hostname)) {\n         this.logger.warn('isSecureDomain', req.hostname);\n         return true;\n      }\n      return false;\n   }\n\n   isMobile(req) {\n      return /Mobile/.test(req.get('User-Agent'));\n   }\n\n   isBrowser(req) {\n      return !/^curl\\//.test(req.get('User-Agent'));\n   }\n\n   isCliDomain(req) {\n      return /^cli/.test(req.hostname) || !this.isBrowser(req);\n   }\n\n   sendError(req, res, err) {\n      this.logger.warn(err);\n      this.sendStatusMessage(req, res, 500, err.message, err);\n   }\n\n   sendStatusMessage(req, res, statusCode, errorMessage, err) {\n      if (this.isCliDomain(req)) {\n         if (err) {\n            if (err.stack) {\n               errorMessage = err.stack.toString();\n            }\n         }\n      }\n      res.status(statusCode).send(errorMessage + '\\n');\n   }\n\n   digestPem(pem) {\n      const lines = pem.split(/[\\n\\t]/);\n      if (lines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      if (!/^-+BEGIN CERTIFICATE/.test(lines[0])) {\n         throw new ValidationError('Invalid first line');\n      }\n      const contentLines = lines.filter(line => {\n         return line.length > 16 && /^[\\w\\/\\+]+$/.test(line);\n      });\n      if (contentLines.length < 8) {\n         throw new ValidationError('Invalid lines');\n      }\n      const sha1 = crypto.createHash('sha1');\n      contentLines.forEach(line => sha1.update(new Buffer(line)));\n      const digest = sha1.digest('hex');\n      if (digest.length < 32) {\n         throw new ValidationError('Invalid cert length');\n      }\n      return digest;\n   }\n\n   async end() {\n      this.logger.info('end');\n      if (redis) {\n         await this.redis.quitAsync();\n      }\n      if (this.expressServer) {\n         this.expressServer.close();\n      }\n   }\n}\n"]}